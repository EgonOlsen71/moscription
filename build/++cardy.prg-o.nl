REALFAC = $BBA2
MEMARG = $BA8C
MEMMUL = $BA28
MEMSUB = $B850
FACMEM = $BBD7
PRINTSTRS = $AB25
VALS = $B7B5
CMPFAC = $BC5B
FACADD = $B867
SGNFAC = $BC2B
ARGADD = $B86A
ARGAND = $AFE9
ARGDIV = $BB14
FACMUL = $BA30
FACLOG = $B9EA
FACSQR = $BF71
FACEXPCALL = $BFED
FACABS = $BC58
FACSIN = $E26B
FACCOS = $E264
FACTAN = $E2B4
FACATN = $E30E
FACSIG = $BC39
FACNOT = $AED4
FACRND = $E097
XFACWORD = $B7F7
FACDIV = $BB0F
BASINT = $BCCC
FACPOW = $BF7B
FACSUB = $B853
FACOR = $AFE6
ARGFAC = $BBFC
FACARG = $BC0C
FACSTR = $BDDF
FACINT = $B1AA
RNDFAC = $BC1B
INTFAC = $B391
WRITETIS = $A9E7
GETTI = $BE68
GETTIME = $AF7E
COPYTIME = $AF87
TI2FAC = $AF84
BYTEFAC = $B3A2
CRSRRIGHT = $AB3B
ERRALL = $A437
ERRIQ = $B248
ERREI = $ACF4
ERRSYN = $AF08
INPUT = $A560
CRSRPOS = $FFF0
CHROUT = $FFD2
GETIN = $FFE4
OPENCH = $FFC0
CLOSECH = $FFC3
CHKIN = $FFC6
CHKOUT = $FFC9
CLRCH = $FFCC
LOADXX = $FFD5
SAVEXX = $FFD8
TWAIT = $FFE1
ERRFNF = $F12F
ARGSGN=$6E
ARGLO=$6D
ARGMO=$6C
ARGMOH=$6B
ARGHO=$6A
ARGEXP=$69
FACSGN=$66
FACLO=$65
FACMO=$64
FACMOH=$63
FACHO=$62
FACEXP=$61
FACOV=$70
OLDOV=$56
ARISGN=$6F
FAC=$61
RESLO=$29
RESMO=$28
RESMOH=$27
RESHO=$26
RESOV=$2A
RESHOP=$6F
FACHOP=$56
ITERCNT=$67
IOCHANNEL=$13
BASICSTART=$2B
BASICEND=$37
STATUS=$90
VERCHK=$93
SECADDR=$B9
DEVICENUM=$BA
FILELEN=$B7
LOGICADDR=$B8
FILEADDR=$BB
LOADEND=$C3
KEYNDX=$C6
INDEX1=$22
VALTYPE=$0D
LOWDS=$5D
TIMEADDR=$A0
BASICPOINTER=$7A
LOADOK_STATUS=64
LOFBUF=$FF
LOFBUFH=$100
INPUTBUF=$200
BASICBUFFER=820
TMP_ZP = 105
TMP2_ZP = 107
TMP3_ZP = 34
JUMP_TARGET = 69
TMP_REG=71
G_REG=73
X_REG=61
*=2072
TSX
STX SP_SAVE
PROGRAMSTART:
JSR START
LINE_0:
LINE_10:
LDY #11
STY 53280
LDY #0
STY 53281
LDY #1
STY 646
LDY #128
STY 650
LINE_20:
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_LF%
LDA VAR_LF%+1
JSR ICMP
BEQ EQ_EQ0
LDA #0
JMP EQ_SKIP0
EQ_EQ0:
LDA #$1
EQ_SKIP0:
COMP_SKP0:
BNE LINE_NSKIP188
JMP LINE_SKIP188
LINE_NSKIP188:
LDY #1
LDA #0
STY VAR_LF%
STA VAR_LF%+1
LDA #<CONST_4
LDY #>CONST_4
STA B_REG
STY B_REG+1
LDA B_REG
LDY B_REG+1
STA TMP_ZP
STY TMP_ZP+1
JSR PUSHINT
LDA #<CONST_5R
LDY #>CONST_5R
JSR COPY2_XYA_XREG
LDA #<CONST_2R
LDY #>CONST_2R
JSR COPY2_XYA_YREG
JSR POPINT
LDY TMP_ZP
LDA TMP_ZP+1
STY G_REG
STA G_REG+1
JSR LOAD
JMP RESTARTPRG
LINE_SKIP188:
LINE_25:
LDA #$01
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_LF%
LDA VAR_LF%+1
JSR ICMP
BEQ EQ_EQ1
LDA #0
JMP EQ_SKIP1
EQ_EQ1:
LDA #$1
EQ_SKIP1:
COMP_SKP1:
BNE LINE_NSKIP189
JMP LINE_SKIP189
LINE_NSKIP189:
LDY #21
LDA #0
STY VAR_LF%
STA VAR_LF%+1
LDA #<CONST_7
LDY #>CONST_7
STA B_REG
STY B_REG+1
LDA B_REG
LDY B_REG+1
STA TMP_ZP
STY TMP_ZP+1
JSR PUSHINT
LDA #<CONST_5R
LDY #>CONST_5R
JSR COPY2_XYA_XREG
LDA #<CONST_2R
LDY #>CONST_2R
JSR COPY2_XYA_YREG
JSR POPINT
LDY TMP_ZP
LDA TMP_ZP+1
STY G_REG
STA G_REG+1
JSR LOAD
JMP RESTARTPRG
LINE_SKIP189:
LINE_30:
JSR GOSUB
JSR LINE_19900
JSR GOSUB
JSR LINE_59000
JSR GOSUB
JSR LINE_32000
JSR GOSUB
JSR LINE_33000
LINE_40:
JSR GOSUB
JSR LINE_33500
JSR GOSUB
JSR LINE_33800
JSR GOSUB
JSR LINE_33850
JSR GOSUB
JSR LINE_58500
JSR GOSUB
JSR LINE_34000
LINE_900:
LINE_1000:
JSR ONETOFAC
JSR FACRND
JSR FACXREG
LDY #2
STY A_REG
JSR SHL
JSR FACINT
STY VAR_FI%
STA VAR_FI%+1
LDA #<VAR_PF%[]
LDY #>VAR_PF%[]
STA G_REG
STY G_REG+1
LDY VAR_FI%
LDA VAR_FI%+1
JSR ARRAYACCESS_INTEGER_INT
JSR COMPACT162
JSR ICMP
NEQ_NEQ2:
NEQ_SKIP2:
COMP_SKP2:
BEQ LINE_SKIP190
LINE_NSKIP190:
JMP LINE_1000
LINE_SKIP190:
LINE_1010:
JSR GOSUB
JSR LINE_10000
LINE_1040:
LDY #0
TYA
STY VAR_MD%
STA VAR_MD%+1
JSR GOSUB
JSR LINE_33300
JSR GOSUB
JSR LINE_29000
JSR GOSUB
JSR LINE_47900
LINE_1045:
LDA #<CONST_10R
LDY #>CONST_10R
JSR REALFACPUSH
JSR COMPACTMAX
LDY VAR_AL%
LDA VAR_AL%+1
JSR FIINX
JSR COPY_XREG2YREG
JSR COMPACT163
LDA #<CONST_11
LDY #>CONST_11
STA A_REG
STY A_REG+1
JSR CONCAT
JSR POPREALXREG
LDA #<VAR_MG$[]
LDY #>VAR_MG$[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_STRING
LDY #9
LDA #0
STY VAR_MG%
STA VAR_MG%+1
JSR GOSUB
JSR LINE_40000
LINE_1050:
LDY #6
JSR COMPACT3
LINE_1060:
JSR GOSUB
JSR LINE_22000
LINE_1070:
LDY VAR_MD%
LDA VAR_MD%+1
JSR SUPERFIINX
STY TMP_ZP
ON3SUB0:
LDX #1
CPX TMP_ZP
COMP_SKP3:
BNE ON3SUB1
JSR GOSUB
JSR LINE_44400
JMP GSKIPON3
ON3SUB1:
INX
CPX TMP_ZP
COMP_SKP4:
BNE ON3SUB2
JSR GOSUB
JSR LINE_45500
JMP GSKIPON3
ON3SUB2:
INX
CPX TMP_ZP
COMP_SKP5:
BNE ON3SUB3
JSR GOSUB
JSR LINE_44500
JMP GSKIPON3
ON3SUB3:
INX
CPX TMP_ZP
COMP_SKP6:
BNE ON3SUB4
JSR GOSUB
JSR LINE_47500
JMP GSKIPON3
ON3SUB4:
INX
CPX TMP_ZP
COMP_SKP7:
BNE GSKIPON3
JSR GOSUB
JSR LINE_53000
JMP GSKIPON3
GSKIPON3:
LINE_1075:
LDA #$05
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_MD%
LDA VAR_MD%+1
JSR ICMP
EQ_EQ3:
EQ_SKIP3:
COMP_SKP8:
BNE LINE_SKIP191
LINE_NSKIP191:
JMP LINE_900
LINE_SKIP191:
LINE_1080:
JMP LINE_1060
LINE_9999:
JSR END
RTS
LINE_10000:
LINE_10005:
LDY #1
LDA #0
STY VAR_AF%
STA VAR_AF%+1
JSR GOSUB
JSR LINE_51900
LINE_10010:
LDY VAR_RS%
LDA VAR_RS%+1
STY AS_TMP
STA AS_TMP+1
LDA #<VAR_PF%[]
LDY #>VAR_PF%[]
STA G_REG
STY G_REG+1
LDY VAR_FI%
LDA VAR_FI%+1
JSR ARRAYSTORE_INT_INTEGER_AC
LDY VAR_FI%
LDA VAR_FI%+1
JSR INTFAC
JSR PUSHREAL
LDA #<CONST_16R
LDY #>CONST_16R
JSR REALFACPUSH
LDY VAR_RS%
LDA VAR_RS%+1
JSR INTFAC
JSR COMPACT125
JSR ARRAYACCESS_INTEGER_SNX
JSR COMPACT153
LINE_10020:
JMP RETURN
LINE_19900:
LINE_19910:
LDY #0
TYA
STY VAR_VC%
STA VAR_VC%+1
STY VAR_AC%
STA VAR_AC%+1
LINE_19920:
LDX #4
dcloop225_1:
LDA CONST_17,X
STA VAR_I,X
DEX
BPL dcloop225_1
LDA #<CONST_18
LDY #>CONST_18
JSR REALFACPUSH
JSR COMPACT59
LDA #<CONST_1R
LDY #>CONST_1R
JSR COPY2_XYA_XREG
JSR FASTFOR
LDY #0
TYA
CPY A_REG
BNE COMP_SKP9
CMP A_REG+1
BNE COMP_SKP9
COMP_SKP9:
BNE RBEQ_0
JMP (JUMP_TARGET)
RBEQ_0:
LINE_19930:
LDY #15
STY 54296
JMP RETURN
LINE_19999:
LINE_20000:
LDY #0
TYA
STY VAR_IC%
STA VAR_IC%+1
JSR GOSUB
JSR LINE_22000
LINE_20010:
LDA #<VAR_VW%[]
LDY #>VAR_VW%[]
STA G_REG
STY G_REG+1
LDY VAR_VC%
LDA VAR_VC%+1
JSR ARRAYACCESS_INTEGER_INT
LDA X_REG
BEQ EQ_EQ4
LDA #0
JMP EQ_SKIP4
EQ_EQ4:
LDA #$1
EQ_SKIP4:
COMP_SKP10:
BEQ LINE_SKIP192
LINE_NSKIP192:
JMP LINE_20100
LINE_SKIP192:
LINE_20020:
LDY VAR_VC%
LDA VAR_VC%+1
JSR SUPERFIINX
STY VAR_VC%
STA VAR_VC%+1
LDY VAR_IC%
LDA VAR_IC%+1
JSR SUPERFIINX
STY VAR_IC%
STA VAR_IC%+1
LINE_20030:
LDA #$03
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_VC%
LDA VAR_VC%+1
JSR ICMP
EQ_EQ5:
EQ_SKIP5:
COMP_SKP11:
BNE LINE_SKIP193
LINE_NSKIP193:
LDY #0
TYA
STY VAR_VC%
STA VAR_VC%+1
LINE_SKIP193:
LINE_20040:
LDA #$03
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_IC%
LDA VAR_IC%+1
JSR ICMP
EQ_EQ6:
EQ_SKIP6:
COMP_SKP12:
BNE LINE_SKIP194
LINE_NSKIP194:
JMP RETURN
LINE_SKIP194:
LINE_20050:
JMP LINE_20010
LINE_20100:
JSR COMPACT166
JSR FACMEM
LDX #4
dcloop225_2:
LDA VAR_TI,X
STA VAR_TT,X
DEX
BPL dcloop225_2
LDA #<CONST_20R
LDY #>CONST_20R
JSR COPY2_XYA_YREG
LDY VAR_VC%
LDA VAR_VC%+1
JSR COMPACT167
JSR FASTFMULMEM
JSR FACXREG
LDA #<CONST_17
LDY #>CONST_17
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFADDMEM
LDX #<VAR_SB
LDY #>VAR_SB
JSR FACMEM
LINE_20110:
LDA #<CONST_15R
LDY #>CONST_15R
JSR REALFAC
LDA #<VAR_SB
LDY #>VAR_SB
JSR FASTFADDMEM
JSR PUSHREAL
LDY VAR_AT%
LDA VAR_AT%+1
STY A_REG
STA A_REG+1
LDY #4
JSR INTSHL
JSR INTFAC
JSR FACXREG
LDY VAR_DD%
LDA VAR_DD%+1
JSR INTFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFADDMEM
JSR FACXREG
JSR POPREAL
JSR FACWORD
STY MOVBSELF6+1
STA MOVBSELF6+2
JSR XREGFAC
JSR FACWORD
MOVBSELF6:
STY $FFFF
LINE_20120:
LDA #<CONST_12R
LDY #>CONST_12R
JSR COMPACT20
LDY VAR_EL%
LDA VAR_EL%+1
STY A_REG
STA A_REG+1
LDY #4
JSR INTSHL
JSR INTFAC
JSR FACXREG
LDY VAR_RL%
LDA VAR_RL%+1
JSR INTFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFADDMEM
JSR FACXREG
JSR POPREAL
JSR FACWORD
STY MOVBSELF7+1
STA MOVBSELF7+2
JSR XREGFAC
JSR FACWORD
MOVBSELF7:
STY $FFFF
LINE_20130:
LDA #<VAR_SB
LDY #>VAR_SB
JSR REALFAC
JSR FACWORD
STY MOVBSELF8+1
STA MOVBSELF8+2
LDY VAR_LQ%
MOVBSELF8:
STY $FFFF
JSR ONETOFAC
LDA #<VAR_SB
LDY #>VAR_SB
JSR FASTFADDMEM
JSR FACWORD
STY MOVBSELF9+1
STA MOVBSELF9+2
LDY VAR_HQ%
MOVBSELF9:
STY $FFFF
LINE_20140:
LDY VAR_WF%
LDA VAR_WF%+1
STY AS_TMP
STA AS_TMP+1
JSR COMPACT15
JSR ARRAYSTORE_INT_INTEGER_AC
LDY VAR_VC%
LDA VAR_VC%+1
JSR INTFAC
JSR FACXREG
LDA #<VAR_TT
LDY #>VAR_TT
JSR COPY2_XYA_YREG
LDA #<VAR_VL[]
LDY #>VAR_VL[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_REAL
LDY #15
STY 54296
LDA #<CONST_14R
LDY #>CONST_14R
JSR COMPACT20
LDY VAR_WF%
LDA VAR_WF%+1
JSR FIINX
JSR POPREAL
JSR FACWORD
STY MOVBSELF11+1
STA MOVBSELF11+2
JSR XREGFAC
JSR FACWORD
MOVBSELF11:
STY $FFFF
LINE_20150:
LDY VAR_PT%
LDA VAR_PT%+1
STY A_REG
STA A_REG+1
LDY #1
JSR INTSHL
STY VAR_PT%
STA VAR_PT%+1
LDY VAR_PT%
LDA VAR_PT%+1
STY AS_TMP
STA AS_TMP+1
LDA #<VAR_VT%[]
LDY #>VAR_VT%[]
STA G_REG
STY G_REG+1
LDY VAR_VC%
LDA VAR_VC%+1
JSR ARRAYSTORE_INT_INTEGER_AC
LDY VAR_AC%
LDA VAR_AC%+1
JSR SUPERFIINX
STY VAR_AC%
STA VAR_AC%+1
LINE_20160:
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_IM%
LDA VAR_IM%+1
JSR ICMP
EQ_EQ7:
EQ_SKIP7:
COMP_SKP13:
BNE LINE_SKIP195
LINE_NSKIP195:
JMP RETURN
LINE_SKIP195:
LINE_20170:
JSR COMPACT17
dcloop381_1:
LDA VAR_TI,X
STA VAR_TT,X
DEX
BPL dcloop381_1
LDA #<VAR_VL[]
LDY #>VAR_VL[]
STA G_REG
STY G_REG+1
LDY VAR_VC%
LDA VAR_VC%+1
JSR ARRAYACCESS_REAL_INT
JSR COPY_XREG2YREG
LDA #<VAR_TT
LDY #>VAR_TT
JSR COPY2_XYA_XREG
JSR YREGFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFSUBMEM
JSR FACXREG
LDY VAR_PT%
LDA VAR_PT%+1
JSR INTFAC
LDA #<X_REG
LDY #>X_REG
JSR CMPFAC
BEQ LT_LT_EQ8
ROL
BCC LT_LT8
LT_LT_EQ8:
LDA #0
JMP LT_SKIP8
LT_LT8:
LDA #$1
LT_SKIP8:
COMP_SKP14:
BEQ LINE_SKIP196
LINE_NSKIP196:
JMP LINE_20170
LINE_SKIP196:
LINE_20180:
LDA #<CONST_14R
LDY #>CONST_14R
JSR REALFAC
LDA #<VAR_SB
LDY #>VAR_SB
JSR FASTFADDMEM
JSR FACWORD
STY MOVBSELF12+1
STA MOVBSELF12+2
LDY VAR_WF%
MOVBSELF12:
STY $FFFF
LDY #0
TYA
STY AS_TMP
STA AS_TMP+1
JSR COMPACT15
JSR ARRAYSTORE_INT_INTEGER_AC
LDY VAR_AC%
LDA VAR_AC%+1
JSR SUPERFIDEX
STY VAR_AC%
STA VAR_AC%+1
LINE_20190:
LDY VAR_VC%
LDA VAR_VC%+1
JSR SUPERFIINX
STY VAR_VC%
STA VAR_VC%+1
LDA #$03
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_VC%
LDA VAR_VC%+1
JSR ICMP
EQ_EQ9:
EQ_SKIP9:
COMP_SKP15:
BNE LINE_SKIP197
LINE_NSKIP197:
LDY #0
TYA
STY VAR_VC%
STA VAR_VC%+1
LINE_SKIP197:
LINE_20200:
JMP RETURN
LINE_21999:
LINE_22000:
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_AC%
LDA VAR_AC%+1
JSR ICMP
EQ_EQ10:
EQ_SKIP10:
COMP_SKP16:
BNE LINE_SKIP198
LINE_NSKIP198:
JMP RETURN
LINE_SKIP198:
LINE_22005:
LDX #4
dcloop381_2:
LDA VAR_TT,X
STA VAR_TS,X
DEX
BPL dcloop381_2
JSR COMPACT17
dcloop381_3:
LDA VAR_TI,X
STA VAR_TT,X
DEX
BPL dcloop381_3
LDA #<VAR_TT
LDY #>VAR_TT
JSR REALFAC
LDA #<VAR_TS
LDY #>VAR_TS
JSR CMPFAC
ROL
BCS GT_GT11
LDA #0
JMP GT_SKIP11
GT_GT11:
LDA #$1
GT_SKIP11:
COMP_SKP17:
BNE LINE_NSKIP199
JMP LINE_SKIP199
LINE_NSKIP199:
LDY #0
TYA
STY AS_TMP
STA AS_TMP+1
LDA #<VAR_VW%[]
LDY #>VAR_VW%[]
STA G_REG
STY G_REG+1
LDY #0
LDA #0
JSR ARRAYSTORE_INT_INTEGER_AC
JSR COMPACT22
LDY #1
LDA #0
JSR ARRAYSTORE_INT_INTEGER_AC
JSR COMPACT22
LDY #2
LDA #0
JSR ARRAYSTORE_INT_INTEGER_AC
LINE_SKIP199:
LINE_22010:
LDA #0
STA VAR_HH
STA VAR_HH+1
STA VAR_HH+2
STA VAR_HH+3
STA VAR_HH+4
LDA #<CONST_8R
LDY #>CONST_8R
JSR REALFACPUSH
LDA #<CONST_2R
LDY #>CONST_2R
JSR REALFACPUSH
LDA #<VAR_HH
LDY #>VAR_HH
STA A_REG
STY A_REG+1
LDA #<FORLOOP0
STA JUMP_TARGET
LDA #>FORLOOP0
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP0:
LDA #<VAR_HH
LDY #>VAR_HH
JSR COPY2_XYA_XREG
LDA #<VAR_VT%[]
LDY #>VAR_VT%[]
JSR ARRAYACCESS_INTEGER_S
LDA #<X_REG
LDY #>X_REG
JSR REALFACPUSH
LDA #<VAR_HH
LDY #>VAR_HH
JSR COPY2_XYA_XREG
LDA #<VAR_VL[]
LDY #>VAR_VL[]
JSR ARRAYACCESS_REAL_S
JSR COPY_XREG2YREG
LDA #<VAR_TT
LDY #>VAR_TT
JSR COPY2_XYA_XREG
JSR YREGFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFSUBMEM
JSR FACXREG
JSR POPREAL
JSR FACYREG
LDA #<X_REG
LDY #>X_REG
JSR CMPFAC
BEQ LT_LT_EQ12
ROL
BCC LT_LT12
LT_LT_EQ12:
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP LT_SKIP12
LT_LT12:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
LT_SKIP12:
JSR REALFACPUSH
LDA #<VAR_HH
LDY #>VAR_HH
JSR COPY2_XYA_XREG
LDA #<VAR_VW%[]
LDY #>VAR_VW%[]
JSR ARRAYACCESS_INTEGER_S
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY TMP2_ZP
LDA TMP2_ZP+1
JSR ICMP
BEQ EQ_EQ13
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP EQ_SKIP13
EQ_EQ13:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
EQ_SKIP13:
JSR REALFAC
JSR COMPACT88
COMP_SKP18:
BEQ LINE_SKIP200
LINE_NSKIP200:
JMP LINE_22040
LINE_SKIP200:
LINE_22020:
LDA #<CONST_20R
LDY #>CONST_20R
JSR REALFAC
LDA #<VAR_HH
LDY #>VAR_HH
JSR FASTFMULMEM
JSR FACXREG
LDA #<CONST_17
LDY #>CONST_17
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFADDMEM
JSR COMPACT39
JSR FASTFADDMEM
JSR PUSHREAL
LDA #<VAR_HH
LDY #>VAR_HH
JSR COPY2_XYA_XREG
LDA #<VAR_VW%[]
LDY #>VAR_VW%[]
JSR ARRAYACCESS_INTEGER_S
JSR POPREAL
JSR FACWORD
STY MOVBSELF13+1
STA MOVBSELF13+2
JSR XREGFAC
JSR FACWORD
MOVBSELF13:
STY $FFFF
LDA #<VAR_HH
LDY #>VAR_HH
JSR COPY2_XYA_XREG
JSR COMPACT22
JSR ARRAYSTORE_INT_INTEGER
LDY VAR_AC%
LDA VAR_AC%+1
JSR SUPERFIDEX
STY VAR_AC%
STA VAR_AC%+1
LINE_22040:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_1
JMP (JUMP_TARGET)
RBEQ_1:
JMP RETURN
LINE_29000:
LINE_29010:
JSR GOSUB
JSR LINE_29800
LDY #0
TYA
STY VAR_XC%
STA VAR_XC%+1
STY VAR_YC%
STA VAR_YC%+1
LDA #0
STA VAR_II
STA VAR_II+1
STA VAR_II+2
STA VAR_II+3
STA VAR_II+4
LDA #<CONST_0R
LDY #>CONST_0R
JSR COMPACT123
LDA #<FORLOOP1
STA JUMP_TARGET
LDA #>FORLOOP1
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP1:
LINE_29020:
JSR COMPACT102
JSR ARRAYACCESS_INTEGER_SI
STY VAR_CN%
STA VAR_CN%+1
JSR COMPACT115
EQ_EQ14:
EQ_SKIP14:
COMP_SKP20:
BNE LINE_SKIP201
LINE_NSKIP201:
JMP LINE_29050
LINE_SKIP201:
LINE_29030:
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_YC%
LDA VAR_YC%+1
JSR ICMP
EQ_EQ15:
EQ_SKIP15:
COMP_SKP21:
BNE LINE_SKIP202
LINE_NSKIP202:
JSR GOSUB
JSR LINE_30800
JMP LINE_29050
LINE_SKIP202:
LINE_29040:
LDA #<VAR_II
LDY #>VAR_II
JSR COPY2_XYA_XREG
JSR COMPACT95
LINE_29050:
LDY #$00
LDA #$07
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_XC%
LDA VAR_XC%+1
JSR INTADD
JSR INTCONV
STY VAR_XC%
STA VAR_XC%+1
LDA #$15
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_XC%
LDA VAR_XC%+1
JSR ICMP
ROL
BCS GT_GT16
LDA #0
JMP GT_SKIP16
GT_GT16:
LDA #$1
GT_SKIP16:
COMP_SKP22:
BNE LINE_NSKIP203
JMP LINE_SKIP203
LINE_NSKIP203:
LDY #0
TYA
STY VAR_XC%
STA VAR_XC%+1
LDA #$04
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_YC%
LDA VAR_YC%+1
JSR ICMP
BEQ EQ_EQ17
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP EQ_SKIP17
EQ_EQ17:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
EQ_SKIP17:
JSR REALFAC
JSR FACXREG
LDY #2
STY A_REG
JSR SHL
JSR PUSHREAL
LDY #$00
LDA #$04
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_YC%
LDA VAR_YC%+1
JSR INTADD
JSR FACXREG
JSR POPREAL2X
JSR FASTFSUBARG
JSR FACINT
STY VAR_YC%
STA VAR_YC%+1
LINE_SKIP203:
LINE_29100:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_2
JMP (JUMP_TARGET)
RBEQ_2:
JMP RETURN
LINE_29800:
LINE_29810:
LDA #19
JSR SINGLECHROUTMAX
LDY #1
STY 646
LDY #0
TYA
STY VAR_CX%
STA VAR_CX%+1
STY VAR_CY%
STA VAR_CY%+1
LINE_29820:
LDA #0
JSR COMPACT138
LDA #<CONST_21R
LDY #>CONST_21R
JSR COMPACT13
LDA #<FORLOOP2
STA JUMP_TARGET
LDA #>FORLOOP2
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP2:
JSR GOSUB
JSR LINE_34500
JSR COMPACT168
LDA #<CONST_22
LDY #>CONST_22
JSR STROUTWL
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_3
JMP (JUMP_TARGET)
RBEQ_3:
LINE_29830:
JMP RETURN
LINE_30000:
LINE_30001:
LINE_30005:
LDY #1
LDA #0
STY VAR_DC%
STA VAR_DC%+1
LINE_30010:
LDA 53266
CMP #100
BCC PEEKLT0
BEQ PEEKEQ0
LDA #$FF
JMP PEEKDONE0
PEEKLT0:
LDA #$01
JMP PEEKDONE0
PEEKEQ0:
LDA #0
PEEKDONE0:
BEQ LT_LT_EQ18
ROL
BCC LT_LT18
LT_LT_EQ18:
LDA #0
JMP LT_SKIP18
LT_LT18:
LDA #$1
LT_SKIP18:
COMP_SKP25:
BEQ LINE_SKIP204
LINE_NSKIP204:
JMP LINE_30010
LINE_SKIP204:
LINE_30020:
JSR GOSUB
JSR LINE_31600
LDY #$00
LDA #$05
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_YC%
LDA VAR_YC%+1
JSR INTADD
JSR FACXREG
LDY #5
LDA #0
STY A_REG
STA A_REG+1
JSR COPY_XREG2YREG
JSR XREGFAC
JSR SHL
JSR FACXREG
LDY #3
JSR COMPACT90
JSR FASTFADDMEM
JSR PUSHREAL
LDY VAR_XC%
LDA VAR_XC%+1
JSR FIINX
JSR POPREAL2X
JSR FASTFADDARG
JSR FACINT
STY VAR_SS%
STA VAR_SS%+1
LINE_30150:
LDY #$00
LDA #$28
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_SS%
LDA VAR_SS%+1
JSR INTADD
JSR FACXREG
LDA #<VAR_SA
LDY #>VAR_SA
JSR COMPACT40
LDA #<VAR_PP
LDY #>VAR_PP
JSR REALFACPUSH
LDA #<CONST_25R
LDY #>CONST_25R
JSR REALFACPUSH
JSR COMPACT116
JSR ARRAYACCESS_INTEGER_SNX
JSR POPREAL2X
JSR FASTFADDARG
JSR FACXREG
JSR POPREAL
JSR FACWORD
STY MOVBSELF16+1
STA MOVBSELF16+2
JSR XREGFAC
JSR FACWORD
MOVBSELF16:
STY $FFFF
LINE_30160:
LINE_30162:
JSR GOSUB
JSR LINE_30700
LDA #$ff
LDY #$ff
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_HP%
LDA VAR_HP%+1
JSR ICMP
BEQ EQ_EQ19
LDA #0
JMP EQ_SKIP19
EQ_EQ19:
LDA #$1
EQ_SKIP19:
COMP_SKP26:
BNE LINE_NSKIP205
JMP LINE_SKIP205
LINE_NSKIP205:
LDA #<CONST_16R
LDY #>CONST_16R
JSR REALFACPUSH
LDY VAR_CN%
LDA VAR_CN%+1
JSR COMPACT8
JSR ARRAYACCESS_INTEGER_SI
STY VAR_HP%
STA VAR_HP%+1
LINE_SKIP205:
LINE_30170:
LDA #<CONST_14R
LDY #>CONST_14R
JSR REALFAC
LDA #<VAR_PP
LDY #>VAR_PP
JSR FASTFADDMEM
LDX #<VAR_PP
LDY #>VAR_PP
JSR FACMEM
LDA #<VAR_PP
LDY #>VAR_PP
JSR REALFACPUSH
LDY #$00
LDA #$30
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_HP%
LDA VAR_HP%+1
JSR INTADD
JSR FACXREG
JSR POPREAL
JSR FACWORD
STY MOVBSELF17+1
STA MOVBSELF17+2
JSR XREGFAC
JSR FACWORD
MOVBSELF17:
STY $FFFF
LDY #255
LDA #255
STY VAR_HP%
STA VAR_HP%+1
LINE_30180:
LDY #28
LDA #0
STY VAR_PV%
STA VAR_PV%+1
LDA #<CONST_27R
LDY #>CONST_27R
JSR REALFACPUSH
LDY VAR_CN%
LDA VAR_CN%+1
JSR COMPACT8
JSR ARRAYACCESS_INTEGER_SI
STY VAR_PC%
STA VAR_PC%+1
LINE_30190:
LDA #<CONST_28R
LDY #>CONST_28R
JSR REALFACPUSH
LDY VAR_CN%
LDA VAR_CN%+1
JSR COMPACT9
LDA #<CONST_1R
LDY #>CONST_1R
JSR COMPACT79
BCS GT_GT20
LDA #0
JMP GT_SKIP20
GT_GT20:
LDA #$1
GT_SKIP20:
COMP_SKP27:
BNE LINE_NSKIP206
JMP LINE_SKIP206
LINE_NSKIP206:
LDY #37
LDA #0
STY VAR_PV%
STA VAR_PV%+1
JSR COMPACT37
JSR COMPACT8
JSR ARRAYACCESS_INTEGER_SI
STY VAR_PC%
STA VAR_PC%+1
LDY VAR_DC%
LDA VAR_DC%+1
STY VAR_C%
STA VAR_C%+1
LINE_SKIP206:
LINE_30200:
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_PC%
LDA VAR_PC%+1
JSR ICMP
EQ_EQ21:
EQ_SKIP21:
COMP_SKP28:
BNE LINE_SKIP207
LINE_NSKIP207:
LDY #1
LDA #0
STY VAR_PC%
STA VAR_PC%+1
LDY #32
LDA #0
STY VAR_PV%
STA VAR_PV%+1
LINE_SKIP207:
LINE_30210:
LDA #<CONST_31
LDY #>CONST_31
JSR REALFAC
LDA #<VAR_PP
LDY #>VAR_PP
JSR FASTFSUBMEM
JSR FACXREG
LDA #<CONST_14R
LDY #>CONST_14R
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFSUBMEM
LDX #<VAR_PO
LDY #>VAR_PO
JSR FACMEM
LDY VAR_PC%
LDA VAR_PC%+1
JSR INTFAC
LDA #<CONST_15R
LDY #>CONST_15R
JSR COPY2_XYA_XREG
LDA #<X_REG
LDY #>X_REG
JSR FASTFSUBMEM
JSR FACXREG
LDA #<VAR_PO
LDY #>VAR_PO
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFADDMEM
LDX #<VAR_PP
LDY #>VAR_PP
JSR FACMEM
LINE_30220:
LDY VAR_PC%
LDA VAR_PC%+1
JSR INTFAC
LDA #<VAR_PP
LDY #>VAR_PP
JSR COPY2_XYA_XREG
LDA #<X_REG
LDY #>X_REG
JSR FASTFADDMEM
JSR FACXREG
JSR ONETOFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFSUBMEM
JSR PUSHREAL
LDA #<CONST_2R
LDY #>CONST_2R
JSR REALFACPUSH
LDA #<VAR_PP
LDY #>VAR_PP
STA A_REG
STY A_REG+1
LDA #<FORLOOP3
STA JUMP_TARGET
LDA #>FORLOOP3
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP3:
LINE_30230:
LDA #<VAR_PP
LDY #>VAR_PP
JSR REALFAC
JSR FACWORD
STY MOVBSELF18+1
STA MOVBSELF18+2
LDY VAR_PV%
MOVBSELF18:
STY $FFFF
JSR COMPACT41
STY MOVBSELF19+1
STA MOVBSELF19+2
LDY VAR_C%
MOVBSELF19:
STY $FFFF
LINE_30240:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_4
JMP (JUMP_TARGET)
RBEQ_4:
LINE_30250:
LDA #<CONST_32R
LDY #>CONST_32R
JSR REALFAC
LDA #<VAR_PP
LDY #>VAR_PP
JSR FASTFADDMEM
JSR FACXREG
JSR COMPACT145
JSR FASTFSUBMEM
LDX #<VAR_PP
LDY #>VAR_PP
JSR FACMEM
LDA #<CONST_33R
LDY #>CONST_33R
JSR REALFACPUSH
LDY VAR_CN%
LDA VAR_CN%+1
JSR COMPACT8
JSR ARRAYACCESS_INTEGER_SI
STY VAR_PV%
STA VAR_PV%+1
LINE_30260:
LDA #<VAR_PP
LDY #>VAR_PP
JSR REALFAC
JSR FACWORD
STY MOVBSELF20+1
STA MOVBSELF20+2
LDY VAR_PV%
MOVBSELF20:
STY $FFFF
JSR ONETOFAC
LDA #<VAR_PP
LDY #>VAR_PP
JSR FASTFADDMEM
JSR PUSHREAL
LDY VAR_PV%
LDA VAR_PV%+1
JSR FIINX
JSR POPREAL
JSR FACWORD
STY MOVBSELF21+1
STA MOVBSELF21+2
JSR XREGFAC
JSR FACWORD
MOVBSELF21:
STY $FFFF
LINE_30270:
LDA #<CONST_24R
LDY #>CONST_24R
JSR REALFAC
LDA #<VAR_PP
LDY #>VAR_PP
JSR FASTFADDMEM
JSR PUSHREAL
LDY #$00
LDA #$02
JSR COMPACT43
JSR POPREAL
JSR FACWORD
STY MOVBSELF22+1
STA MOVBSELF22+2
JSR XREGFAC
JSR FACWORD
MOVBSELF22:
STY $FFFF
LDA #<CONST_34R
LDY #>CONST_34R
JSR REALFAC
LDA #<VAR_PP
LDY #>VAR_PP
JSR FASTFADDMEM
JSR PUSHREAL
LDY #$00
LDA #$03
JSR COMPACT43
JSR POPREAL
JSR FACWORD
STY MOVBSELF23+1
STA MOVBSELF23+2
JSR XREGFAC
JSR FACWORD
MOVBSELF23:
STY $FFFF
LINE_30280:
LDA #<CONST_35R
LDY #>CONST_35R
JSR REALFAC
LDA #<VAR_PP
LDY #>VAR_PP
JSR FASTFADDMEM
LDX #<VAR_PP
LDY #>VAR_PP
JSR FACMEM
LINE_30290:
LDA #<CONST_36R
LDY #>CONST_36R
JSR REALFACPUSH
LDY VAR_CN%
LDA VAR_CN%+1
JSR COMPACT8
JSR ARRAYACCESS_INTEGER_SI
STY VAR_PV%
STA VAR_PV%+1
LINE_30295:
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_PV%
LDA VAR_PV%+1
JSR ICMP
EQ_EQ22:
EQ_SKIP22:
COMP_SKP30:
BNE LINE_SKIP208
LINE_NSKIP208:
JMP LINE_30360
LINE_SKIP208:
LINE_30300:
LDA #<VAR_PP
LDY #>VAR_PP
JSR REALFACPUSH
LDA #$0d
JSR COMPACT42
ROL
BCS GT_GT23
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP GT_SKIP23
GT_GT23:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
GT_SKIP23:
JSR REALFACPUSH
LDY #$00
LDA #$5d
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_PV%
LDA VAR_PV%+1
JSR INTADD
JSR FACXREG
JSR POPREAL2X
JSR FASTFSUBARG
JSR FACXREG
JSR POPREAL
JSR FACWORD
STY MOVBSELF24+1
STA MOVBSELF24+2
JSR XREGFAC
JSR FACWORD
MOVBSELF24:
STY $FFFF
LDY VAR_DC%
LDA VAR_DC%+1
STY VAR_C%
STA VAR_C%+1
LINE_30310:
LDA #$1c
JSR COMPACT42
EQ_EQ24:
EQ_SKIP24:
COMP_SKP31:
BNE LINE_SKIP209
LINE_NSKIP209:
JSR GOSUB
JSR LINE_30700
LINE_SKIP209:
LINE_30320:
JSR COMPACT41
STY MOVBSELF25+1
STA MOVBSELF25+2
LDY VAR_C%
MOVBSELF25:
STY $FFFF
LINE_30360:
JMP RETURN
LINE_30700:
LINE_30710:
LDA #$01
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_DC%
LDA VAR_DC%+1
JSR ICMP
BNE NEQ_NEQ25
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP NEQ_SKIP25
NEQ_NEQ25:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
NEQ_SKIP25:
JSR REALFAC
JSR COMPACT169
JSR FASTFMULMEM
LDA #<CONST_8R
LDY #>CONST_8R
JSR COPY2_XYA_XREG
LDA #<X_REG
LDY #>X_REG
JSR FASTFSUBMEM
JSR FACINT
STY VAR_C%
STA VAR_C%+1
JMP RETURN
LINE_30800:
LINE_30801:
LINE_30810:
JSR GOSUB
JSR LINE_31900
LINE_30820:
LDY VAR_YC%
LDA VAR_YC%+1
JSR INTFAC
JSR FACXREG
JSR FINX
LDY #5
LDA #0
STY A_REG
STA A_REG+1
JSR COPY_XREG2YREG
JSR XREGFAC
JSR SHL
JSR FACXREG
LDY #3
JSR COMPACT90
JSR FASTFADDMEM
JSR PUSHREAL
LDY VAR_XC%
LDA VAR_XC%+1
JSR FIINX
JSR POPREAL2X
JSR FASTFADDARG
JSR FACINT
STY VAR_SS%
STA VAR_SS%+1
LINE_30960:
LDY #1
LDA #0
STY VAR_DC%
STA VAR_DC%+1
LDY #255
LDA #255
STY VAR_HP%
STA VAR_HP%+1
JSR GOSUB
JSR LINE_30150
LINE_30970:
JMP RETURN
LINE_31000:
LINE_31010:
LDA #<VAR_SA
LDY #>VAR_SA
JSR COPY2_XYA_YREG
LDY VAR_SS%
LDA VAR_SS%+1
JSR COMPACT18
JSR FASTFADDMEM
JSR FACWORD
STY MOVBSELF26+1
STA MOVBSELF26+2
LDY VAR_CC%
MOVBSELF26:
STY $FFFF
LINE_31020:
LDY VAR_SS%
LDA VAR_SS%+1
STY TMP3_ZP
STA TMP3_ZP+1
LDY VAR_XD%
LDA VAR_XD%+1
JSR INTADDVAR
JSR FACXREG
LDY VAR_YD%
LDA VAR_YD%+1
JSR INTFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFADDMEM
JSR FACINT
STY VAR_SS%
STA VAR_SS%+1
LDY VAR_SE%
LDA VAR_SE%+1
STY TMP_ZP
STA TMP_ZP+1
LDY VAR_SS%
LDA VAR_SS%+1
JSR ICMP
EQ_EQ26:
EQ_SKIP26:
COMP_SKP32:
BNE LINE_SKIP210
LINE_NSKIP210:
JMP RETURN
LINE_SKIP210:
LINE_31030:
JMP LINE_31010
LINE_31600:
LINE_31610:
JSR COMPACT171
JSR GOSUB
JSR LINE_34500
LDY VAR_DC%
LDA VAR_DC%+1
STY 646
LINE_31620:
LDA #<CONST_39
LDY #>CONST_39
JSR STROUTWL
LINE_31630:
JSR COMPACT28
LDA #<CONST_15R
LDY #>CONST_15R
JSR COMPACT13
LDA #<FORLOOP4
STA JUMP_TARGET
LDA #>FORLOOP4
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP4:
JSR COMPACT30
JSR GOSUB
JSR LINE_34500
LDA #<CONST_40
LDY #>CONST_40
JSR STROUTWL
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_5
JMP (JUMP_TARGET)
RBEQ_5:
LINE_31640:
JSR COMPACT30
LDA #$19
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_CY%
LDA VAR_CY%+1
JSR ICMP
BEQ LT_LT_EQ27
ROL
BCC LT_LT27
LT_LT_EQ27:
LDA #0
JMP LT_SKIP27
LT_LT27:
LDA #$1
LT_SKIP27:
COMP_SKP34:
BEQ LINE_SKIP211
LINE_NSKIP211:
JSR GOSUB
JSR LINE_34500
LDA #<CONST_42
LDY #>CONST_42
JSR STROUTWL
LINE_SKIP211:
LINE_31650:
LDY #$00
LDA #$02
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_CY%
LDA VAR_CY%+1
JSR INTSUB
JSR INTCONV
STY VAR_CY%
STA VAR_CY%+1
JSR GOSUB
JSR LINE_34500
LINE_31660:
LDA #<CONST_43
LDY #>CONST_43
JSR STROUTWL
LINE_31670:
JMP RETURN
LINE_31900:
LINE_31910:
JSR COMPACT171
JSR GOSUB
JSR LINE_34500
LDY #1
STY 646
LINE_31920:
LDA #<CONST_40
LDY #>CONST_40
JSR STROUTWL
LINE_31940:
JSR GOSUB
JSR LINE_31990
LDA #<CONST_43
LDY #>CONST_43
JSR STROUTWL
LINE_31950:
JSR GOSUB
JSR LINE_31990
JSR GOSUB
JSR LINE_34500
LDA #<CONST_40
LDY #>CONST_40
JSR STROUTWL
LINE_31960:
JSR GOSUB
JSR LINE_31990
JSR GOSUB
JSR LINE_34500
LDA #<CONST_42
LDY #>CONST_42
JSR STROUTBRKWL
LINE_31970:
JMP RETURN
LINE_31990:
LINE_31992:
JSR COMPACT30
JSR GOSUB
JSR LINE_34500
JMP RETURN
LINE_32000:
LINE_32010:
LDA #<CONST_44
LDY #>CONST_44
JSR COPY2_XYA_YREG
LDY #252
LDA #0
STY A_REG
STA A_REG+1
JSR PEEKBYTEANDFAST
STY 56576
LINE_32020:
LDY #56
STY 53272
LDY #204
STY 648
LINE_32030:
LDX #4
dcloop849_1:
LDA CONST_48,X
STA VAR_SA,X
LDA CONST_49R,X
STA VAR_CA,X
DEX
BPL dcloop849_1
LDA #147
JSR SINGLECHROUTMAX
LINE_32040:
JMP RETURN
LINE_32100:
LINE_32110:
JSR COMPACT50
LDY #1
STY 646
JSR GOSUB
JSR LINE_34500
LINE_32120:
LDA #<CONST_51
LDY #>CONST_51
JSR STROUTWL
LINE_32140:
JSR GOSUB
JSR LINE_31990
LDA #<CONST_51
LDY #>CONST_51
JSR STROUTWL
LINE_32150:
JSR COMPACT51
LINE_32160:
JSR COMPACT51
LINE_32170:
JMP RETURN
LINE_33000:
LINE_33005:
LDA #<CONST_1R
LDY #>CONST_1R
JSR REALFAC
JSR FACRND
LDX #<VAR_I
LDY #>VAR_I
JSR FACMEM
LDA #<CONST_52
LDY #>CONST_52
JSR STROUTWL
LINE_33010:
LINE_33015:
LINE_33020:
LDY #0
TYA
STY VAR_CM%
STA VAR_CM%+1
STY VAR_S1%
STA VAR_S1%+1
LDY #0
TYA
STY VAR_S2%
STA VAR_S2%+1
STY VAR_AL%
STA VAR_AL%+1
LDY #0
TYA
STY VAR_WN%
STA VAR_WN%+1
LDA #<CONST_5R
LDY #>CONST_5R
JSR REALFAC
JSR FACYREG
JSR FACINT
STY VAR_WW%
STA VAR_WW%+1
LINE_33030:
JSR READMAYBEBYTE
STY VAR_AV%
STA VAR_AV%+1
JSR READMAYBEBYTE
STY VAR_SG%
STA VAR_SG%+1
JSR READMAYBEBYTE
STY VAR_HP%
STA VAR_HP%+1
JSR READMAYBEBYTE
STY VAR_CH%
STA VAR_CH%+1
JSR READMAYBEBYTE
STY VAR_CB%
STA VAR_CB%+1
JSR READMAYBEBYTE
STY VAR_IM%
STA VAR_IM%+1
LINE_33040:
LDA #$ff
LDY #$ff
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_AV%
LDA VAR_AV%+1
JSR ICMP
EQ_EQ28:
EQ_SKIP28:
COMP_SKP35:
BNE LINE_SKIP212
LINE_NSKIP212:
JMP LINE_33100
LINE_SKIP212:
LINE_33050:
LDY VAR_CM%
LDA VAR_CM%+1
JSR INTFAC
JSR FACXREG
LDY VAR_AV%
LDA VAR_AV%+1
STY AS_TMP
STA AS_TMP+1
LDA #<VAR_CV%[]
LDY #>VAR_CV%[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_INT_INTEGER
LDA #<CONST_36R
LDY #>CONST_36R
JSR REALFACPUSH
LDY VAR_CM%
LDA VAR_CM%+1
JSR COMPACT7
LDY VAR_SG%
LDA VAR_SG%+1
JSR COMPACT53
LINE_33060:
LDA #<CONST_16R
LDY #>CONST_16R
JSR REALFACPUSH
LDY VAR_CM%
LDA VAR_CM%+1
JSR COMPACT7
LDY VAR_HP%
LDA VAR_HP%+1
JSR COMPACT53
LDA #<CONST_27R
LDY #>CONST_27R
JSR REALFACPUSH
LDY VAR_CM%
LDA VAR_CM%+1
JSR COMPACT7
LDY VAR_CH%
LDA VAR_CH%+1
JSR COMPACT53
LINE_33070:
LDA #<CONST_28R
LDY #>CONST_28R
JSR REALFACPUSH
LDY VAR_CM%
LDA VAR_CM%+1
JSR COMPACT7
LDY VAR_CB%
LDA VAR_CB%+1
JSR COMPACT53
LDA #<CONST_33R
LDY #>CONST_33R
JSR REALFACPUSH
LDY VAR_CM%
LDA VAR_CM%+1
JSR COMPACT7
LDY VAR_IM%
LDA VAR_IM%+1
JSR COMPACT53
LINE_33080:
LDY VAR_CM%
LDA VAR_CM%+1
JSR SUPERFIINX
STY VAR_CM%
STA VAR_CM%+1
JMP LINE_33030
LINE_33090:
LINE_33100:
LDY #0
TYA
STY VAR_HC%
STA VAR_HC%+1
STY VAR_BC%
STA VAR_BC%+1
LDY #0
TYA
STY VAR_DS%
STA VAR_DS%+1
LINE_33110:
JSR COMPACT28
LDA #<CONST_23R
LDY #>CONST_23R
JSR COMPACT13
LDA #<FORLOOP5
STA JUMP_TARGET
LDA #>FORLOOP5
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP5:
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<CONST_9
LDY #>CONST_9
JSR COPY2_XYA_YREG
LDA #<VAR_CP%[]
LDY #>VAR_CP%[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_INTEGER
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_6
JMP (JUMP_TARGET)
RBEQ_6:
LINE_33130:
LINE_33135:
JSR GOSUB
JSR LINE_33600
LINE_33175:
LINE_33180:
JSR GOSUB
JSR LINE_33250
LINE_33200:
JSR GOSUB
JSR LINE_57000
JSR GOSUB
JSR LINE_33400
JMP RETURN
LINE_33250:
LINE_33260:
JSR COMPACT28
LDA #<CONST_0R
LDY #>CONST_0R
JSR COMPACT13
LDA #<FORLOOP6
STA JUMP_TARGET
LDA #>FORLOOP6
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP6:
JSR COMPACT54
LDA #<VAR_PF%[]
LDY #>VAR_PF%[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_INTEGER
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDY #0
TYA
STY AS_TMP
STA AS_TMP+1
LDA #<VAR_HP%[]
LDY #>VAR_HP%[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_INT_INTEGER
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_7
JMP (JUMP_TARGET)
RBEQ_7:
LINE_33270:
JMP RETURN
LINE_33300:
LINE_33310:
LDY VAR_PN%
LDA VAR_PN%+1
STY VAR_PI%
STA VAR_PI%+1
LINE_33320:
JSR COMPACT28
LDY #2
LDA #0
STY A_REG
STA A_REG+1
LDY VAR_PI%
LDA VAR_PI%+1
JSR INTFAC
JSR SHL
JSR PUSHREAL
LDA #<CONST_2R
LDY #>CONST_2R
JSR COMPACT165
LDA #<FORLOOP7
STA JUMP_TARGET
LDA #>FORLOOP7
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP7:
LINE_33330:
LDY VAR_PI%
LDA VAR_PI%+1
JSR COMPACT126
STY VAR_I2%
STA VAR_I2%+1
LDY VAR_PI%
LDA VAR_PI%+1
JSR COMPACT126
STY VAR_I3%
STA VAR_I3%+1
LINE_33340:
LDA #<VAR_CP%[]
LDY #>VAR_CP%[]
STA G_REG
STY G_REG+1
LDY VAR_I2%
LDA VAR_I2%+1
JSR ARRAYACCESS_INTEGER_INT_SI
STY VAR_I4%
STA VAR_I4%+1
LDA #<VAR_CP%[]
LDY #>VAR_CP%[]
STA G_REG
STY G_REG+1
LDY VAR_I3%
LDA VAR_I3%+1
JSR ARRAYACCESS_INTEGER_INT
JSR COPY_XREG2YREG
LDA #<VAR_CP%[]
LDY #>VAR_CP%[]
STA G_REG
STY G_REG+1
LDY VAR_I2%
LDA VAR_I2%+1
JSR ARRAYSTORE_INTEGER_INT
LDY VAR_I4%
LDA VAR_I4%+1
JSR COMPACT127
LDY VAR_I3%
LDA VAR_I3%+1
JSR ARRAYSTORE_INT_INTEGER_AC
LINE_33350:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_8
JMP (JUMP_TARGET)
RBEQ_8:
JMP RETURN
LINE_33400:
LINE_33410:
LINE_33420:
JSR COMPACT28
LDA #<CONST_15R
LDY #>CONST_15R
JSR COMPACT13
LDA #<FORLOOP8
STA JUMP_TARGET
LDA #>FORLOOP8
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP8:
JSR GOSUB
JSR LINE_57200
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDY VAR_RS%
LDA VAR_RS%+1
STY AS_TMP
STA AS_TMP+1
LDA #<VAR_CP%[]
LDY #>VAR_CP%[]
JSR COMPACT58
JSR NEXT
LDA A_REG
BNE RBEQ_9
JMP (JUMP_TARGET)
RBEQ_9:
LINE_33430:
LDA #<VAR_I
LDY #>VAR_I
JSR REALFAC
JSR FACINT
STY VAR_PN%
STA VAR_PN%+1
STY VAR_PI%
STA VAR_PI%+1
JMP RETURN
LINE_33500:
LINE_33510:
LDY #0
TYA
STY VAR_II%
STA VAR_II%+1
LINE_33520:
JSR READSTR
JSR COMPACT161
JSR COPYSTRING
LDA #<CONST_53
LDY #>CONST_53
JSR COMPACT172
JSR SEQ
LDA X_REG
COMP_SKP40:
BEQ LINE_SKIP213
LINE_NSKIP213:
JMP RETURN
LINE_SKIP213:
LINE_33530:
LDY VAR_II%
LDA VAR_II%+1
JSR INTFAC
JSR PUSHREAL
LDA VAR_A$
LDY VAR_A$+1
STA A_REG
STY A_REG+1
JSR POPREALXREG
LDA #<VAR_MG$[]
LDY #>VAR_MG$[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_STRING
LDY VAR_II%
LDA VAR_II%+1
JSR SUPERFIINX
STY VAR_II%
STA VAR_II%+1
JMP LINE_33520
LINE_33600:
LINE_33605:
JSR COMPACT28
LDA #<CONST_10R
LDY #>CONST_10R
JSR COMPACT13
LDA #<FORLOOP9
STA JUMP_TARGET
LDA #>FORLOOP9
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP9:
JSR COMPACT54
LDA #<VAR_CD%[]
LDY #>VAR_CD%[]
JSR COMPACT55
JSR NEXT
LDA A_REG
BNE RBEQ_10
JMP (JUMP_TARGET)
RBEQ_10:
LINE_33610:
LDY #0
TYA
JSR COMPACT173
LDY #0
LDA #0
JSR ARRAYSTORE_INT_INTEGER_AC
LINE_33620:
LDY #1
LDA #0
JSR COMPACT66
LDY #1
LDA #0
JSR ARRAYSTORE_INT_INTEGER_AC
LINE_33630:
JMP RETURN
LINE_33800:
LINE_33810:
JSR COMPACT28
JSR COMPACT68
JSR COMPACT14
LDA #<FORLOOP10
STA JUMP_TARGET
LDA #>FORLOOP10
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP10:
LINE_33820:
JSR READMAYBEBYTE
STY VAR_A%
STA VAR_A%+1
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDY VAR_A%
LDA VAR_A%+1
STY AS_TMP
STA AS_TMP+1
LDA #<VAR_FC%[]
LDY #>VAR_FC%[]
JSR COMPACT58
JSR NEXT
LDA A_REG
BNE RBEQ_11
JMP (JUMP_TARGET)
RBEQ_11:
LINE_33830:
JMP RETURN
LINE_33850:
LINE_33860:
JSR COMPACT28
JSR COMPACT68
JSR COMPACT14
LDA #<FORLOOP11
STA JUMP_TARGET
LDA #>FORLOOP11
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP11:
LINE_33870:
JSR READMAYBEBYTE
STY VAR_A%
STA VAR_A%+1
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDY VAR_A%
LDA VAR_A%+1
STY AS_TMP
STA AS_TMP+1
LDA #<VAR_SB%[]
LDY #>VAR_SB%[]
JSR COMPACT58
JSR NEXT
LDA A_REG
BNE RBEQ_12
JMP (JUMP_TARGET)
RBEQ_12:
LINE_33880:
JMP RETURN
LINE_34000:
LINE_34010:
LDY #0
TYA
STY VAR_YD%
STA VAR_YD%+1
LDY #1
LDA #0
STY VAR_XD%
STA VAR_XD%+1
LDY #32
LDA #3
STY VAR_SS%
STA VAR_SS%+1
LDY #$00
LDA #$1c
JSR COMPACT33
JSR INTCONV
STY VAR_SE%
STA VAR_SE%+1
LDY #67
LDA #0
STY VAR_CC%
STA VAR_CC%+1
LINE_34020:
JSR GOSUB
JSR LINE_31000
LDA #<VAR_SA
LDY #>VAR_SA
JSR COPY2_XYA_YREG
LDY VAR_SS%
LDA VAR_SS%+1
JSR COMPACT18
JSR FASTFADDMEM
JSR FACWORD
STY MOVBSELF33+1
STA MOVBSELF33+2
LDA #$4B
MOVBSELF33:
STA $FFFF
LDY #$00
LDA #$28
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_SS%
LDA VAR_SS%+1
JSR INTSUB
JSR INTCONV
STY VAR_SS%
STA VAR_SS%+1
LINE_34030:
LDY #216
LDA #255
STY VAR_YD%
STA VAR_YD%+1
LDY #0
TYA
STY VAR_XD%
STA VAR_XD%+1
LDY #244
LDA #255
STY VAR_SE%
STA VAR_SE%+1
LDY #93
LDA #0
STY VAR_CC%
STA VAR_CC%+1
JSR GOSUB
JSR LINE_31000
LINE_34040:
LDY #40
LDA #0
STY VAR_YD%
STA VAR_YD%+1
LDY #99
LDA #3
STY VAR_SS%
STA VAR_SS%+1
LDY #$00
LDA #$a0
JSR COMPACT33
JSR INTCONV
STY VAR_SE%
STA VAR_SE%+1
JSR GOSUB
JSR LINE_31000
LINE_34050:
LDA #<VAR_SA
LDY #>VAR_SA
JSR REALFAC
LDA #<CONST_61
LDY #>CONST_61
JSR FASTFADDMEM
JSR FACWORD
STY MOVBSELF34+1
STA MOVBSELF34+2
LDA #$72
MOVBSELF34:
STA $FFFF
LINE_34070:
LDY #0
TYA
STY VAR_YD%
STA VAR_YD%+1
LDY #1
LDA #0
STY VAR_XD%
STA VAR_XD%+1
LDY #197
LDA #2
STY VAR_SS%
STA VAR_SS%+1
LDY #$00
LDA #$0b
JSR COMPACT33
JSR INTCONV
STY VAR_SE%
STA VAR_SE%+1
LDY #67
LDA #0
STY VAR_CC%
STA VAR_CC%+1
LINE_34080:
JSR GOSUB
JSR LINE_31000
LDA #<VAR_SA
LDY #>VAR_SA
JSR REALFAC
LDA #<CONST_64
LDY #>CONST_64
JSR FASTFADDMEM
JSR FACWORD
STY MOVBSELF35+1
STA MOVBSELF35+2
LDA #$6B
MOVBSELF35:
STA $FFFF
LINE_34090:
JSR GOSUB
JSR LINE_46500
JSR GOSUB
JSR LINE_47600
JMP RETURN
LINE_34500:
LINE_34510:
LDY VAR_CY%
LDA VAR_CY%+1
STY 781
LDY VAR_CX%
LDA VAR_CX%+1
STY 782
LDY #0
STY 783
LDA #<65520
STA TMP_ZP
LDA #>65520
STA TMP_ZP+1
JSR SYSTEMCALL
LINE_34520:
JMP RETURN
LINE_34600:
LINE_34610:
LDY #29
LDA #0
STY VAR_CX%
STA VAR_CX%+1
LDY #1
STY 646
LINE_34620:
LDY VAR_SS%
LDA VAR_SS%+1
STY VAR_CY%
STA VAR_CY%+1
JSR GOSUB
JSR LINE_34500
LINE_34630:
LDA #<CONST_67
LDY #>CONST_67
JSR STROUTWL
LDY VAR_SS%
LDA VAR_SS%+1
JSR SUPERFIINX
STY VAR_SS%
STA VAR_SS%+1
LINE_34640:
LDY VAR_SE%
LDA VAR_SE%+1
STY TMP_ZP
STA TMP_ZP+1
LDY VAR_SS%
LDA VAR_SS%+1
JSR ICMP
ROL
BCS GT_GT29
LDA #0
JMP GT_SKIP29
GT_GT29:
LDA #$1
GT_SKIP29:
COMP_SKP44:
BEQ LINE_SKIP214
LINE_NSKIP214:
JMP RETURN
LINE_SKIP214:
LINE_34650:
JMP LINE_34620
LINE_34700:
LINE_34710:
LDY #0
TYA
STY VAR_SS%
STA VAR_SS%+1
LDY #16
LDA #0
STY VAR_SE%
STA VAR_SE%+1
JSR GOSUB
JSR LINE_34600
JMP RETURN
LINE_34750:
LINE_34760:
LDY #18
LDA #0
STY VAR_SS%
STA VAR_SS%+1
LDY #23
LDA #0
STY VAR_SE%
STA VAR_SE%+1
JSR GOSUB
JSR LINE_34600
LINE_34770:
LDA #<CONST_71R
LDY #>CONST_71R
JSR REALFAC
LDA #<VAR_SA
LDY #>VAR_SA
JSR FASTFADDMEM
JSR FACWORD
STY MOVBSELF40+1
STA MOVBSELF40+2
LDA #$20
MOVBSELF40:
STA $FFFF
LDY #29
LDA #0
STY VAR_CX%
STA VAR_CX%+1
LDY #24
LDA #0
STY VAR_CY%
STA VAR_CY%+1
JSR GOSUB
JSR LINE_34500
LDA #<CONST_73
LDY #>CONST_73
JSR STROUTWL
LINE_34780:
JMP RETURN
LINE_35000:
LINE_35005:
LDY VAR_CI%
LDA VAR_CI%+1
STY VAR_II%
STA VAR_II%+1
LINE_35010:
LDY VAR_DS%
LDA VAR_DS%+1
STY VAR_YC%
STA VAR_YC%+1
LDY #33
LDA #0
STY VAR_XC%
STA VAR_XC%+1
LDY #0
TYA
STY VAR_C%
STA VAR_C%+1
LDY #1
LDA #0
STY VAR_XD%
STA VAR_XD%+1
LDY #0
TYA
STY VAR_YD%
STA VAR_YD%+1
LINE_35015:
LDA #$02
JSR COMPACT174
JSR ICMP
BEQ LT_LT_EQ30
ROL
BCC LT_LT30
LT_LT_EQ30:
LDA #0
JMP LT_SKIP30
LT_LT30:
LDA #$1
LT_SKIP30:
COMP_SKP45:
BEQ LINE_SKIP215
LINE_NSKIP215:
JMP RETURN
LINE_SKIP215:
LINE_35016:
LDY #0
TYA
STY VAR_SF%
STA VAR_SF%+1
LDY VAR_II%
LDA VAR_II%+1
JSR FIDEX
JSR COPY_XREG2YREG
LDY VAR_CS%
LDA VAR_CS%+1
JSR COMPACT18
JSR CMPFAC
EQ_EQ31:
EQ_SKIP31:
COMP_SKP46:
BNE LINE_SKIP216
LINE_NSKIP216:
LDY VAR_II%
LDA VAR_II%+1
JSR SUPERFIDEX
STY VAR_II%
STA VAR_II%+1
LDY #1
LDA #0
STY VAR_SF%
STA VAR_SF%+1
LINE_SKIP216:
LINE_35020:
JSR COMPACT50
JSR COMPACT28
LDY VAR_II%
LDA VAR_II%+1
JSR FIDEX
LDA #<X_REG
LDY #>X_REG
JSR COMPACT13
LDA #<FORLOOP12
STA JUMP_TARGET
LDA #>FORLOOP12
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP12:
LINE_35030:
JSR GOSUB
JSR LINE_34500
LDY #15
STY 646
LINE_35040:
LDA #<CONST_39
LDY #>CONST_39
JSR STROUTWL
LINE_35050:
JSR COMPACT30
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_13
JMP (JUMP_TARGET)
RBEQ_13:
LINE_35060:
LDA #$09
JSR COMPACT71
ROL
BCS GT_GT32
LDA #0
JMP GT_SKIP32
GT_GT32:
LDA #$1
GT_SKIP32:
COMP_SKP48:
BEQ LINE_SKIP217
LINE_NSKIP217:
JMP LINE_35110
LINE_SKIP217:
LINE_35070:
LDY VAR_II%
LDA VAR_II%+1
JSR INTFAC
LDX #<VAR_I
LDY #>VAR_I
JSR FACMEM
LDA #<CONST_10R
LDY #>CONST_10R
JSR COMPACT13
LDA #<FORLOOP13
STA JUMP_TARGET
LDA #>FORLOOP13
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP13:
JSR GOSUB
JSR LINE_34500
LINE_35080:
LDA #<CONST_51
LDY #>CONST_51
JSR STROUTWL
JSR COMPACT30
LINE_35090:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_14
JMP (JUMP_TARGET)
RBEQ_14:
LINE_35110:
LDY VAR_DS%
LDA VAR_DS%+1
STY TMP3_ZP
STA TMP3_ZP+1
LDY VAR_II%
LDA VAR_II%+1
JSR INTADDVAR
JSR FACXREG
JSR ONETOFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFSUBMEM
JSR FACINT
STY VAR_YC%
STA VAR_YC%+1
LDY VAR_II%
LDA VAR_II%+1
JSR FIDEX
LDA #<VAR_CD%[]
LDY #>VAR_CD%[]
JSR ARRAYACCESS_INTEGER_SI
STY VAR_CN%
STA VAR_CN%+1
LDY #15
LDA #0
STY VAR_DC%
STA VAR_DC%+1
JSR GOSUB
JSR LINE_30010
LINE_35120:
LDA #$01
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_SF%
LDA VAR_SF%+1
JSR ICMP
BEQ EQ_EQ33
LDA #0
JMP EQ_SKIP33
EQ_EQ33:
LDA #$1
EQ_SKIP33:
COMP_SKP50:
BNE LINE_NSKIP218
JMP LINE_SKIP218
LINE_NSKIP218:
LDY #36
LDA #0
STY VAR_CX%
STA VAR_CX%+1
JSR COMPACT175
JSR INTADDVAR
JSR COMPACT44
JSR FASTFADDMEM
JSR FACINT
STY VAR_CY%
STA VAR_CY%+1
JSR GOSUB
JSR LINE_34500
LDA #<CONST_76
LDY #>CONST_76
JSR STROUTWL
LINE_SKIP218:
LINE_35130:
JMP RETURN
LINE_35500:
LINE_35510:
JSR GOSUB
JSR LINE_34750
LDA #$0a
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_CI%
LDA VAR_CI%+1
JSR ICMP
EQ_EQ34:
EQ_SKIP34:
COMP_SKP51:
BNE LINE_SKIP219
LINE_NSKIP219:
LDY #1
LDA #0
STY VAR_MD%
STA VAR_MD%+1
LINE_SKIP219:
LINE_35515:
LDA #$00
JSR COMPACT4
ROL
BCS GT_GT35
LDA #0
JMP GT_SKIP35
GT_GT35:
LDA #$1
GT_SKIP35:
COMP_SKP52:
BEQ LINE_SKIP220
LINE_NSKIP220:
JMP RETURN
LINE_SKIP220:
LINE_35520:
LDY #0
TYA
STY VAR_CN%
STA VAR_CN%+1
LDY #29
LDA #0
STY VAR_XC%
STA VAR_XC%+1
LDY #18
LDA #0
STY VAR_YC%
STA VAR_YC%+1
JSR GOSUB
JSR LINE_30000
LINE_35530:
JSR GOSUB
JSR LINE_35900
LINE_35540:
JSR GOSUB
JSR LINE_35800
JSR GOSUB
JSR LINE_35700
LINE_35570:
JMP RETURN
LINE_35600:
LINE_35610:
LDA #$02
JSR COMPACT4
ROL
BCS GT_GT36
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP GT_SKIP36
GT_GT36:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
GT_SKIP36:
JSR REALFACPUSH
LDA #$01
JSR COMPACT4
BEQ LT_LT_EQ37
ROL
BCC LT_LT37
LT_LT_EQ37:
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP LT_SKIP37
LT_LT37:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
LT_SKIP37:
JSR COMPACT26
COMP_SKP53:
BEQ LINE_SKIP221
LINE_NSKIP221:
JMP RETURN
LINE_SKIP221:
LINE_35620:
JSR GOSUB
JSR LINE_35850
LDY #12
LDA #0
STY VAR_CY%
STA VAR_CY%+1
LDY #0
TYA
STY VAR_I2%
STA VAR_I2%+1
LINE_35630:
LDY #$00
LDA #$08
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_I2%
LDA VAR_I2%+1
JSR INTADD
JSR FACXREG
LDA #<VAR_PF%[]
LDY #>VAR_PF%[]
JSR ARRAYACCESS_INTEGER_SI
STY VAR_II%
STA VAR_II%+1
LDA #$ff
LDY #$ff
JSR COMPACT72
EQ_EQ38:
EQ_SKIP38:
COMP_SKP54:
BNE LINE_SKIP222
LINE_NSKIP222:
JMP LINE_35650
LINE_SKIP222:
LINE_35640:
LDY VAR_I2%
LDA VAR_I2%+1
JSR INTFAC
LDA #<CONST_20R
LDY #>CONST_20R
JSR COPY2_XYA_XREG
LDA #<X_REG
LDY #>X_REG
JSR FASTFMULMEM
JSR FACXREG
JSR ONETOFAC
JSR COMPACT97
JSR LINE_34500
JSR COMPACTMAX
LDA #<CONST_2R
LDY #>CONST_2R
JSR REALFACPUSH
LDY VAR_I2%
LDA VAR_I2%+1
JSR FIINX
JSR COPY_XREG2YREG
JSR COMPACT163
JSR POPREAL
LDX #<C_REG
LDY #>C_REG
JSR FACMEM
JSR RIGHT
JSR STROUTBRK
LINE_35650:
LDY VAR_I2%
LDA VAR_I2%+1
JSR SUPERFIINX
STY VAR_I2%
STA VAR_I2%+1
LDA #$04
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_I2%
LDA VAR_I2%+1
JSR ICMP
EQ_EQ39:
EQ_SKIP39:
COMP_SKP55:
BNE LINE_SKIP223
LINE_NSKIP223:
JMP RETURN
LINE_SKIP223:
LINE_35660:
JMP LINE_35630
LINE_35670:
LINE_35675:
LDY #1
STY 646
LINE_35680:
LDY #12
LDA #0
STY VAR_CY%
STA VAR_CY%+1
JSR COMPACT28
LDA #<CONST_13R
LDY #>CONST_13R
JSR COMPACT13
LDA #<FORLOOP14
STA JUMP_TARGET
LDA #>FORLOOP14
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP14:
LDA #<VAR_I
LDY #>VAR_I
JSR REALFAC
LDA #<CONST_5R
LDY #>CONST_5R
JSR FASTFADDMEM
JSR FACXREG
LDA #<VAR_PF%[]
LDY #>VAR_PF%[]
JSR ARRAYACCESS_INTEGER_SNX
LDA #<CONST_9
LDY #>CONST_9
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
JSR CMPFAC
BNE NEQ_NEQ40
LDA #0
JMP NEQ_SKIP40
NEQ_NEQ40:
LDA #$1
NEQ_SKIP40:
COMP_SKP56:
BNE LINE_NSKIP224
JMP LINE_SKIP224
LINE_NSKIP224:
LDA #<VAR_I
LDY #>VAR_I
JSR REALFAC
LDA #<CONST_20R
LDY #>CONST_20R
JSR FASTFMULMEM
JSR FACXREG
JSR ONETOFAC
JSR COMPACT97
JSR LINE_34500
LDA #<CONST_79
LDY #>CONST_79
JSR STROUTBRKWL
LINE_SKIP224:
LINE_35685:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_15
JMP (JUMP_TARGET)
RBEQ_15:
JMP RETURN
LINE_35700:
LINE_35702:
LDA #$00
JSR COMPACT4
ROL
BCS GT_GT41
LDA #0
JMP GT_SKIP41
GT_GT41:
LDA #$1
GT_SKIP41:
COMP_SKP58:
BEQ LINE_SKIP225
LINE_NSKIP225:
JMP RETURN
LINE_SKIP225:
LINE_35705:
JSR GOSUB
JSR LINE_35850
LINE_35710:
LDY #30
LDA #0
STY VAR_CX%
STA VAR_CX%+1
LDY #18
JSR COMPACT70
LDA #49
JSR SINGLECHROUTBRKMAX
LINE_35720:
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_PI%
LDA VAR_PI%+1
JSR ICMP
EQ_EQ42:
EQ_SKIP42:
COMP_SKP59:
BNE LINE_SKIP226
LINE_NSKIP226:
JMP LINE_35740
LINE_SKIP226:
LINE_35730:
LDY #37
LDA #0
STY VAR_CX%
STA VAR_CX%+1
JSR GOSUB
JSR LINE_34500
LDA #50
JSR SINGLECHROUTBRKMAX
LINE_35740:
JMP RETURN
LINE_35800:
LINE_35810:
LDY #0
TYA
STY VAR_LT%
STA VAR_LT%+1
JSR COMPACT17
dcloop1473_1:
LDA VAR_TI,X
STA VAR_LT,X
DEX
BPL dcloop1473_1
JMP RETURN
LINE_35850:
LINE_35860:
LDA #<VAR_FC%[]
LDY #>VAR_FC%[]
STA G_REG
STY G_REG+1
LDY VAR_LT%
LDA VAR_LT%+1
JSR ARRAYACCESS_INTEGER_INT
JSR XREGFAC
JSR FACWORD
STY 646
LDA #<VAR_LT
LDY #>VAR_LT
JSR COPY2_XYA_YREG
JSR COMPACT16
LDA #<VAR_TI
LDY #>VAR_TI
JSR COMPACT21
LDA #<CONST_83R
LDY #>CONST_83R
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
JSR CMPFAC
ROL
BCS GT_GT43
LDA #0
JMP GT_SKIP43
GT_GT43:
LDA #$1
GT_SKIP43:
COMP_SKP60:
BNE LINE_NSKIP227
JMP LINE_SKIP227
LINE_NSKIP227:
LDY VAR_LT%
LDA VAR_LT%+1
JSR SUPERFIINX
STY VAR_LT%
STA VAR_LT%+1
JSR COMPACT17
dcloop1473_2:
LDA VAR_TI,X
STA VAR_LT,X
DEX
BPL dcloop1473_2
LDA #$05
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_LT%
LDA VAR_LT%+1
JSR ICMP
ROL
BCS GT_GT44
LDA #0
JMP GT_SKIP44
GT_GT44:
LDA #$1
GT_SKIP44:
COMP_SKP61:
BEQ LINE_SKIP228
LINE_NSKIP228:
LDA #<CONST_1R
LDY #>CONST_1R
JSR COPY2_XYA_YREG
JSR YREGFAC
JSR FACINT
STY VAR_LT%
STA VAR_LT%+1
LINE_SKIP228:
LINE_SKIP227:
LINE_35870:
JMP RETURN
LINE_35900:
LINE_35905:
JSR COMPACT77
EQ_EQ45:
EQ_SKIP45:
COMP_SKP62:
BNE LINE_SKIP229
LINE_NSKIP229:
JMP RETURN
LINE_SKIP229:
LINE_35910:
LDY #36
LDA #0
STY VAR_CX%
STA VAR_CX%+1
LDY #18
JSR COMPACT70
LINE_35920:
LDA #<CONST_84
LDY #>CONST_84
JSR STROUTWL
LINE_35930:
LDX #4
dcloop1473_3:
LDA CONST_21R,X
STA VAR_I,X
DEX
BPL dcloop1473_3
LDA #<CONST_70R
LDY #>CONST_70R
JSR COMPACT13
LDA #<FORLOOP15
STA JUMP_TARGET
LDA #>FORLOOP15
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP15:
LDA #<VAR_I
LDY #>VAR_I
JSR REALFAC
JSR COMPACT74
LDA #<CONST_85
LDY #>CONST_85
JSR STROUTWL
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_16
JMP (JUMP_TARGET)
RBEQ_16:
LINE_35940:
LDY #24
LDA #0
STY VAR_CY%
STA VAR_CY%+1
JSR GOSUB
JSR LINE_34500
LDA #<CONST_86
LDY #>CONST_86
JSR STROUTWL
LDA #<CONST_71R
LDY #>CONST_71R
JSR REALFAC
LDA #<VAR_SA
LDY #>VAR_SA
JSR FASTFADDMEM
JSR PUSHREAL
LDA #<CONST_87R
LDY #>CONST_87R
JSR REALFAC
LDA #<VAR_SA
LDY #>VAR_SA
JSR FASTFADDMEM
JSR FACWORD
STY MOVBSELF44+1
STA MOVBSELF44+2
JSR POPREAL
JSR FACWORD
STY MOVBSELF45+1
STA MOVBSELF45+2
MOVBSELF44:
LDY $FFFF
MOVBSELF45:
STY $FFFF
LINE_35950:
LDY VAR_PI%
LDA VAR_PI%+1
STY VAR_II%
STA VAR_II%+1
LDA #$63
JSR COMPACT71
ROL
BCS GT_GT46
LDA #0
JMP GT_SKIP46
GT_GT46:
LDA #$1
GT_SKIP46:
COMP_SKP64:
BEQ LINE_SKIP230
LINE_NSKIP230:
LDY #99
LDA #0
STY VAR_II%
STA VAR_II%+1
LINE_SKIP230:
LINE_35960:
LDY #37
JSR COMPACT69
LDY #3
STY 646
JSR COMPACTMAX
LDA #<CONST_8R
LDY #>CONST_8R
JSR REALFACPUSH
LDA #<CONST_89
LDY #>CONST_89
JSR COPY2_XYA_CREG
TXA
LDY #>C_REG
JSR REALFACPUSH
LDY VAR_II%
LDA VAR_II%+1
JSR INTFAC
JSR FACYREG
JSR COMPACT2
JSR COMPACT143
JSR STROUT
LDY #1
STY 646
LINE_35970:
JMP RETURN
LINE_36000:
LINE_36020:
JSR GETADOLLAR
JSR GOSUB
JSR LINE_22000
LDA #<CONST_90
LDY #>CONST_90
JSR COMPACT64
COMP_SKP65:
BEQ LINE_SKIP231
LINE_NSKIP231:
JMP LINE_36040
LINE_SKIP231:
LINE_36022:
LDA #<CONST_91
LDY #>CONST_91
JSR COMPACT64
COMP_SKP66:
BEQ LINE_SKIP232
LINE_NSKIP232:
JSR GOSUB
JSR LINE_54000
JMP RETURN
LINE_SKIP232:
LINE_36025:
LDA VAR_A$
LDY VAR_A$+1
STA B_REG
STY B_REG+1
JSR ASC
LDA #0
LDY TMP2_ZP
STY VAR_KY%
STA VAR_KY%+1
LINE_36030:
LDA #$0d
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_KY%
LDA VAR_KY%+1
JSR ICMP
EQ_EQ47:
EQ_SKIP47:
COMP_SKP67:
BNE LINE_SKIP233
LINE_NSKIP233:
LDA #<CONST_92
LDY #>CONST_92
JSR COMPACT61
LINE_SKIP233:
LINE_36031:
LDA #$9d
JSR COMPACT82
EQ_EQ48:
EQ_SKIP48:
COMP_SKP68:
BNE LINE_SKIP234
LINE_NSKIP234:
LDA #<CONST_94
LDY #>CONST_94
JSR COMPACT61
LINE_SKIP234:
LINE_36032:
LDA #$1d
JSR COMPACT82
EQ_EQ49:
EQ_SKIP49:
COMP_SKP69:
BNE LINE_SKIP235
LINE_NSKIP235:
LDA #<CONST_95
LDY #>CONST_95
JSR COMPACT61
LINE_SKIP235:
LINE_36033:
LDA #$91
JSR COMPACT82
EQ_EQ50:
EQ_SKIP50:
COMP_SKP70:
BNE LINE_SKIP236
LINE_NSKIP236:
LDA #<CONST_97
LDY #>CONST_97
JSR COMPACT61
LINE_SKIP236:
LINE_36034:
LDA #$11
JSR COMPACT82
EQ_EQ51:
EQ_SKIP51:
COMP_SKP71:
BNE LINE_SKIP237
LINE_NSKIP237:
LDA #<CONST_99
LDY #>CONST_99
JSR COMPACT61
LINE_SKIP237:
LINE_36040:
JMP RETURN
LINE_36080:
LINE_36090:
LDY #0
STY 198
JMP RETURN
LINE_36100:
LINE_36110:
JSR GOSUB
JSR LINE_38000
LDY #255
LDA #255
STY VAR_CS%
STA VAR_CS%+1
LINE_36130:
LDY #0
TYA
STY VAR_CS%
STA VAR_CS%+1
JMP LINE_36200
LINE_36140:
JSR GOSUB
JSR LINE_36080
LDY VAR_CS%
LDA VAR_CS%+1
STY VAR_SO%
STA VAR_SO%+1
LDA #$02
JSR COMPACT4
BEQ GTEQ_GTEQ52
BCS GTEQ_GTEQ52
LDA #0
JMP GTEQ_SKIP52
GTEQ_GTEQ52:
LDA #$1
GTEQ_SKIP52:
COMP_SKP72:
BEQ LINE_SKIP238
LINE_NSKIP238:
JMP RETURN
LINE_SKIP238:
LINE_36145:
JSR GOSUB
JSR LINE_36000
JSR GOSUB
JSR LINE_35600
JSR GOSUB
JSR LINE_35700
LDA #<CONST_90
LDY #>CONST_90
JSR COMPACT64
COMP_SKP73:
BEQ LINE_SKIP239
LINE_NSKIP239:
JMP LINE_36145
LINE_SKIP239:
LINE_36150:
JSR GOSUB
JSR LINE_45000
JSR GOSUB
JSR LINE_38500
LINE_36170:
LDY VAR_CI%
LDA VAR_CI%+1
STY TMP_ZP
STA TMP_ZP+1
LDY VAR_CS%
LDA VAR_CS%+1
JSR ICMP
EQ_EQ53:
EQ_SKIP53:
COMP_SKP74:
BNE LINE_SKIP240
LINE_NSKIP240:
LDY #0
TYA
STY VAR_CS%
STA VAR_CS%+1
LINE_SKIP240:
LINE_36180:
LDA #$ff
LDY #$ff
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_CS%
LDA VAR_CS%+1
JSR ICMP
EQ_EQ54:
EQ_SKIP54:
COMP_SKP75:
BNE LINE_SKIP241
LINE_NSKIP241:
LDY VAR_CI%
LDA VAR_CI%+1
JSR SUPERFIDEX
STY VAR_CS%
STA VAR_CS%+1
LINE_SKIP241:
LINE_36185:
LDA #$00
JSR COMPACT75
ROL
BCS GT_GT55
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP GT_SKIP55
GT_GT55:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
GT_SKIP55:
JSR REALFACPUSH
LDY VAR_CS%
LDA VAR_CS%+1
STY TMP_ZP
STA TMP_ZP+1
LDY VAR_SO%
LDA VAR_SO%+1
JSR ICMP
BEQ EQ_EQ56
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP EQ_SKIP56
EQ_EQ56:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
EQ_SKIP56:
JSR REALFAC
JSR FACXREG
JSR POPREAL2X
JSR FASTAND
JSR FACXREG
LDA X_REG
COMP_SKP76:
BEQ LINE_SKIP242
LINE_NSKIP242:
JMP LINE_36230
LINE_SKIP242:
LINE_36190:
LDY VAR_SO%
LDA VAR_SO%+1
STY VAR_TC%
STA VAR_TC%+1
JSR GOSUB
JSR LINE_37000
LINE_36200:
LDA #$00
JSR COMPACT75
EQ_EQ57:
EQ_SKIP57:
COMP_SKP77:
BNE LINE_SKIP243
LINE_NSKIP243:
JMP LINE_36230
LINE_SKIP243:
LINE_36210:
LDY #29
LDA #0
STY VAR_XC%
STA VAR_XC%+1
JSR COMPACT73
JSR FACINT
STY VAR_YC%
STA VAR_YC%+1
LDA #<VAR_CD%[]
LDY #>VAR_CD%[]
STA G_REG
STY G_REG+1
LDY VAR_CS%
LDA VAR_CS%+1
JSR ARRAYACCESS_INTEGER_INT_SI
STY VAR_CN%
STA VAR_CN%+1
JSR GOSUB
JSR LINE_30000
LINE_36215:
LDY VAR_CI%
LDA VAR_CI%+1
JSR FIDEX
JSR COPY_XREG2YREG
LDY VAR_CS%
LDA VAR_CS%+1
JSR COMPACT18
JSR CMPFAC
EQ_EQ58:
EQ_SKIP58:
COMP_SKP78:
BNE LINE_SKIP244
LINE_NSKIP244:
JMP LINE_36230
LINE_SKIP244:
LINE_36220:
JSR GOSUB
JSR LINE_36500
LINE_36230:
JMP LINE_36140
LINE_36500:
LINE_36520:
LDY #36
LDA #0
STY VAR_CX%
STA VAR_CX%+1
JSR COMPACT175
JSR INTADDVAR
JSR COMPACT74
LDA #<CONST_100
LDY #>CONST_100
JSR STROUTWL
LDY #32
LDA #0
STY VAR_CC%
STA VAR_CC%+1
LINE_36525:
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_CS%
LDA VAR_CS%+1
JSR ICMP
ROL
BCS GT_GT59
LDA #0
JMP GT_SKIP59
GT_GT59:
LDA #$1
GT_SKIP59:
COMP_SKP79:
BEQ LINE_SKIP245
LINE_NSKIP245:
LDY #93
LDA #0
STY VAR_CC%
STA VAR_CC%+1
LINE_SKIP245:
LINE_36526:
LDY VAR_CY%
LDA VAR_CY%+1
JSR INTFAC
JSR FACYREG
LDY #5
JSR COMPACT31
JSR COMPACT48
JSR FACINT
STY VAR_CY%
STA VAR_CY%+1
JSR INTFAC
LDA #<CONST_101R
LDY #>CONST_101R
JSR COPY2_XYA_XREG
LDA #<X_REG
LDY #>X_REG
JSR FASTFADDMEM
JSR COMPACT34
JSR FACWORD
STY MOVBSELF49+1
STA MOVBSELF49+2
LDY VAR_CC%
MOVBSELF49:
STY $FFFF
JMP RETURN
LINE_37000:
LINE_37005:
LDY #29
LDA #0
STY VAR_CX%
STA VAR_CX%+1
LINE_37010:
LDY VAR_DS%
LDA VAR_DS%+1
STY TMP3_ZP
STA TMP3_ZP+1
LDY VAR_TC%
LDA VAR_TC%+1
JSR INTADDVAR
JSR FACINT
STY VAR_CY%
STA VAR_CY%+1
LDY #1
STY 646
LDY #0
TYA
STY VAR_II%
STA VAR_II%+1
LINE_37020:
JSR COMPACT29
LINE_37030:
LDA #<CONST_51
LDY #>CONST_51
JSR STROUTWL
LINE_37040:
JSR COMPACT65
JSR GOSUB
JSR LINE_22000
LDA #$08
JSR COMPACT71
BEQ LT_LT_EQ60
ROL
BCC LT_LT60
LT_LT_EQ60:
LDA #0
JMP LT_SKIP60
LT_LT60:
LDA #$1
LT_SKIP60:
COMP_SKP80:
BEQ LINE_SKIP246
LINE_NSKIP246:
JMP LINE_37020
LINE_SKIP246:
LINE_37050:
JSR GOSUB
JSR LINE_35000
JMP RETURN
LINE_38000:
LINE_38010:
LDY #0
TYA
STY VAR_CI%
STA VAR_CI%+1
JSR COMPACT28
LDA #<CONST_10R
LDY #>CONST_10R
JSR COMPACT13
LDA #<FORLOOP16
STA JUMP_TARGET
LDA #>FORLOOP16
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP16:
LDA #<VAR_I
LDY #>VAR_I
JSR REALFAC
JSR FACINT
STY VAR_II%
STA VAR_II%+1
LINE_38020:
LDA #<VAR_CD%[]
LDY #>VAR_CD%[]
STA G_REG
STY G_REG+1
LDY VAR_II%
LDA VAR_II%+1
JSR COMPACT0
EQ_EQ61:
EQ_SKIP61:
COMP_SKP81:
BNE LINE_SKIP247
LINE_NSKIP247:
JMP LINE_38040
LINE_SKIP247:
LINE_38025:
LDY VAR_CI%
LDA VAR_CI%+1
JSR INTFAC
JSR PUSHREAL
LDA #<VAR_CD%[]
LDY #>VAR_CD%[]
STA G_REG
STY G_REG+1
LDY VAR_II%
LDA VAR_II%+1
JSR ARRAYACCESS_INTEGER_INT
JSR COPY_XREG2YREG
JSR POPREALXREG
LDA #<VAR_CT%[]
LDY #>VAR_CT%[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_INTEGER_NX
LINE_38030:
LDY VAR_II%
LDA VAR_II%+1
JSR COMPACT91
LDY VAR_CI%
LDA VAR_CI%+1
JSR SUPERFIINX
STY VAR_CI%
STA VAR_CI%+1
LINE_38040:
JSR GOSUB
JSR LINE_22000
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_17
JMP (JUMP_TARGET)
RBEQ_17:
LINE_38050:
JSR COMPACT28
LDA #<CONST_10R
LDY #>CONST_10R
JSR COMPACT13
LDA #<FORLOOP17
STA JUMP_TARGET
LDA #>FORLOOP17
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP17:
JSR COMPACT84
LINE_38060:
LDY VAR_CI%
LDA VAR_CI%+1
JSR INTFAC
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<X_REG
LDY #>X_REG
JSR CMPFAC
BEQ GTEQ_GTEQ62
BCS GTEQ_GTEQ62
LDA #0
JMP GTEQ_SKIP62
GTEQ_GTEQ62:
LDA #$1
GTEQ_SKIP62:
COMP_SKP83:
BNE LINE_NSKIP248
JMP LINE_SKIP248
LINE_NSKIP248:
LDY VAR_II%
LDA VAR_II%+1
JSR COMPACT91
JMP LINE_38080
LINE_SKIP248:
LINE_38070:
LDY VAR_II%
LDA VAR_II%+1
JSR INTFAC
JSR PUSHREAL
LDA #<VAR_CT%[]
LDY #>VAR_CT%[]
JSR COMPACT85
LDA #<VAR_CD%[]
LDY #>VAR_CD%[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_INTEGER_NX
LINE_38080:
JSR GOSUB
JSR LINE_22000
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_18
JMP (JUMP_TARGET)
RBEQ_18:
JMP RETURN
LINE_38500:
LINE_38510:
LDA #$00
JSR COMPACT75
EQ_EQ63:
EQ_SKIP63:
COMP_SKP85:
BNE LINE_SKIP249
LINE_NSKIP249:
JMP LINE_38535
LINE_SKIP249:
LINE_38520:
LDA #<CONST_99
LDY #>CONST_99
JSR COMPACT64
COMP_SKP86:
BEQ LINE_SKIP250
LINE_NSKIP250:
JSR GOSUB
JSR LINE_50900
LDY VAR_CS%
LDA VAR_CS%+1
JSR SUPERFIINX
STY VAR_CS%
STA VAR_CS%+1
LINE_SKIP250:
LINE_38530:
LDA #<CONST_97
LDY #>CONST_97
JSR COMPACT64
COMP_SKP87:
BEQ LINE_SKIP251
LINE_NSKIP251:
JSR GOSUB
JSR LINE_50900
LDY VAR_CS%
LDA VAR_CS%+1
JSR SUPERFIDEX
STY VAR_CS%
STA VAR_CS%+1
LINE_SKIP251:
LINE_38535:
LDA #$01
JSR COMPACT4
BEQ EQ_EQ64
LDA #0
JMP EQ_SKIP64
EQ_EQ64:
LDA #$1
EQ_SKIP64:
COMP_SKP88:
BNE LINE_NSKIP252
JMP LINE_SKIP252
LINE_NSKIP252:
LDA #<CONST_102
LDY #>CONST_102
JSR COMPACT63
JSR COMPACT87
JSR COMPACT63
JSR POPREAL2X
JSR FASTOR
JSR FACXREG
LDA X_REG
COMP_SKP89:
BEQ LINE_SKIP253
LINE_NSKIP253:
JSR GOSUB
JSR LINE_35670
JSR GOSUB
JSR LINE_47010
LDY #3
LDA #0
STY VAR_MD%
STA VAR_MD%+1
JMP RETURN
LINE_SKIP253:
LINE_SKIP252:
LINE_38540:
LDA #$00
JSR COMPACT4
EQ_EQ65:
EQ_SKIP65:
COMP_SKP90:
BNE LINE_SKIP254
LINE_NSKIP254:
JSR GOSUB
JSR LINE_39000
JMP RETURN
LINE_SKIP254:
LINE_38550:
LDA #$01
JSR COMPACT4
EQ_EQ66:
EQ_SKIP66:
COMP_SKP91:
BNE LINE_SKIP255
LINE_NSKIP255:
JSR GOSUB
JSR LINE_39500
JMP RETURN
LINE_SKIP255:
LINE_38560:
JMP RETURN
LINE_39000:
LINE_39010:
LDA #<CONST_102
LDY #>CONST_102
JSR COMPACT63
JSR COMPACT87
JSR COMPACT63
LDA #<X_REG
LDY #>X_REG
JSR REALFACPUSH
LDA #<CONST_94
LDY #>CONST_94
JSR COMPACT63
LDA #<X_REG
LDY #>X_REG
JSR REALFACPUSH
LDA #<CONST_92
LDY #>CONST_92
JSR COMPACT63
JSR POPREAL2X
JSR FASTOR
JSR FACXREG
JSR POPREAL2X
JSR FASTOR
JSR FACXREG
JSR POPREAL2X
JSR FASTOR
JSR FACXREG
LDA X_REG
COMP_SKP92:
BEQ LINE_SKIP256
LINE_NSKIP256:
LDY #0
TYA
STY VAR_MG%
STA VAR_MG%+1
JSR GOSUB
JSR LINE_40000
LINE_SKIP256:
LINE_39020:
LDA #<CONST_104
LDY #>CONST_104
JSR COMPACT64
COMP_SKP93:
BEQ LINE_SKIP257
LINE_NSKIP257:
JSR GOSUB
JSR LINE_40500
JSR GOSUB
JSR LINE_39100
LINE_SKIP257:
LINE_39030:
LDA #<CONST_105
LDY #>CONST_105
JSR COMPACT64
COMP_SKP94:
BEQ LINE_SKIP258
LINE_NSKIP258:
JSR GOSUB
JSR LINE_41000
JSR GOSUB
JSR LINE_39100
LINE_SKIP258:
LINE_39035:
LINE_39040:
JMP RETURN
LINE_39100:
LINE_39110:
JSR GOSUB
JSR LINE_40700
JSR GOSUB
JSR LINE_50900
JSR GOSUB
JSR LINE_57280
LDY #1
LDA #0
STY VAR_MD%
STA VAR_MD%+1
JMP RETURN
LINE_39500:
LINE_39510:
LDA #<CONST_94
LDY #>CONST_94
JSR COMPACT63
JSR COMPACT89
JSR COMPACT63
JSR POPREAL2X
JSR FASTOR
JSR FACXREG
LDA X_REG
COMP_SKP95:
BEQ LINE_SKIP259
LINE_NSKIP259:
JSR GOSUB
JSR LINE_44000
LINE_SKIP259:
LINE_39520:
JMP RETURN
LINE_40000:
LINE_40010:
LDY #1
LDA #0
STY VAR_WT%
STA VAR_WT%+1
JSR GOSUB
JSR LINE_40100
JMP RETURN
LINE_40100:
LINE_40110:
LDA #<1024
STA TMP_ZP
LDA #>1024
STA TMP_ZP+1
JSR SYSTEMCALL
LINE_40120:
LDY #10
STY 646
LDA #<VAR_MG$[]
LDY #>VAR_MG$[]
STA G_REG
STY G_REG+1
LDY VAR_MG%
LDA VAR_MG%+1
JSR ARRAYACCESS_STRING_INT
JSR COMPACT161
JSR COPYSTRING
LINE_40130:
LDY #0
TYA
STY VAR_CY%
STA VAR_CY%+1
STY VAR_CX%
STA VAR_CX%+1
JSR GOSUB
JSR LINE_34500
LDA #<CONST_106
LDY #>CONST_106
JSR STROUTWL
LINE_40160:
LDA VAR_A$
LDY VAR_A$+1
STA B_REG
STY B_REG+1
JSR LEN
LDY #1
STY A_REG
JSR XREGFAC
JSR SHR
LDA #<CONST_83R
LDY #>CONST_83R
JSR COMPACT47
STY VAR_CX%
STA VAR_CX%+1
JSR GOSUB
JSR LINE_34500
LINE_40170:
LDA VAR_A$
LDY VAR_A$+1
JSR STROUTBRKWL
JSR GOSUB
JSR LINE_40300
LINE_40180:
LDA #<1027
STA TMP_ZP
LDA #>1027
STA TMP_ZP+1
JSR SYSTEMCALL
LINE_40190:
JMP RETURN
LINE_40300:
LINE_40310:
JSR GOSUB
JSR LINE_36080
JSR COMPACT17
dcloop1941_1:
LDA VAR_TI,X
STA VAR_TS,X
DEX
BPL dcloop1941_1
JSR GOSUB
JSR LINE_50000
LINE_40315:
LDY VAR_WT%
LDA VAR_WT%+1
JSR INTFAC
JSR FACYREG
LDY #6
JSR COMPACT31
JSR FACXREG
LDY #2
JSR COMPACT98
LDA #<X_REG
LDY #>X_REG
JSR FASTFSUBMEM
JSR FACINT
STY VAR_WT%
STA VAR_WT%+1
LINE_40320:
LDA #<VAR_TS
LDY #>VAR_TS
JSR COPY2_XYA_YREG
JSR COMPACT16
LDA #<VAR_TI
LDY #>VAR_TI
JSR COMPACT21
LDY VAR_WT%
LDA VAR_WT%+1
JSR INTFAC
LDA #<X_REG
LDY #>X_REG
JSR CMPFAC
ROL
BCS GT_GT67
LDA #0
JMP GT_SKIP67
GT_GT67:
LDA #$1
GT_SKIP67:
COMP_SKP96:
BEQ LINE_SKIP260
LINE_NSKIP260:
JMP RETURN
LINE_SKIP260:
LINE_40330:
JSR GETADOLLAR
LDA #<CONST_90
LDY #>CONST_90
JSR COMPACT62
JSR SNEQ
LDA X_REG
COMP_SKP97:
BEQ LINE_SKIP261
LINE_NSKIP261:
JMP RETURN
LINE_SKIP261:
LINE_40340:
JSR GOSUB
JSR LINE_22000
JMP LINE_40320
LINE_40500:
LINE_40510:
JSR COMPACT77
EQ_EQ68:
EQ_SKIP68:
COMP_SKP98:
BNE LINE_SKIP262
LINE_NSKIP262:
JMP RETURN
LINE_SKIP262:
LINE_40520:
LDY VAR_PI%
LDA VAR_PI%+1
JSR FIDEX
LDA #<VAR_CP%[]
LDY #>VAR_CP%[]
JSR ARRAYACCESS_INTEGER_SI
STY VAR_CN%
STA VAR_CN%+1
LDY VAR_PI%
LDA VAR_PI%+1
JSR SUPERFIDEX
STY VAR_PI%
STA VAR_PI%+1
LINE_40530:
JSR GOSUB
JSR LINE_34750
LINE_40540:
JSR GOSUB
JSR LINE_40800
LINE_40550:
LDY VAR_CN%
LDA VAR_CN%+1
JSR COMPACT66
LDY VAR_CI%
LDA VAR_CI%+1
JSR ARRAYSTORE_INT_INTEGER_AC
LINE_40560:
LDY VAR_CI%
LDA VAR_CI%+1
STY VAR_CS%
STA VAR_CS%+1
JSR GOSUB
JSR LINE_38000
JMP RETURN
LINE_40700:
LINE_40710:
LDA #$01
JSR COMPACT75
NEQ_NEQ69:
NEQ_SKIP69:
COMP_SKP99:
BEQ LINE_SKIP263
LINE_NSKIP263:
JMP RETURN
LINE_SKIP263:
LINE_40720:
LDY #29
LDA #0
STY VAR_XC%
STA VAR_XC%+1
LDY VAR_DS%
LDA VAR_DS%+1
STY VAR_YC%
STA VAR_YC%+1
JSR COMPACT67
TYA
JSR COMPACT83
LINE_40730:
JMP RETURN
LINE_40800:
LINE_40810:
LDA #$09
JSR COMPACT75
ROL
BCS GT_GT70
LDA #0
JMP GT_SKIP70
GT_GT70:
LDA #$1
GT_SKIP70:
COMP_SKP100:
BEQ LINE_SKIP264
LINE_NSKIP264:
JMP LINE_57300
LINE_SKIP264:
LINE_40820:
JMP RETURN
LINE_41000:
LINE_41010:
JSR GOSUB
JSR LINE_34750
JSR GOSUB
JSR LINE_40800
LDY #0
TYA
JSR COMPACT173
LDY VAR_CI%
LDA VAR_CI%+1
JSR ARRAYSTORE_INT_INTEGER_AC
LINE_41020:
LDY VAR_CI%
LDA VAR_CI%+1
STY VAR_CS%
STA VAR_CS%+1
JSR GOSUB
JSR LINE_38000
JMP RETURN
LINE_44000:
LINE_44010:
JSR GOSUB
JSR LINE_50900
LDY #2
LDA #0
STY VAR_MD%
STA VAR_MD%+1
LDY #5
LDA #0
STY VAR_DC%
STA VAR_DC%+1
JSR GOSUB
JSR LINE_30010
LINE_44020:
LDY #0
TYA
STY VAR_SL%
STA VAR_SL%+1
LDY #203
STY 53249
JSR GOSUB
JSR LINE_44200
LINE_44030:
LDY #1
STY 53269
JMP RETURN
LINE_44200:
LINE_44210:
LDY VAR_SL%
LDA VAR_SL%+1
JSR INTFAC
JSR FACYREG
LDY #6
JSR COMPACT31
JSR FACXREG
LDY #3
LDA #0
STY A_REG
STA A_REG+1
JSR YREGFAC
JSR SHL
LDA #<X_REG
LDY #>X_REG
JSR FASTFSUBMEM
JSR FACXREG
LDA #<CONST_34R
LDY #>CONST_34R
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFADDMEM
JSR FACWORD
STY 53248
JMP RETURN
LINE_44400:
LINE_44405:
LDY #0
TYA
STY VAR_HC%
STA VAR_HC%+1
JSR GOSUB
JSR LINE_46500
JSR GOSUB
JSR LINE_38000
JSR GOSUB
JSR LINE_34700
LINE_44410:
JSR GOSUB
JSR LINE_35000
JSR GOSUB
JSR LINE_35500
LINE_44420:
JSR GOSUB
JSR LINE_36100
JMP RETURN
LINE_44500:
LINE_44505:
JSR GOSUB
JSR LINE_57350
JSR GOSUB
JSR LINE_36080
LINE_44510:
JSR GOSUB
JSR LINE_36000
JSR GOSUB
JSR LINE_35600
LINE_44515:
JSR GOSUB
JSR LINE_45000
LINE_44520:
LDA #<CONST_94
LDY #>CONST_94
JSR COMPACT64
COMP_SKP101:
BEQ LINE_SKIP265
LINE_NSKIP265:
JSR GOSUB
JSR LINE_50700
LDY VAR_SL%
LDA VAR_SL%+1
JSR SUPERFIDEX
STY VAR_SL%
STA VAR_SL%+1
LINE_SKIP265:
LINE_44530:
LDA #<CONST_95
LDY #>CONST_95
JSR COMPACT64
COMP_SKP102:
BEQ LINE_SKIP266
LINE_NSKIP266:
JSR GOSUB
JSR LINE_50700
LDY VAR_SL%
LDA VAR_SL%+1
JSR SUPERFIINX
STY VAR_SL%
STA VAR_SL%+1
LINE_SKIP266:
LINE_44540:
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_SL%
LDA VAR_SL%+1
JSR ICMP
BEQ LT_LT_EQ71
ROL
BCC LT_LT71
LT_LT_EQ71:
LDA #0
JMP LT_SKIP71
LT_LT71:
LDA #$1
LT_SKIP71:
COMP_SKP103:
BEQ LINE_SKIP267
LINE_NSKIP267:
LDY #3
LDA #0
STY VAR_SL%
STA VAR_SL%+1
LINE_SKIP267:
LINE_44550:
LDA #$03
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_SL%
LDA VAR_SL%+1
JSR ICMP
ROL
BCS GT_GT72
LDA #0
JMP GT_SKIP72
GT_GT72:
LDA #$1
GT_SKIP72:
COMP_SKP104:
BEQ LINE_SKIP268
LINE_NSKIP268:
LDY #0
TYA
STY VAR_SL%
STA VAR_SL%+1
LINE_SKIP268:
LINE_44560:
JSR GOSUB
JSR LINE_44200
LINE_44570:
LDA #<CONST_99
LDY #>CONST_99
JSR COMPACT64
COMP_SKP105:
BEQ LINE_SKIP269
LINE_NSKIP269:
JSR GOSUB
JSR LINE_50900
LDY #1
LDA #0
STY VAR_MD%
STA VAR_MD%+1
LINE_SKIP269:
LINE_44580:
LDA #<CONST_97
LDY #>CONST_97
JSR COMPACT63
JSR COMPACT89
JSR COMPACT63
JSR POPREAL2X
JSR FASTOR
JSR FACXREG
LDA X_REG
COMP_SKP106:
BEQ LINE_SKIP270
LINE_NSKIP270:
JSR GOSUB
JSR LINE_50700
JSR GOSUB
JSR LINE_45600
LINE_SKIP270:
LINE_44590:
LDA #$02
JSR COMPACT4
NEQ_NEQ73:
NEQ_SKIP73:
COMP_SKP107:
BEQ LINE_SKIP271
LINE_NSKIP271:
LDY #0
LDA #0
STY 53269
JSR GOSUB
JSR LINE_57280
JMP RETURN
LINE_SKIP271:
LINE_44600:
JMP LINE_44510
LINE_45000:
LINE_45005:
LDA #$00
JSR COMPACT4
EQ_EQ74:
EQ_SKIP74:
COMP_SKP108:
BNE LINE_SKIP272
LINE_NSKIP272:
JMP RETURN
LINE_SKIP272:
LINE_45010:
LDA #<CONST_108
LDY #>CONST_108
JSR COMPACT62
JSR SGT
LDA X_REG
COMP_SKP109:
BNE LINE_NSKIP273
JMP LINE_SKIP273
LINE_NSKIP273:
LDA #<CONST_109
LDY #>CONST_109
JSR COMPACT62
JSR SLT
LDA X_REG
COMP_SKP110:
BEQ LINE_SKIP274
LINE_NSKIP274:
LDA VAR_A$
LDY VAR_A$+1
STA B_REG
STY B_REG+1
JSR VAL
JSR XREGFAC
JSR FACINT
STY VAR_FS%
STA VAR_FS%+1
JSR GOSUB
JSR LINE_46000
LINE_SKIP274:
LINE_SKIP273:
LINE_45020:
JMP RETURN
LINE_45500:
LINE_45510:
LDY #29
LDA #0
STY VAR_XC%
STA VAR_XC%+1
JSR COMPACT73
JSR FACINT
STY VAR_YC%
STA VAR_YC%+1
JSR GOSUB
JSR LINE_30000
LINE_45520:
JSR GOSUB
JSR LINE_36140
JMP RETURN
LINE_45600:
LINE_45610:
LDY #$00
LDA #$08
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_SL%
LDA VAR_SL%+1
JSR INTADD
JSR INTCONV
STY VAR_SD%
STA VAR_SD%+1
LDA #<VAR_PF%[]
LDY #>VAR_PF%[]
STA G_REG
STY G_REG+1
LDY VAR_SD%
LDA VAR_SD%+1
JSR COMPACT0
ROL
BCS GT_GT75
LDA #0
JMP GT_SKIP75
GT_GT75:
LDA #$1
GT_SKIP75:
COMP_SKP111:
BEQ LINE_SKIP275
LINE_NSKIP275:
JSR GOSUB
JSR LINE_50000
JMP RETURN
LINE_SKIP275:
LINE_45615:
JSR GOSUB
JSR LINE_46800
LDA #$01
JSR COMPACT71
EQ_EQ76:
EQ_SKIP76:
COMP_SKP112:
BNE LINE_SKIP276
LINE_NSKIP276:
JMP RETURN
LINE_SKIP276:
LINE_45620:
LDA #<VAR_CD%[]
LDY #>VAR_CD%[]
STA G_REG
STY G_REG+1
LDY VAR_CS%
LDA VAR_CS%+1
JSR ARRAYACCESS_INTEGER_INT_SI
STY VAR_CN%
STA VAR_CN%+1
LDY VAR_CS%
LDA VAR_CS%+1
JSR INTFAC
JSR FACXREG
LDA #<CONST_9
LDY #>CONST_9
JSR COPY2_XYA_YREG
LDA #<VAR_CD%[]
LDY #>VAR_CD%[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_INTEGER
LDY #1
LDA #0
STY VAR_MD%
STA VAR_MD%+1
JSR GOSUB
JSR LINE_38000
LINE_45630:
JSR GOSUB
JSR LINE_47000
LDY VAR_CN%
LDA VAR_CN%+1
JSR COMPACT5
LDY VAR_SD%
LDA VAR_SD%+1
JSR ARRAYSTORE_INT_INTEGER_AC
LDY VAR_SD%
LDA VAR_SD%+1
JSR COMPACT6
LDY VAR_CN%
LDA VAR_CN%+1
JSR COMPACT12
LDA #<CONST_20R
LDY #>CONST_20R
JSR COPY2_XYA_YREG
LDY VAR_SL%
LDA VAR_SL%+1
JSR COMPACT19
JSR FACINT
STY VAR_XC%
STA VAR_XC%+1
LDY #12
LDA #0
STY VAR_YC%
STA VAR_YC%+1
LDY #1
LDA #0
STY VAR_DC%
STA VAR_DC%+1
JSR GOSUB
JSR LINE_30000
LINE_45640:
LDA #$00
JSR COMPACT75
EQ_EQ77:
EQ_SKIP77:
COMP_SKP113:
BNE LINE_SKIP277
LINE_NSKIP277:
JSR GOSUB
JSR LINE_35670
LDY #3
LDA #0
STY VAR_MD%
STA VAR_MD%+1
LINE_SKIP277:
LINE_45660:
LDY #0
TYA
STY VAR_CS%
STA VAR_CS%+1
STY VAR_TC%
STA VAR_TC%+1
JSR GOSUB
JSR LINE_34700
JSR GOSUB
JSR LINE_37000
LINE_45670:
JSR GOSUB
JSR LINE_36500
JSR COMPACT67
TYA
JSR ARRAYACCESS_INTEGER_INT_SI
STY VAR_CN%
STA VAR_CN%+1
JMP RETURN
LINE_46000:
LINE_46010:
JSR COMPACT176
JSR FACXREG
LDA #<VAR_PF%[]
LDY #>VAR_PF%[]
JSR ARRAYACCESS_INTEGER_SI
STY VAR_II%
STA VAR_II%+1
LDA #$ff
LDY #$ff
JSR COMPACT72
EQ_EQ78:
EQ_SKIP78:
COMP_SKP114:
BNE LINE_SKIP278
LINE_NSKIP278:
JMP RETURN
LINE_SKIP278:
LINE_46020:
JSR GOSUB
JSR LINE_50550
LDA #$00
JSR COMPACT71
BEQ LT_LT_EQ79
ROL
BCC LT_LT79
LT_LT_EQ79:
LDA #0
JMP LT_SKIP79
LT_LT79:
LDA #$1
LT_SKIP79:
COMP_SKP115:
BNE LINE_NSKIP279
JMP LINE_SKIP279
LINE_NSKIP279:
LDY #$03
LDA #$e8
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_II%
LDA VAR_II%+1
JSR INTADD
JSR INTCONV
STY VAR_II%
STA VAR_II%+1
LDY #255
LDA #255
STY VAR_DR%
STA VAR_DR%+1
JMP LINE_46050
LINE_SKIP279:
LINE_46030:
LDY #$03
LDA #$e8
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_II%
LDA VAR_II%+1
JSR INTSUB
JSR INTCONV
STY VAR_II%
STA VAR_II%+1
LDY #1
LDA #0
STY VAR_DR%
STA VAR_DR%+1
LINE_46050:
JSR COMPACT93
LDY VAR_II%
LDA VAR_II%+1
JSR COMPACT5
JSR ARRAYSTORE_INT_INTEGER
LDY VAR_XC%
LDA VAR_XC%+1
STY VAR_TX%
STA VAR_TX%+1
LDY VAR_YC%
LDA VAR_YC%+1
STY VAR_TY%
STA VAR_TY%+1
LDY VAR_CN%
LDA VAR_CN%+1
STY VAR_TN%
STA VAR_TN%+1
LINE_46060:
LDY VAR_FS%
LDA VAR_FS%+1
JSR FIDEX
JSR COMPACT46
JSR FACINT
STY VAR_XC%
STA VAR_XC%+1
LDY #12
LDA #0
STY VAR_YC%
STA VAR_YC%+1
LDA #$00
JSR COMPACT71
BEQ LT_LT_EQ80
ROL
BCC LT_LT80
LT_LT_EQ80:
LDA #0
JMP LT_SKIP80
LT_LT80:
LDA #$1
LT_SKIP80:
COMP_SKP116:
BEQ LINE_SKIP280
LINE_NSKIP280:
JSR GOSUB
JSR LINE_46200
JMP LINE_46080
LINE_SKIP280:
LINE_46070:
LDY VAR_II%
LDA VAR_II%+1
STY VAR_CN%
STA VAR_CN%+1
JSR COMPACT93
LDA #<VAR_HP%[]
LDY #>VAR_HP%[]
JSR ARRAYACCESS_INTEGER_SI
STY VAR_HP%
STA VAR_HP%+1
JSR GOSUB
JSR LINE_30000
LINE_46080:
JSR GOSUB
JSR LINE_46400
LDY VAR_TX%
LDA VAR_TX%+1
STY VAR_XC%
STA VAR_XC%+1
LDY VAR_TY%
LDA VAR_TY%+1
STY VAR_YC%
STA VAR_YC%+1
LDY VAR_TN%
LDA VAR_TN%+1
STY VAR_CN%
STA VAR_CN%+1
JMP RETURN
LINE_46200:
LINE_46210:
LDY #1
STY 646
JSR COMPACT50
LINE_46220:
JSR GOSUB
JSR LINE_34500
LDA #<CONST_39
LDY #>CONST_39
JSR STROUTWL
LINE_46230:
JSR COMPACT28
LDA #<CONST_15R
LDY #>CONST_15R
JSR COMPACT13
LDA #<FORLOOP18
STA JUMP_TARGET
LDA #>FORLOOP18
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP18:
JSR COMPACT30
JSR GOSUB
JSR LINE_34500
LINE_46240:
LDA #<CONST_111
LDY #>CONST_111
JSR STROUTWL
LINE_46250:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_19
JMP (JUMP_TARGET)
RBEQ_19:
LINE_46260:
JSR COMPACT30
JSR GOSUB
JSR LINE_34500
LINE_46270:
LDA #<CONST_42
LDY #>CONST_42
JSR STROUTWL
LINE_46280:
JMP RETURN
LINE_46400:
LINE_46405:
JSR COMPACT176
JSR FACXREG
LDA #<VAR_PF%[]
LDY #>VAR_PF%[]
JSR ARRAYACCESS_INTEGER_SI
STY VAR_IR%
STA VAR_IR%+1
LINE_46410:
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_IR%
LDA VAR_IR%+1
JSR ICMP
BEQ LT_LT_EQ81
ROL
BCC LT_LT81
LT_LT_EQ81:
LDA #0
JMP LT_SKIP81
LT_LT81:
LDA #$1
LT_SKIP81:
COMP_SKP118:
BNE LINE_NSKIP281
JMP LINE_SKIP281
LINE_NSKIP281:
LDY #$03
LDA #$e8
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_IR%
LDA VAR_IR%+1
JSR INTADD
JSR BASINT
JSR FACXREG
LDA #<CONST_36R
LDY #>CONST_36R
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFADDMEM
JSR FACXREG
LDA #<VAR_CV%[]
LDY #>VAR_CV%[]
JSR ARRAYACCESS_INTEGER_SI
STY VAR_AS%
STA VAR_AS%+1
LDY #1
LDA #0
STY VAR_DA%
STA VAR_DA%+1
JSR GOSUB
JSR LINE_49360
JSR GOSUB
JSR LINE_49370
JMP LINE_46430
LINE_SKIP281:
LINE_46420:
LDY #255
LDA #255
STY VAR_DA%
STA VAR_DA%+1
LDA #<CONST_36R
LDY #>CONST_36R
JSR REALFACPUSH
LDY VAR_IR%
LDA VAR_IR%+1
JSR COMPACT8
JSR ARRAYACCESS_INTEGER_SI
STY VAR_AS%
STA VAR_AS%+1
JSR GOSUB
JSR LINE_49360
JSR GOSUB
JSR LINE_49370
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_HC%
LDA VAR_HC%+1
JSR ICMP
BEQ LT_LT_EQ82
ROL
BCC LT_LT82
LT_LT_EQ82:
LDA #0
JMP LT_SKIP82
LT_LT82:
LDA #$1
LT_SKIP82:
COMP_SKP119:
BEQ LINE_SKIP282
LINE_NSKIP282:
LDY #0
TYA
STY VAR_HC%
STA VAR_HC%+1
LINE_SKIP282:
LINE_46430:
LDA #$09
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_HC%
LDA VAR_HC%+1
JSR ICMP
ROL
BCS GT_GT83
LDA #0
JMP GT_SKIP83
GT_GT83:
LDA #$1
GT_SKIP83:
COMP_SKP120:
BEQ LINE_SKIP283
LINE_NSKIP283:
LDY #9
LDA #0
STY VAR_HC%
STA VAR_HC%+1
LINE_SKIP283:
LINE_46435:
LDA #$09
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_BC%
LDA VAR_BC%+1
JSR ICMP
ROL
BCS GT_GT84
LDA #0
JMP GT_SKIP84
GT_GT84:
LDA #$1
GT_SKIP84:
COMP_SKP121:
BEQ LINE_SKIP284
LINE_NSKIP284:
LDY #9
LDA #0
STY VAR_BC%
STA VAR_BC%+1
LINE_SKIP284:
LINE_46440:
LDY #15
LDA #0
STY VAR_CY%
STA VAR_CY%+1
LDY VAR_FS%
LDA VAR_FS%+1
JSR FIDEX
JSR COMPACT46
JSR FACXREG
JSR COMPACT145
JSR FASTFADDMEM
JSR FACINT
STY VAR_CX%
STA VAR_CX%+1
JSR GOSUB
JSR LINE_46570
LINE_46450:
JMP RETURN
LINE_46500:
LINE_46510:
LDY #1
STY 646
LINE_46530:
LDY #0
TYA
STY VAR_CX%
STA VAR_CX%+1
LDY #22
JSR COMPACT70
LDA #<CONST_112
LDY #>CONST_112
JSR STROUTWL
JSR COMPACTMAX
JSR COMPACT80
LDY VAR_BC%
LDA VAR_BC%+1
JSR INTFAC
JSR FACYREG
JSR COMPACT2
JSR COMPACT81
LDA #32
JSR SINGLECHROUTBRKMAX
LINE_46540:
LDY #0
TYA
STY VAR_CX%
STA VAR_CX%+1
LDY #23
JSR COMPACT70
LDY #2
STY 646
LDA #<CONST_113
LDY #>CONST_113
JSR STROUTWL
LDY #1
STY 646
LDA #58
JSR SINGLECHROUTMAX
JSR COMPACTMAX
JSR COMPACT80
LDY VAR_HC%
LDA VAR_HC%+1
JSR INTFAC
JSR FACYREG
JSR COMPACT2
JSR COMPACT81
LDA #32
JSR SINGLECHROUTBRKMAX
LINE_46550:
JMP RETURN
LINE_46570:
LINE_46572:
LDY VAR_CX%
LDA VAR_CX%+1
STY VAR_VX%
STA VAR_VX%+1
LDY VAR_CY%
LDA VAR_CY%+1
STY VAR_VY%
STA VAR_VY%+1
LINE_46575:
LDY #2
LDA #0
STY VAR_C%
STA VAR_C%+1
JSR GOSUB
JSR LINE_46600
JSR GOSUB
JSR LINE_46540
LDY VAR_VX%
LDA VAR_VX%+1
STY VAR_CX%
STA VAR_CX%+1
LDY VAR_VY%
LDA VAR_VY%+1
STY VAR_CY%
STA VAR_CY%+1
LDY #1
LDA #0
STY VAR_C%
STA VAR_C%+1
JSR GOSUB
JSR LINE_46600
JSR GOSUB
JSR LINE_46500
JMP RETURN
LINE_46600:
LINE_46610:
LDY VAR_DC%
LDA VAR_DC%+1
STY VAR_DZ%
STA VAR_DZ%+1
LDY VAR_CX%
LDA VAR_CX%+1
STY VAR_XS%
STA VAR_XS%+1
LDY VAR_CY%
LDA VAR_CY%+1
STY VAR_YS%
STA VAR_YS%+1
LDY #2
LDA #0
STY VAR_XE%
STA VAR_XE%+1
LDA #$02
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_C%
LDA VAR_C%+1
JSR ICMP
BEQ EQ_EQ85
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP EQ_SKIP85
EQ_EQ85:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
EQ_SKIP85:
JSR REALFAC
JSR FACINT
STY VAR_II%
STA VAR_II%+1
JSR INTFAC
LDA #<CONST_36R
LDY #>CONST_36R
JSR COMPACT47
STY VAR_YE%
STA VAR_YE%+1
LDY VAR_II%
LDA VAR_II%+1
JSR INTFAC
JSR FACYREG
LDY #3
LDA #0
STY A_REG
STA A_REG+1
JSR YREGFAC
JSR SHL
JSR COMPACT112
JSR FACXREG
LDA #<CONST_29R
LDY #>CONST_29R
JSR COMPACT96
STY VAR_PV%
STA VAR_PV%+1
LINE_46615:
LDA #$ff
LDY #$ff
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_DR%
LDA VAR_DR%+1
JSR ICMP
BEQ EQ_EQ86
LDA #0
JMP EQ_SKIP86
EQ_EQ86:
LDA #$1
EQ_SKIP86:
COMP_SKP122:
BNE LINE_NSKIP285
JMP LINE_SKIP285
LINE_NSKIP285:
LDY VAR_XS%
LDA VAR_XS%+1
STY VAR_II%
STA VAR_II%+1
LDY VAR_XE%
LDA VAR_XE%+1
STY VAR_XS%
STA VAR_XS%+1
LDY VAR_II%
LDA VAR_II%+1
STY VAR_XE%
STA VAR_XE%+1
LDY VAR_YS%
LDA VAR_YS%+1
STY VAR_II%
STA VAR_II%+1
LDY VAR_YE%
LDA VAR_YE%+1
STY VAR_YS%
STA VAR_YS%+1
LDY VAR_II%
LDA VAR_II%+1
STY VAR_YE%
STA VAR_YE%+1
LINE_SKIP285:
LINE_46620:
LDY VAR_XE%
LDA VAR_XE%+1
STY TMP3_ZP
STA TMP3_ZP+1
LDY VAR_XS%
LDA VAR_XS%+1
JSR INTSUBVAR
LDX #<VAR_DX
LDY #>VAR_DX
JSR FACMEM
LDY VAR_YE%
LDA VAR_YE%+1
STY TMP3_ZP
STA TMP3_ZP+1
LDY VAR_YS%
LDA VAR_YS%+1
JSR INTSUBVAR
LDX #<VAR_DY
LDY #>VAR_DY
JSR FACMEM
LINE_46630:
LDA #<VAR_DY
LDY #>VAR_DY
JSR REALFAC
JSR FACABS
JSR PUSHREAL
LDA #<VAR_DX
LDY #>VAR_DX
JSR REALFAC
JSR FACABS
JSR COMPACT24
ROL
BCS GT_GT87
LDA #0
JMP GT_SKIP87
GT_GT87:
LDA #$1
GT_SKIP87:
COMP_SKP123:
BNE LINE_NSKIP286
JMP LINE_SKIP286
LINE_NSKIP286:
LDA #<VAR_DX
LDY #>VAR_DX
JSR REALFAC
JSR FACABS
JSR FACYREG
LDA #<VAR_DY
LDY #>VAR_DY
JSR COPY2_XYA_XREG
JSR YREGFAC
LDA #<X_REG
LDY #>X_REG
JSR FACDIV
LDX #<VAR_DY
LDY #>VAR_DY
JSR FACMEM
LDA #<VAR_DX
LDY #>VAR_DX
JSR REALFAC
JSR FACSIG
LDX #<VAR_DX
LDY #>VAR_DX
JSR FACMEM
JMP LINE_46645
LINE_SKIP286:
LINE_46640:
LDA #<VAR_DY
LDY #>VAR_DY
JSR REALFAC
JSR FACABS
JSR FACYREG
LDA #<VAR_DX
LDY #>VAR_DX
JSR COPY2_XYA_XREG
JSR YREGFAC
LDA #<X_REG
LDY #>X_REG
JSR FACDIV
LDX #<VAR_DX
LDY #>VAR_DX
JSR FACMEM
LDA #<VAR_DY
LDY #>VAR_DY
JSR REALFAC
JSR FACSIG
LDX #<VAR_DY
LDY #>VAR_DY
JSR FACMEM
LINE_46645:
LDY VAR_XS%
LDA VAR_XS%+1
JSR INTFAC
LDX #<VAR_I2
LDY #>VAR_I2
JSR FACMEM
LDY VAR_YS%
LDA VAR_YS%+1
JSR INTFAC
LDX #<VAR_I3
LDY #>VAR_I3
JSR FACMEM
LINE_46650:
LDA #<VAR_I3
LDY #>VAR_I3
JSR REALFAC
JSR BASINT
JSR FACXREG
LDY #5
LDA #0
STY A_REG
STA A_REG+1
JSR COPY_XREG2YREG
JSR XREGFAC
JSR SHL
JSR FACXREG
LDY #3
JSR COMPACT90
JSR FASTFADDMEM
JSR FACARG
LDA #<VAR_I2
LDY #>VAR_I2
JSR REALFAC
JSR XXBASINT
JSR FASTFADDARG
JSR FACXREG
LDA #<VAR_SA
LDY #>VAR_SA
JSR COMPACT40
LINE_46655:
LDA #<VAR_PP
LDY #>VAR_PP
JSR REALFAC
JSR FACWORD
STY MOVBSELF60+1
STA MOVBSELF60+2
MOVBSELF60:
LDY $FFFF
LDA #0
STY VAR_CH%
STA VAR_CH%+1
JSR COMPACT41
STY MOVBSELF61+1
STA MOVBSELF61+2
MOVBSELF61:
LDY $FFFF
LDA #0
STY VAR_DC%
STA VAR_DC%+1
LINE_46660:
LDA #<VAR_PP
LDY #>VAR_PP
JSR REALFAC
JSR FACWORD
STY MOVBSELF62+1
STA MOVBSELF62+2
LDY VAR_PV%
MOVBSELF62:
STY $FFFF
JSR COMPACT41
STY MOVBSELF63+1
STA MOVBSELF63+2
LDY VAR_C%
MOVBSELF63:
STY $FFFF
LINE_46670:
LDA #<VAR_DX
LDY #>VAR_DX
JSR REALFAC
LDA #<VAR_I2
LDY #>VAR_I2
JSR FASTFADDMEM
LDX #<VAR_I2
LDY #>VAR_I2
JSR FACMEM
LDA #<VAR_DY
LDY #>VAR_DY
JSR REALFAC
LDA #<VAR_I3
LDY #>VAR_I3
JSR FASTFADDMEM
LDX #<VAR_I3
LDY #>VAR_I3
JSR FACMEM
LINE_46672:
JSR COMPACT17
dcloop2409_1:
LDA VAR_TI,X
STA VAR_TS,X
DEX
BPL dcloop2409_1
JSR GOSUB
JSR LINE_22000
LINE_46674:
LDA #<VAR_TS
LDY #>VAR_TS
JSR COPY2_XYA_YREG
JSR COMPACT16
LDA #<VAR_TI
LDY #>VAR_TI
JSR COMPACT21
LDA X_REG
BEQ EQ_EQ88
LDA #0
JMP EQ_SKIP88
EQ_EQ88:
LDA #$1
EQ_SKIP88:
COMP_SKP124:
BEQ LINE_SKIP287
LINE_NSKIP287:
JMP LINE_46674
LINE_SKIP287:
LINE_46680:
LDA #<VAR_PP
LDY #>VAR_PP
JSR REALFAC
JSR FACWORD
STY MOVBSELF64+1
STA MOVBSELF64+2
LDY VAR_CH%
MOVBSELF64:
STY $FFFF
JSR COMPACT41
STY MOVBSELF65+1
STA MOVBSELF65+2
LDY VAR_DC%
MOVBSELF65:
STY $FFFF
LINE_46690:
LDA #<CONST_115
LDY #>CONST_115
JSR REALFAC
LDA #<VAR_I2
LDY #>VAR_I2
JSR FASTFADDMEM
JSR BASINT
JSR FACXREG
LDY VAR_XE%
LDA VAR_XE%+1
JSR INTFAC
LDA #<X_REG
LDY #>X_REG
JSR CMPFAC
BEQ EQ_EQ89
LDA #0
JMP EQ_SKIP89
EQ_EQ89:
LDA #$1
EQ_SKIP89:
COMP_SKP125:
BNE LINE_NSKIP288
JMP LINE_SKIP288
LINE_NSKIP288:
LDA #<CONST_115
LDY #>CONST_115
JSR REALFAC
LDA #<VAR_I3
LDY #>VAR_I3
JSR FASTFADDMEM
JSR BASINT
JSR FACXREG
LDY VAR_YE%
LDA VAR_YE%+1
JSR INTFAC
LDA #<X_REG
LDY #>X_REG
JSR CMPFAC
EQ_EQ90:
EQ_SKIP90:
COMP_SKP126:
BNE LINE_SKIP289
LINE_NSKIP289:
LDY VAR_DZ%
LDA VAR_DZ%+1
JSR INTFAC
JSR FACYREG
JSR YREGFAC
JSR FACINT
STY VAR_DC%
STA VAR_DC%+1
JMP RETURN
LINE_SKIP289:
LINE_SKIP288:
LINE_46700:
JMP LINE_46650
LINE_46800:
LINE_46810:
LDY #0
TYA
STY VAR_II%
STA VAR_II%+1
JSR COMPACT36
JSR COMPACT8
JSR ARRAYACCESS_INTEGER_SI
STY VAR_I2%
STA VAR_I2%+1
LDA #$00
JSR COMPACT76
EQ_EQ91:
EQ_SKIP91:
COMP_SKP127:
BNE LINE_SKIP290
LINE_NSKIP290:
JMP LINE_46850
LINE_SKIP290:
LINE_46820:
LDY VAR_I2%
LDA VAR_I2%+1
STY TMP_ZP
STA TMP_ZP+1
LDY VAR_HC%
LDA VAR_HC%+1
JSR ICMP
BEQ LT_LT_EQ92
ROL
BCC LT_LT92
LT_LT_EQ92:
LDA #0
JMP LT_SKIP92
LT_LT92:
LDA #$1
LT_SKIP92:
COMP_SKP128:
BEQ LINE_SKIP291
LINE_NSKIP291:
LDY #1
LDA #0
STY VAR_II%
STA VAR_II%+1
LDY #1
LDA #0
STY VAR_MG%
STA VAR_MG%+1
JSR GOSUB
JSR LINE_50000
JSR GOSUB
JSR LINE_40000
LINE_SKIP291:
LINE_46830:
JMP RETURN
LINE_46850:
JSR COMPACT37
JSR COMPACT8
JSR ARRAYACCESS_INTEGER_SI
STY VAR_I2%
STA VAR_I2%+1
LDA #$00
JSR COMPACT76
EQ_EQ93:
EQ_SKIP93:
COMP_SKP129:
BNE LINE_SKIP292
LINE_NSKIP292:
JMP RETURN
LINE_SKIP292:
LINE_46860:
LDY VAR_I2%
LDA VAR_I2%+1
STY TMP_ZP
STA TMP_ZP+1
LDY VAR_BC%
LDA VAR_BC%+1
JSR ICMP
BEQ LT_LT_EQ94
ROL
BCC LT_LT94
LT_LT_EQ94:
LDA #0
JMP LT_SKIP94
LT_LT94:
LDA #$1
LT_SKIP94:
COMP_SKP130:
BEQ LINE_SKIP293
LINE_NSKIP293:
LDY #1
LDA #0
STY VAR_II%
STA VAR_II%+1
LDY #2
LDA #0
STY VAR_MG%
STA VAR_MG%+1
JSR GOSUB
JSR LINE_50000
JSR GOSUB
JSR LINE_40000
LINE_SKIP293:
LINE_46870:
JMP RETURN
LINE_47000:
LINE_47005:
JSR COMPACT36
JSR COMPACT11
LDY VAR_HC%
LDA VAR_HC%+1
JSR COMPACT18
JSR FASTFSUBMEM
JSR FACINT
STY VAR_HC%
STA VAR_HC%+1
JSR COMPACT37
JSR COMPACT11
LDY VAR_BC%
LDA VAR_BC%+1
JSR COMPACT18
JSR FASTFSUBMEM
JSR FACINT
STY VAR_BC%
STA VAR_BC%+1
LINE_47010:
LDX #4
dcloop2565_1:
LDA CONST_5R,X
STA VAR_II,X
DEX
BPL dcloop2565_1
LDA #<CONST_0R
LDY #>CONST_0R
JSR COMPACT123
LDA #<FORLOOP19
STA JUMP_TARGET
LDA #>FORLOOP19
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP19:
LDA #<VAR_II
LDY #>VAR_II
JSR COPY2_XYA_XREG
LDA #<VAR_PF%[]
LDY #>VAR_PF%[]
JSR ARRAYACCESS_INTEGER_S
JSR COMPACT1
BEQ GTEQ_GTEQ95
BCS GTEQ_GTEQ95
LDA #0
JMP GTEQ_SKIP95
GTEQ_GTEQ95:
LDA #$1
GTEQ_SKIP95:
COMP_SKP131:
BEQ LINE_SKIP294
LINE_NSKIP294:
JMP LINE_47050
LINE_SKIP294:
LINE_47040:
JSR GOSUB
JSR LINE_46500
LDY #12
LDA #0
STY VAR_CY%
STA VAR_CY%+1
LDA #<CONST_5R
LDY #>CONST_5R
JSR REALFAC
LDA #<VAR_II
LDY #>VAR_II
JSR FASTFSUBMEM
JSR COMPACT45
JSR FACINT
STY VAR_CX%
STA VAR_CX%+1
JSR GOSUB
JSR LINE_47200
LDA #<VAR_II
LDY #>VAR_II
JSR COPY2_XYA_XREG
LDA #<CONST_9
LDY #>CONST_9
JSR COPY2_XYA_YREG
JSR COMPACT56
LINE_47050:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_20
JMP (JUMP_TARGET)
RBEQ_20:
JSR GOSUB
JSR LINE_46500
JMP RETURN
LINE_47200:
LINE_47210:
LDY #1
STY 646
LINE_47230:
JSR COMPACT106
LDA #<CONST_20R
LDY #>CONST_20R
JSR COMPACT107
LDA #<FORLOOP20
STA JUMP_TARGET
LDA #>FORLOOP20
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP20:
JSR COMPACT29
LINE_47240:
LDA #<CONST_116
LDY #>CONST_116
JSR STROUTWL
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_21
JMP (JUMP_TARGET)
RBEQ_21:
LINE_47250:
JMP RETURN
LINE_47300:
LINE_47310:
LDY #1
STY 646
LINE_47330:
JSR COMPACT106
LDA #<CONST_20R
LDY #>CONST_20R
JSR COMPACT107
LDA #<FORLOOP21
STA JUMP_TARGET
LDA #>FORLOOP21
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP21:
JSR GOSUB
JSR LINE_34500
LINE_47340:
LDA #<CONST_20R
LDY #>CONST_20R
JSR REALFAC
LDA #<VAR_P
LDY #>VAR_P
JSR CMPFAC
BEQ LT_LT_EQ96
ROL
BCC LT_LT96
LT_LT_EQ96:
LDA #0
JMP LT_SKIP96
LT_LT96:
LDA #$1
LT_SKIP96:
COMP_SKP134:
BEQ LINE_SKIP295
LINE_NSKIP295:
LDA #<CONST_39
LDY #>CONST_39
JSR STROUTWL
LINE_SKIP295:
LINE_47345:
JSR COMPACT17
dcloop2721_1:
LDA VAR_TI,X
STA VAR_TS,X
DEX
BPL dcloop2721_1
LINE_47346:
LDA #<VAR_TS
LDY #>VAR_TS
JSR COPY2_XYA_YREG
JSR COMPACT16
LDA #<VAR_TI
LDY #>VAR_TI
JSR COMPACT21
LDA #<CONST_8R
LDY #>CONST_8R
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
JSR CMPFAC
BCC LTEQ_LTEQ97
BEQ LTEQ_LTEQ97
LDA #0
JMP LTEQ_SKIP97
LTEQ_LTEQ97:
LDA #$1
LTEQ_SKIP97:
COMP_SKP135:
BEQ LINE_SKIP296
LINE_NSKIP296:
JSR GOSUB
JSR LINE_22000
JMP LINE_47346
LINE_SKIP296:
LINE_47350:
JSR GOSUB
JSR LINE_34500
LDA #<CONST_116
LDY #>CONST_116
JSR STROUTBRKWL
JSR COMPACT30
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_22
JMP (JUMP_TARGET)
RBEQ_22:
LINE_47360:
JMP RETURN
LINE_47400:
LINE_47410:
LDY #4
LDA #0
STY VAR_MD%
STA VAR_MD%+1
LDY #0
TYA
STY VAR_CS%
STA VAR_CS%+1
STY VAR_CI%
STA VAR_CI%+1
LINE_47420:
LDA #$01
JSR COMPACT177
JSR ICMP
BEQ EQ_EQ98
LDA #0
JMP EQ_SKIP98
EQ_EQ98:
LDA #$1
EQ_SKIP98:
COMP_SKP137:
BNE LINE_NSKIP297
JMP LINE_SKIP297
LINE_NSKIP297:
LDY VAR_AL%
LDA VAR_AL%+1
JSR SUPERFIINX
STY VAR_AL%
STA VAR_AL%+1
LDA #$0a
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_AL%
LDA VAR_AL%+1
JSR ICMP
ROL
BCS GT_GT99
LDA #0
JMP GT_SKIP99
GT_GT99:
LDA #$1
GT_SKIP99:
COMP_SKP138:
BEQ LINE_SKIP298
LINE_NSKIP298:
LDA #<CONST_77R
LDY #>CONST_77R
JSR COPY2_XYA_YREG
JSR YREGFAC
JSR FACINT
STY VAR_AL%
STA VAR_AL%+1
LINE_SKIP298:
LINE_SKIP297:
LINE_47430:
JSR GOSUB
JSR LINE_47900
LDA #$02
JSR COMPACT104
EQ_EQ100:
EQ_SKIP100:
COMP_SKP139:
BNE LINE_SKIP299
LINE_NSKIP299:
JMP RETURN
LINE_SKIP299:
LINE_47432:
LDA #<CONST_1R
LDY #>CONST_1R
JSR COPY2_XYA_XREG
LDA #<CONST_9
LDY #>CONST_9
JSR COPY2_XYA_YREG
LDA #<VAR_CK%[]
LDY #>VAR_CK%[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_INTEGER
LDA #<CONST_2R
LDY #>CONST_2R
JSR COPY2_XYA_XREG
LDA #<CONST_9
LDY #>CONST_9
JSR COPY2_XYA_YREG
LDA #<VAR_CK%[]
LDY #>VAR_CK%[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_INTEGER
LDY #0
TYA
STY VAR_II%
STA VAR_II%+1
LINE_47435:
JSR COMPACT28
LDA #<CONST_20R
LDY #>CONST_20R
JSR COMPACT13
LDA #<FORLOOP22
STA JUMP_TARGET
LDA #>FORLOOP22
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP22:
JSR COMPACT178
JSR ARRAYACCESS_INTEGER_SI
STY VAR_CC%
STA VAR_CC%+1
LDA #$01
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_CC%
LDA VAR_CC%+1
JSR ICMP
BEQ LT_LT_EQ101
ROL
BCC LT_LT101
LT_LT_EQ101:
LDA #0
JMP LT_SKIP101
LT_LT101:
LDA #$1
LT_SKIP101:
COMP_SKP140:
BEQ LINE_SKIP300
LINE_NSKIP300:
JMP LINE_47455
LINE_SKIP300:
LINE_47440:
LDA #$02
JSR COMPACT174
JSR ICMP
BEQ LT_LT_EQ102
ROL
BCC LT_LT102
LT_LT_EQ102:
LDA #0
JMP LT_SKIP102
LT_LT102:
LDA #$1
LT_SKIP102:
COMP_SKP141:
BNE LINE_NSKIP301
JMP LINE_SKIP301
LINE_NSKIP301:
LDY VAR_CC%
LDA VAR_CC%+1
STY AS_TMP
STA AS_TMP+1
LDA #<VAR_CK%[]
LDY #>VAR_CK%[]
STA G_REG
STY G_REG+1
LDY VAR_II%
LDA VAR_II%+1
JSR ARRAYSTORE_INT_INTEGER_AC
JSR COMPACT65
JMP LINE_47455
LINE_SKIP301:
LINE_47445:
LDA #0
STA VAR_P
STA VAR_P+1
STA VAR_P+2
STA VAR_P+3
STA VAR_P+4
LDA #<CONST_2R
LDY #>CONST_2R
JSR REALFACPUSH
LDA #<CONST_2R
LDY #>CONST_2R
JSR COMPACT152
LDA #<FORLOOP23
STA JUMP_TARGET
LDA #>FORLOOP23
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP23:
LDY VAR_CC%
LDA VAR_CC%+1
JSR COMPACT35
LDA #<X_REG
LDY #>X_REG
JSR REALFACPUSH
LDA #<VAR_P
LDY #>VAR_P
JSR COPY2_XYA_XREG
LDA #<VAR_CK%[]
LDY #>VAR_CK%[]
JSR ARRAYACCESS_INTEGER_S
JSR XREGFAC
JSR BASINT
JSR FACXREG
LDA #<VAR_CV%[]
LDY #>VAR_CV%[]
JSR ARRAYACCESS_INTEGER_SNX
JSR COMPACT25
BEQ LT_LT_EQ103
ROL
BCC LT_LT103
LT_LT_EQ103:
LDA #0
JMP LT_SKIP103
LT_LT103:
LDA #$1
LT_SKIP103:
COMP_SKP142:
BNE LINE_NSKIP302
JMP LINE_SKIP302
LINE_NSKIP302:
LDA #<VAR_P
LDY #>VAR_P
JSR COPY2_XYA_XREG
LDY VAR_CC%
LDA VAR_CC%+1
STY AS_TMP
STA AS_TMP+1
LDA #<VAR_CK%[]
LDY #>VAR_CK%[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_INT_INTEGER
LDY VAR_II%
LDA VAR_II%+1
JSR INTFAC
LDX #<VAR_P
LDY #>VAR_P
JSR FACMEM
LDY #0
TYA
STY A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_23
JMP (JUMP_TARGET)
RBEQ_23:
LINE_SKIP302:
LINE_47455:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_24
JMP (JUMP_TARGET)
RBEQ_24:
LDA #$01
JSR COMPACT71
ROL
BCS GT_GT104
LDA #0
JMP GT_SKIP104
GT_GT104:
LDA #$1
GT_SKIP104:
COMP_SKP145:
BEQ LINE_SKIP303
LINE_NSKIP303:
JMP LINE_47470
LINE_SKIP303:
LINE_47460:
LDY VAR_II%
LDA VAR_II%+1
JSR INTFAC
LDX #<VAR_I
LDY #>VAR_I
JSR FACMEM
LDA #<CONST_2R
LDY #>CONST_2R
JSR COMPACT13
LDA #<FORLOOP24
STA JUMP_TARGET
LDA #>FORLOOP24
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP24:
JSR GOSUB
JSR LINE_57200
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDY VAR_RS%
LDA VAR_RS%+1
STY AS_TMP
STA AS_TMP+1
LDA #<VAR_CK%[]
LDY #>VAR_CK%[]
JSR COMPACT58
JSR NEXT
LDA A_REG
BNE RBEQ_25
JMP (JUMP_TARGET)
RBEQ_25:
LINE_47470:
JMP RETURN
LINE_47500:
LINE_47505:
JSR GOSUB
JSR LINE_57250
LDY #3
JSR COMPACT3
LINE_47510:
LDY #1
LDA #0
STY VAR_RW%
STA VAR_RW%+1
LDY #255
LDA #255
STY VAR_DR%
STA VAR_DR%+1
JSR GOSUB
JSR LINE_48000
LINE_47520:
LDY VAR_S1%
LDA VAR_S1%+1
STY TMP3_ZP
STA TMP3_ZP+1
LDY VAR_OV%
LDA VAR_OV%+1
JSR INTADDVAR
JSR FACINT
STY VAR_S1%
STA VAR_S1%+1
LDY #5
LDA #0
STY VAR_CC%
STA VAR_CC%+1
JSR GOSUB
JSR LINE_47800
LDA #$00
JSR COMPACT104
NEQ_NEQ105:
NEQ_SKIP105:
COMP_SKP147:
BEQ LINE_SKIP304
LINE_NSKIP304:
JSR GOSUB
JSR LINE_47400
JMP RETURN
LINE_SKIP304:
LINE_47530:
LDY #0
TYA
STY VAR_RW%
STA VAR_RW%+1
LDY #1
LDA #0
STY VAR_DR%
STA VAR_DR%+1
JSR GOSUB
JSR LINE_48000
LINE_47535:
LDY VAR_UR%
LDA VAR_UR%+1
JSR SUPERFIINX
STY VAR_UR%
STA VAR_UR%+1
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_OV%
LDA VAR_OV%+1
JSR ICMP
ROL
BCS GT_GT106
LDA #0
JMP GT_SKIP106
GT_GT106:
LDA #$1
GT_SKIP106:
COMP_SKP148:
BEQ LINE_SKIP305
LINE_NSKIP305:
LDY #0
TYA
STY VAR_UR%
STA VAR_UR%+1
LINE_SKIP305:
LINE_47540:
LDY VAR_S2%
LDA VAR_S2%+1
STY TMP3_ZP
STA TMP3_ZP+1
LDY VAR_OV%
LDA VAR_OV%+1
JSR INTADDVAR
JSR FACINT
STY VAR_S2%
STA VAR_S2%+1
LDY #2
LDA #0
STY VAR_CC%
STA VAR_CC%+1
JSR GOSUB
JSR LINE_47800
LDA #$00
JSR COMPACT104
NEQ_NEQ107:
NEQ_SKIP107:
COMP_SKP149:
BEQ LINE_SKIP306
LINE_NSKIP306:
JSR GOSUB
JSR LINE_47400
JMP RETURN
LINE_SKIP306:
LINE_47550:
JSR GOSUB
JSR LINE_58000
JSR GOSUB
JSR LINE_49550
JSR GOSUB
JSR LINE_52000
LDY #0
TYA
STY VAR_MD%
STA VAR_MD%+1
STY VAR_CS%
STA VAR_CS%+1
LDY #0
TYA
STY VAR_CI%
STA VAR_CI%+1
JMP RETURN
LINE_47600:
LINE_47610:
LDY #24
LDA #0
STY VAR_CY%
STA VAR_CY%+1
LDY #13
LDA #0
STY VAR_CX%
STA VAR_CX%+1
LINE_47620:
JSR GOSUB
JSR LINE_57400
JMP RETURN
LINE_47700:
LINE_47705:
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_OV%
LDA VAR_OV%+1
JSR ICMP
EQ_EQ108:
EQ_SKIP108:
COMP_SKP150:
BNE LINE_SKIP307
LINE_NSKIP307:
JMP LINE_47730
LINE_SKIP307:
LINE_47710:
LDY 646
LDA #0
STY VAR_P2%
STA VAR_P2%+1
LDY #13
JSR COMPACT69
LDY VAR_CC%
LDA VAR_CC%+1
STY 646
JSR COMPACTMAX
LDA #<CONST_2R
LDY #>CONST_2R
JSR REALFACPUSH
LDY VAR_OV%
LDA VAR_OV%+1
JSR INTFAC
JSR FACYREG
JSR COMPACT2
JSR POPREAL
LDX #<C_REG
LDY #>C_REG
JSR FACMEM
JSR RIGHT
JSR STROUT
LINE_47720:
LDY #1
LDA #0
STY VAR_WT%
STA VAR_WT%+1
JSR GOSUB
JSR LINE_40300
LDY VAR_P2%
LDA VAR_P2%+1
STY 646
LINE_47730:
JSR GOSUB
JSR LINE_47600
JMP RETURN
LINE_47800:
LINE_47810:
LDY VAR_S1%
LDA VAR_S1%+1
STY TMP3_ZP
STA TMP3_ZP+1
LDY VAR_S2%
LDA VAR_S2%+1
JSR INTSUBVAR
JSR FACINT
STY VAR_II%
STA VAR_II%+1
LDA #$28
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_S1%
LDA VAR_S1%+1
JSR ICMP
ROL
BCS GT_GT109
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP GT_SKIP109
GT_GT109:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
GT_SKIP109:
JSR REALFACPUSH
LDA #$08
JSR COMPACT71
BEQ GTEQ_GTEQ110
BCS GTEQ_GTEQ110
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP GTEQ_SKIP110
GTEQ_GTEQ110:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
GTEQ_SKIP110:
JSR COMPACT26
COMP_SKP151:
BEQ LINE_SKIP308
LINE_NSKIP308:
LDY #1
LDA #0
STY VAR_WN%
STA VAR_WN%+1
JMP LINE_47830
LINE_SKIP308:
LINE_47820:
LDA #$28
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_S2%
LDA VAR_S2%+1
JSR ICMP
ROL
BCS GT_GT111
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP GT_SKIP111
GT_GT111:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
GT_SKIP111:
JSR REALFACPUSH
LDA #$f8
LDY #$ff
JSR COMPACT72
BCC LTEQ_LTEQ112
BEQ LTEQ_LTEQ112
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP LTEQ_SKIP112
LTEQ_LTEQ112:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
LTEQ_SKIP112:
JSR COMPACT26
COMP_SKP152:
BEQ LINE_SKIP309
LINE_NSKIP309:
LDY #2
LDA #0
STY VAR_WN%
STA VAR_WN%+1
LINE_SKIP309:
LINE_47830:
JSR GOSUB
JSR LINE_47700
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_TP%
LDA VAR_TP%+1
JSR ICMP
ROL
BCS GT_GT113
LDA #0
JMP GT_SKIP113
GT_GT113:
LDA #$1
GT_SKIP113:
COMP_SKP153:
BEQ LINE_SKIP310
LINE_NSKIP310:
JMP RETURN
LINE_SKIP310:
LINE_47832:
LDA #$04
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_UR%
LDA VAR_UR%+1
JSR ICMP
ROL
BCS GT_GT114
LDA #0
JMP GT_SKIP114
GT_GT114:
LDA #$1
GT_SKIP114:
COMP_SKP154:
BEQ LINE_SKIP311
LINE_NSKIP311:
JMP LINE_47840
LINE_SKIP311:
LINE_47835:
JSR COMPACT28
LDA #<CONST_20R
LDY #>CONST_20R
JSR COMPACT13
LDA #<FORLOOP25
STA JUMP_TARGET
LDA #>FORLOOP25
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP25:
JSR COMPACT105
JSR ARRAYACCESS_INTEGER_S
JSR COMPACT1
ROL
BCS GT_GT115
LDA #0
JMP GT_SKIP115
GT_GT115:
LDA #$1
GT_SKIP115:
COMP_SKP155:
BNE LINE_NSKIP312
JMP LINE_SKIP312
LINE_NSKIP312:
LDA #<CONST_1R
LDY #>CONST_1R
JSR COPY2_XYA_YREG
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
JSR COMPACT179
JSR COMPACT108
JSR COMPACT25
ROL
BCS GT_GT116
LDA #0
JMP GT_SKIP116
GT_GT116:
LDA #$1
GT_SKIP116:
COMP_SKP156:
BEQ LINE_SKIP313
LINE_NSKIP313:
JMP RETURN
LINE_SKIP313:
LINE_SKIP312:
LINE_47836:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_26
JMP (JUMP_TARGET)
RBEQ_26:
LINE_47840:
LDY #1
LDA #0
STY VAR_WN%
STA VAR_WN%+1
LDY #8
JSR COMPACT3
JMP RETURN
LINE_47900:
LINE_47910:
LDY VAR_AL%
LDA VAR_AL%+1
JSR INTFAC
JSR FACYREG
LDY #1
JSR COMPACT31
JSR FACXREG
JSR YREGFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFADDMEM
JSR FACINT
STY VAR_A%
STA VAR_A%+1
LDA #<VAR_SK%[]
LDY #>VAR_SK%[]
STA G_REG
STY G_REG+1
LDY VAR_A%
LDA VAR_A%+1
JSR ARRAYACCESS_INTEGER_INT_SI
STY VAR_TP%
STA VAR_TP%+1
LDY VAR_A%
LDA VAR_A%+1
JSR FIINX
LDA #<VAR_SK%[]
LDY #>VAR_SK%[]
JSR ARRAYACCESS_INTEGER_S
LDA #<CONST_77R
LDY #>CONST_77R
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
JSR FACDIV
LDX #<VAR_FQ
LDY #>VAR_FQ
JSR FACMEM
LDY #$00
LDA #$02
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_A%
LDA VAR_A%+1
JSR INTADD
JSR FACXREG
LDA #<VAR_SK%[]
LDY #>VAR_SK%[]
JSR ARRAYACCESS_INTEGER_SI
STY VAR_HF%
STA VAR_HF%+1
LINE_47920:
JMP RETURN
LINE_48000:
LINE_48010:
LDY VAR_RW%
LDA VAR_RW%+1
STY A_REG
STA A_REG+1
LDY #2
JSR INTSHL
JSR INTFAC
JSR COMPACT39
JSR FASTFADDMEM
JSR FACINT
STY VAR_I2%
STA VAR_I2%+1
LDY #$00
LDA #$03
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_I2%
LDA VAR_I2%+1
JSR INTADD
JSR INTCONV
STY VAR_I3%
STA VAR_I3%+1
LINE_48015:
LDY #0
TYA
STY VAR_OV%
STA VAR_OV%+1
JSR COMPACT114
LDX VAR_I2%
STX TMP3_ZP
LDX VAR_I2%+1
STX TMP3_ZP+1
JSR INTADD
JSR INTCONV
STY VAR_I4%
STA VAR_I4%+1
LDY VAR_DR%
LDA VAR_DR%+1
STY A_REG
STA A_REG+1
LDY #2
JSR INTSHL
LDX VAR_I3%
STX TMP3_ZP
LDX VAR_I3%+1
STX TMP3_ZP+1
JSR INTADD
JSR INTCONV
STY VAR_I5%
STA VAR_I5%+1
LINE_48020:
LDA #<VAR_PF%[]
LDY #>VAR_PF%[]
JSR COMPACT60
STY VAR_CN%
STA VAR_CN%+1
LDA #<VAR_HP%[]
LDY #>VAR_HP%[]
JSR COMPACT60
STY VAR_HH%
STA VAR_HH%+1
LDA #$ff
LDY #$ff
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_CN%
LDA VAR_CN%+1
JSR ICMP
EQ_EQ117:
EQ_SKIP117:
COMP_SKP158:
BNE LINE_SKIP314
LINE_NSKIP314:
JMP LINE_48210
LINE_SKIP314:
LINE_48022:
LDY VAR_CN%
LDA VAR_CN%+1
JSR INTFAC
JSR FACXREG
LDA #<VAR_CV%[]
LDY #>VAR_CV%[]
JSR ARRAYACCESS_INTEGER_SI
STY VAR_AV%
STA VAR_AV%+1
LDA #<CONST_36R
LDY #>CONST_36R
JSR REALFACPUSH
LDY VAR_CN%
LDA VAR_CN%+1
JSR COMPACT8
JSR ARRAYACCESS_INTEGER_SI
STY VAR_SG%
STA VAR_SG%+1
JSR COMPACT114
LDX VAR_I2%
STX TMP3_ZP
LDX VAR_I2%+1
STX TMP3_ZP+1
JSR INTADD
JSR INTCONV
STY VAR_IB%
STA VAR_IB%+1
LINE_48025:
LDA #$00
LDY #$00
JSR COMPACT52
EQ_EQ118:
EQ_SKIP118:
COMP_SKP159:
BNE LINE_SKIP315
LINE_NSKIP315:
JMP LINE_48210
LINE_SKIP315:
LINE_48030:
LDY VAR_IB%
LDA VAR_IB%+1
STY VAR_P0%
STA VAR_P0%+1
LDY VAR_IB%
LDA VAR_IB%+1
STY VAR_P1%
STA VAR_P1%+1
LDY #0
TYA
STY VAR_P2%
STA VAR_P2%+1
LINE_48040:
LDA #$07
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_SG%
LDA VAR_SG%+1
JSR ICMP
BEQ EQ_EQ119
LDA #0
JMP EQ_SKIP119
EQ_EQ119:
LDA #$1
EQ_SKIP119:
COMP_SKP160:
BNE LINE_NSKIP316
JMP LINE_SKIP316
LINE_NSKIP316:
LDY VAR_P0%
LDA VAR_P0%+1
JSR SUPERFIDEX
STY VAR_P0%
STA VAR_P0%+1
LDY VAR_P1%
LDA VAR_P1%+1
JSR SUPERFIINX
STY VAR_P1%
STA VAR_P1%+1
LDY #2
LDA #0
STY VAR_P2%
STA VAR_P2%+1
LINE_SKIP316:
LINE_48050:
LDA #$08
JSR COMPACT117
BEQ EQ_EQ120
LDA #0
JMP EQ_SKIP120
EQ_EQ120:
LDA #$1
EQ_SKIP120:
COMP_SKP161:
BNE LINE_NSKIP317
JMP LINE_SKIP317
LINE_NSKIP317:
LDY VAR_P0%
LDA VAR_P0%+1
JSR SUPERFIDEX
STY VAR_P0%
STA VAR_P0%+1
LDY VAR_P1%
LDA VAR_P1%+1
JSR SUPERFIINX
STY VAR_P1%
STA VAR_P1%+1
LDY #1
LDA #0
STY VAR_P2%
STA VAR_P2%+1
LINE_SKIP317:
LINE_48060:
LDY VAR_I4%
LDA VAR_I4%+1
STY TMP_ZP
STA TMP_ZP+1
LDY VAR_P0%
LDA VAR_P0%+1
JSR ICMP
BEQ LT_LT_EQ121
ROL
BCC LT_LT121
LT_LT_EQ121:
LDA #0
JMP LT_SKIP121
LT_LT121:
LDA #$1
LT_SKIP121:
COMP_SKP162:
BNE LINE_NSKIP318
JMP LINE_SKIP318
LINE_NSKIP318:
LDY VAR_P0%
LDA VAR_P0%+1
STY TMP3_ZP
STA TMP3_ZP+1
LDY VAR_P2%
LDA VAR_P2%+1
JSR INTADDVAR
JSR FACINT
STY VAR_P0%
STA VAR_P0%+1
LINE_SKIP318:
LINE_48070:
LDY VAR_I5%
LDA VAR_I5%+1
STY TMP_ZP
STA TMP_ZP+1
LDY VAR_P1%
LDA VAR_P1%+1
JSR ICMP
ROL
BCS GT_GT122
LDA #0
JMP GT_SKIP122
GT_GT122:
LDA #$1
GT_SKIP122:
COMP_SKP163:
BNE LINE_NSKIP319
JMP LINE_SKIP319
LINE_NSKIP319:
LDY VAR_P1%
LDA VAR_P1%+1
STY TMP3_ZP
STA TMP3_ZP+1
LDY VAR_P2%
LDA VAR_P2%+1
JSR INTSUBVAR
JSR FACINT
STY VAR_P1%
STA VAR_P1%+1
LINE_SKIP319:
LINE_48080:
LDY VAR_P0%
LDA VAR_P0%+1
STY VAR_IB%
STA VAR_IB%+1
STY VAR_IO%
STA VAR_IO%+1
LINE_48090:
LDA #<VAR_PF%[]
LDY #>VAR_PF%[]
STA G_REG
STY G_REG+1
LDY VAR_IB%
LDA VAR_IB%+1
JSR ARRAYACCESS_INTEGER_INT_SI
STY VAR_CB%
STA VAR_CB%+1
LDA #<VAR_HP%[]
LDY #>VAR_HP%[]
JSR COMPACT119
STY VAR_HP%
STA VAR_HP%+1
LINE_48100:
JSR GOSUB
JSR LINE_50200
LDA #$ff
LDY #$ff
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_CB%
LDA VAR_CB%+1
JSR ICMP
BEQ EQ_EQ123
LDA #0
JMP EQ_SKIP123
EQ_EQ123:
LDA #$1
EQ_SKIP123:
COMP_SKP164:
BNE LINE_NSKIP320
JMP LINE_SKIP320
LINE_NSKIP320:
LDY VAR_OV%
LDA VAR_OV%+1
STY TMP3_ZP
STA TMP3_ZP+1
LDY VAR_AV%
LDA VAR_AV%+1
JSR INTADDVAR
JSR FACINT
STY VAR_OV%
STA VAR_OV%+1
JMP LINE_48200
LINE_SKIP320:
LINE_48110:
LDA #<CONST_36R
LDY #>CONST_36R
JSR REALFACPUSH
LDY VAR_CB%
LDA VAR_CB%+1
JSR COMPACT8
JSR ARRAYACCESS_INTEGER_SI
STY VAR_AS%
STA VAR_AS%+1
LDY VAR_AV%
LDA VAR_AV%+1
STY VAR_TV%
STA VAR_TV%+1
JSR GOSUB
JSR LINE_49500
JSR GOSUB
JSR LINE_49900
LDY VAR_HP%
LDA VAR_HP%+1
STY TMP3_ZP
STA TMP3_ZP+1
LDY VAR_AV%
LDA VAR_AV%+1
JSR INTSUBVAR
JSR FACINT
STY VAR_HP%
STA VAR_HP%+1
LDY VAR_TV%
LDA VAR_TV%+1
STY VAR_AV%
STA VAR_AV%+1
LINE_48120:
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_HP%
LDA VAR_HP%+1
JSR ICMP
BCC LTEQ_LTEQ124
BEQ LTEQ_LTEQ124
LDA #0
JMP LTEQ_SKIP124
LTEQ_LTEQ124:
LDA #$1
LTEQ_SKIP124:
COMP_SKP165:
BNE LINE_NSKIP321
JMP LINE_SKIP321
LINE_NSKIP321:
JSR GOSUB
JSR LINE_49000
LDY VAR_OV%
LDA VAR_OV%+1
STY TMP3_ZP
STA TMP3_ZP+1
LDY VAR_HP%
LDA VAR_HP%+1
JSR INTSUBVAR
JSR FACINT
STY VAR_OV%
STA VAR_OV%+1
JMP LINE_48200
LINE_SKIP321:
LINE_48130:
LDY VAR_HP%
LDA VAR_HP%+1
JSR COMPACT57
LDY VAR_IB%
LDA VAR_IB%+1
JSR ARRAYSTORE_INT_INTEGER_AC
JSR GOSUB
JSR LINE_49300
LDY VAR_CB%
LDA VAR_CB%+1
STY VAR_CN%
STA VAR_CN%+1
LDA #$00
LDY #$00
JSR COMPACT52
NEQ_NEQ125:
NEQ_SKIP125:
COMP_SKP166:
BEQ LINE_SKIP322
LINE_NSKIP322:
JSR GOSUB
JSR LINE_49470
LINE_SKIP322:
LINE_48200:
LDY VAR_IB%
LDA VAR_IB%+1
STY TMP3_ZP
STA TMP3_ZP+1
LDY VAR_P2%
LDA VAR_P2%+1
JSR INTADDVAR
JSR FACINT
STY VAR_IB%
STA VAR_IB%+1
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_HH%
LDA VAR_HH%+1
JSR ICMP
ROL
BCS GT_GT126
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP GT_SKIP126
GT_GT126:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
GT_SKIP126:
JSR REALFACPUSH
LDY VAR_P1%
LDA VAR_P1%+1
STY TMP_ZP
STA TMP_ZP+1
LDY VAR_IB%
LDA VAR_IB%+1
JSR ICMP
BCC LTEQ_LTEQ127
BEQ LTEQ_LTEQ127
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP LTEQ_SKIP127
LTEQ_LTEQ127:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
LTEQ_SKIP127:
JSR REALFACPUSH
LDY VAR_IO%
LDA VAR_IO%+1
STY TMP_ZP
STA TMP_ZP+1
LDY VAR_IB%
LDA VAR_IB%+1
JSR ICMP
BNE NEQ_NEQ128
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP NEQ_SKIP128
NEQ_NEQ128:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
NEQ_SKIP128:
JSR REALFAC
JSR FACXREG
JSR POPREAL2X
JSR FASTAND
JSR FACXREG
JSR POPREAL2X
JSR FASTAND
JSR FACXREG
LDA X_REG
COMP_SKP167:
BEQ LINE_SKIP323
LINE_NSKIP323:
JMP LINE_48090
LINE_SKIP323:
LINE_48210:
LDY VAR_I2%
LDA VAR_I2%+1
JSR SUPERFIINX
STY VAR_I2%
STA VAR_I2%+1
LDY VAR_I3%
LDA VAR_I3%+1
STY TMP_ZP
STA TMP_ZP+1
LDY VAR_I2%
LDA VAR_I2%+1
JSR ICMP
BCC LTEQ_LTEQ129
BEQ LTEQ_LTEQ129
LDA #0
JMP LTEQ_SKIP129
LTEQ_LTEQ129:
LDA #$1
LTEQ_SKIP129:
COMP_SKP168:
BEQ LINE_SKIP324
LINE_NSKIP324:
JMP LINE_48020
LINE_SKIP324:
LINE_48215:
LDA #$09
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_OV%
LDA VAR_OV%+1
JSR ICMP
ROL
BCS GT_GT130
LDA #0
JMP GT_SKIP130
GT_GT130:
LDA #$1
GT_SKIP130:
COMP_SKP169:
BEQ LINE_SKIP325
LINE_NSKIP325:
LDY #9
LDA #0
STY VAR_OV%
STA VAR_OV%+1
LINE_SKIP325:
LINE_48220:
JMP RETURN
LINE_48300:
LINE_48310:
LDY #1
LDA #0
STY VAR_C%
STA VAR_C%+1
JSR GOSUB
JSR LINE_49300
LDY #$00
LDA #$03
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_CX%
LDA VAR_CX%+1
JSR INTADD
JSR INTCONV
STY VAR_CX%
STA VAR_CX%+1
LDY #15
LDA #0
STY VAR_CY%
STA VAR_CY%+1
LDY #1
LDA #0
STY VAR_DR%
STA VAR_DR%+1
STY VAR_DA%
STA VAR_DA%+1
JSR GOSUB
JSR LINE_46600
JSR GOSUB
JSR LINE_49400
LINE_48320:
JMP RETURN
LINE_48400:
LINE_48410:
LDA #$01
JSR COMPACT177
JSR ICMP
BNE NEQ_NEQ131
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP NEQ_SKIP131
NEQ_NEQ131:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
NEQ_SKIP131:
JSR REALFACPUSH
LDA #$63
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_PN%
LDA VAR_PN%+1
JSR ICMP
BEQ GTEQ_GTEQ132
BCS GTEQ_GTEQ132
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP GTEQ_SKIP132
GTEQ_GTEQ132:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
GTEQ_SKIP132:
JSR COMPACT26
COMP_SKP170:
BEQ LINE_SKIP326
LINE_NSKIP326:
JMP RETURN
LINE_SKIP326:
LINE_48420:
JSR GOSUB
JSR LINE_29800
LDY #7
LDA #0
STY VAR_XC%
STA VAR_XC%+1
LINE_48440:
JSR COMPACT27
LDA #<CONST_2R
LDY #>CONST_2R
JSR REALFACPUSH
LDA #<CONST_2R
LDY #>CONST_2R
JSR REALFACPUSH
LDA #<VAR_II
LDY #>VAR_II
STA A_REG
STY A_REG+1
LDA #<FORLOOP26
STA JUMP_TARGET
LDA #>FORLOOP26
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP26:
LDA #<VAR_II
LDY #>VAR_II
JSR COPY2_XYA_XREG
LDA #<VAR_CK%[]
LDY #>VAR_CK%[]
JSR ARRAYACCESS_INTEGER_SI
STY VAR_CN%
STA VAR_CN%+1
LDY #255
LDA #255
STY VAR_HP%
STA VAR_HP%+1
LDY #4
LDA #0
STY VAR_YC%
STA VAR_YC%+1
JSR GOSUB
JSR LINE_30000
LINE_48450:
LDY #$00
LDA #$07
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_XC%
LDA VAR_XC%+1
JSR INTADD
JSR INTCONV
STY VAR_XC%
STA VAR_XC%+1
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_27
JMP (JUMP_TARGET)
RBEQ_27:
LDY #7
JSR COMPACT3
LINE_48460:
JSR GOSUB
JSR LINE_35850
LINE_48470:
LDY #8
LDA #0
STY VAR_CX%
STA VAR_CX%+1
LDY #4
JSR COMPACT70
LDA #49
JSR SINGLECHROUTBRKMAX
LINE_48480:
LDY #15
LDA #0
STY VAR_CX%
STA VAR_CX%+1
JSR GOSUB
JSR LINE_34500
LDA #50
JSR SINGLECHROUTBRKMAX
LINE_48490:
JSR GOSUB
JSR LINE_36000
LDA #<CONST_104
LDY #>CONST_104
JSR COMPACT62
JSR SGT
LDY #>X_REG
LDA #<X_REG
JSR REALFACPUSH
LDA #<CONST_105
LDY #>CONST_105
JSR COMPACT62
JSR SLT
JSR POPREAL2X
JSR FASTOR
JSR FACXREG
LDA X_REG
COMP_SKP172:
BEQ LINE_SKIP327
LINE_NSKIP327:
JMP LINE_48460
LINE_SKIP327:
LINE_48500:
JSR GOSUB
JSR LINE_50900
LDA VAR_A$
LDY VAR_A$+1
STA B_REG
STY B_REG+1
JSR VAL
JSR ONETOFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFSUBMEM
JSR FACINT
STY VAR_II%
STA VAR_II%+1
LDY VAR_PN%
LDA VAR_PN%+1
JSR INTFAC
JSR PUSHREAL
LDA #<VAR_CK%[]
LDY #>VAR_CK%[]
JSR COMPACT85
LDA #<VAR_CP%[]
LDY #>VAR_CP%[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_INTEGER_NX
LDY VAR_PN%
LDA VAR_PN%+1
JSR SUPERFIINX
STY VAR_PN%
STA VAR_PN%+1
LINE_48510:
LDY #4
LDA #0
STY VAR_CY%
STA VAR_CY%+1
LDY VAR_II%
LDA VAR_II%+1
JSR INTFAC
LDA #<CONST_20R
LDY #>CONST_20R
JSR COPY2_XYA_XREG
LDA #<X_REG
LDY #>X_REG
JSR FASTFMULMEM
JSR COMPACT44
JSR FASTFADDMEM
JSR FACINT
STY VAR_CX%
STA VAR_CX%+1
JSR GOSUB
JSR LINE_47300
JMP RETURN
LINE_49000:
LINE_49020:
LDA #$01
LDY #$00
JSR COMPACT101
EQ_EQ133:
EQ_SKIP133:
COMP_SKP173:
BNE LINE_SKIP328
LINE_NSKIP328:
JSR GOSUB
JSR LINE_48300
LINE_SKIP328:
LINE_49030:
JSR GOSUB
JSR LINE_49300
JSR GOSUB
JSR LINE_50600
JSR GOSUB
JSR LINE_47300
LINE_49040:
LDY VAR_IB%
LDA VAR_IB%+1
JSR COMPACT86
JSR COMPACT56
JMP RETURN
LINE_49300:
LINE_49310:
LDY #2
LDA #0
STY A_REG
STA A_REG+1
LDY VAR_IB%
LDA VAR_IB%+1
JSR INTFAC
JSR SHR
JSR BASINT
JSR FACXREG
LDY #2
STY A_REG
JSR SHL
JSR FACYREG
LDY VAR_IB%
LDA VAR_IB%+1
JSR COMPACT18
JSR FASTFSUBMEM
JSR COMPACT45
JSR FACINT
STY VAR_CX%
STA VAR_CX%+1
LDY VAR_DR%
LDA VAR_DR%+1
JSR COMPACT113
JSR FACXREG
LDA #<CONST_5R
LDY #>CONST_5R
JSR COMPACT96
STY VAR_CY%
STA VAR_CY%+1
JMP RETURN
LINE_49330:
LINE_49340:
JSR GOSUB
JSR LINE_49300
LDY #4
LDA #0
STY VAR_CY%
STA VAR_CY%+1
LDA #$07
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_IB%
LDA VAR_IB%+1
JSR ICMP
ROL
BCS GT_GT134
LDA #0
JMP GT_SKIP134
GT_GT134:
LDA #$1
GT_SKIP134:
COMP_SKP174:
BEQ LINE_SKIP329
LINE_NSKIP329:
LDY #12
LDA #0
STY VAR_CY%
STA VAR_CY%+1
LINE_SKIP329:
LINE_49345:
JMP RETURN
LINE_49350:
LINE_49355:
LDY VAR_DR%
LDA VAR_DR%+1
JSR INTFAC
JSR NEG
JSR FACINT
STY VAR_DR%
STA VAR_DR%+1
LDY VAR_IB%
LDA VAR_IB%+1
STY VAR_IT%
STA VAR_IT%+1
LDY VAR_I2%
LDA VAR_I2%+1
STY VAR_IB%
STA VAR_IB%+1
JSR GOSUB
JSR LINE_49300
LDY VAR_IT%
LDA VAR_IT%+1
STY VAR_IB%
STA VAR_IB%+1
LDY VAR_DR%
LDA VAR_DR%+1
JSR INTFAC
JSR NEG
JSR FACINT
STY VAR_DR%
STA VAR_DR%+1
JMP RETURN
LINE_49360:
LINE_49365:
LDA #$0d
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_AS%
LDA VAR_AS%+1
JSR ICMP
BEQ EQ_EQ135
LDA #0
JMP EQ_SKIP135
EQ_EQ135:
LDA #$1
EQ_SKIP135:
COMP_SKP175:
BNE LINE_NSKIP330
JMP LINE_SKIP330
LINE_NSKIP330:
LDY VAR_DA%
LDA VAR_DA%+1
JSR INTFAC
JSR FACYREG
LDY #1
JSR COMPACT31
JSR COMPACT99
LDY VAR_HC%
LDA VAR_HC%+1
JSR COMPACT49
STY VAR_HC%
STA VAR_HC%+1
JMP RETURN
LINE_SKIP330:
LINE_49368:
LDY VAR_HC%
LDA VAR_HC%+1
STY TMP3_ZP
STA TMP3_ZP+1
LDY VAR_DA%
LDA VAR_DA%+1
JSR INTADDVAR
JSR FACINT
STY VAR_HC%
STA VAR_HC%+1
JMP RETURN
LINE_49370:
LINE_49375:
LDA #$0e
JSR COMPACT124
BEQ EQ_EQ136
LDA #0
JMP EQ_SKIP136
EQ_EQ136:
LDA #$1
EQ_SKIP136:
COMP_SKP176:
BNE LINE_NSKIP331
JMP LINE_SKIP331
LINE_NSKIP331:
LDY VAR_DA%
LDA VAR_DA%+1
JSR INTFAC
JSR FACYREG
LDY #1
JSR COMPACT31
JSR COMPACT99
LDY VAR_BC%
LDA VAR_BC%+1
JSR COMPACT49
STY VAR_BC%
STA VAR_BC%+1
JMP RETURN
LINE_SKIP331:
LINE_49380:
LDY VAR_BC%
LDA VAR_BC%+1
STY TMP3_ZP
STA TMP3_ZP+1
LDY VAR_DA%
LDA VAR_DA%+1
JSR INTADDVAR
JSR FACINT
STY VAR_BC%
STA VAR_BC%+1
JMP RETURN
LINE_49400:
LINE_49410:
JSR GOSUB
JSR LINE_49370
JSR GOSUB
JSR LINE_46500
JMP RETURN
LINE_49450:
LINE_49460:
JMP RETURN
LINE_49470:
LINE_49480:
LDY VAR_CX%
LDA VAR_CX%+1
STY VAR_XC%
STA VAR_XC%+1
LDY VAR_CY%
LDA VAR_CY%+1
STY VAR_YC%
STA VAR_YC%+1
LDY VAR_CX%
LDA VAR_CX%+1
STY VAR_X1%
STA VAR_X1%+1
LDY VAR_CY%
LDA VAR_CY%+1
STY VAR_Y1%
STA VAR_Y1%+1
JSR GOSUB
JSR LINE_30010
LDY VAR_Y1%
LDA VAR_Y1%+1
STY VAR_CY%
STA VAR_CY%+1
LDY VAR_X1%
LDA VAR_X1%+1
STY VAR_CX%
STA VAR_CX%+1
JMP RETURN
LINE_49500:
LINE_49510:
LDY VAR_AS%
LDA VAR_AS%+1
STY TMP_ZP
ON4SUB0:
LDX #1
CPX TMP_ZP
COMP_SKP177:
BNE ON4SUB1
JSR GOSUB
JSR LINE_49600
JMP GSKIPON4
ON4SUB1:
INX
CPX TMP_ZP
COMP_SKP178:
BNE ON4SUB2
JSR GOSUB
JSR LINE_49450
JMP GSKIPON4
ON4SUB2:
INX
CPX TMP_ZP
COMP_SKP179:
BNE ON4SUB3
JSR GOSUB
JSR LINE_49650
JMP GSKIPON4
ON4SUB3:
INX
CPX TMP_ZP
COMP_SKP180:
BNE ON4SUB4
JSR GOSUB
JSR LINE_49700
JMP GSKIPON4
ON4SUB4:
INX
CPX TMP_ZP
COMP_SKP181:
BNE ON4SUB5
JSR GOSUB
JSR LINE_49750
JMP GSKIPON4
ON4SUB5:
INX
CPX TMP_ZP
COMP_SKP182:
BNE ON4SUB6
JSR GOSUB
JSR LINE_49800
JMP GSKIPON4
ON4SUB6:
INX
CPX TMP_ZP
COMP_SKP183:
BNE ON4SUB7
JSR GOSUB
JSR LINE_49450
JMP GSKIPON4
ON4SUB7:
INX
CPX TMP_ZP
COMP_SKP184:
BNE ON4SUB8
JSR GOSUB
JSR LINE_49450
JMP GSKIPON4
ON4SUB8:
INX
CPX TMP_ZP
COMP_SKP185:
BNE GSKIPON4
JSR GOSUB
JSR LINE_49850
JMP GSKIPON4
GSKIPON4:
LINE_49520:
JMP RETURN
LINE_49550:
LINE_49555:
LDX #4
dcloop3345_1:
LDA CONST_14R,X
STA VAR_P0,X
LDA CONST_20R,X
STA VAR_P1,X
DEX
BPL dcloop3345_1
JSR GOSUB
JSR LINE_49560
LDX #4
dcloop3345_3:
LDA CONST_5R,X
STA VAR_P0,X
LDA CONST_0R,X
STA VAR_P1,X
DEX
BPL dcloop3345_3
JSR GOSUB
JSR LINE_49560
JMP RETURN
LINE_49559:
LINE_49560:
LDX #4
dcloop3501_1:
LDA VAR_P0,X
STA VAR_IC,X
DEX
BPL dcloop3501_1
LDA #<VAR_P1
LDY #>VAR_P1
JSR REALFACPUSH
LDA #<CONST_2R
LDY #>CONST_2R
JSR REALFACPUSH
LDA #<VAR_IC
LDY #>VAR_IC
STA A_REG
STY A_REG+1
LDA #<FORLOOP27
STA JUMP_TARGET
LDA #>FORLOOP27
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP27:
LDA #<CONST_36R
LDY #>CONST_36R
JSR COPY2_XYA_YREG
LDA #<VAR_IC
LDY #>VAR_IC
JSR COPY2_XYA_XREG
JSR COMPACT179
JSR ARRAYACCESS_INTEGER_S
JSR XREGFAC
JSR BASINT
JSR FACXREG
JSR POPREAL2X
JSR FASTFADDARG
JSR FACXREG
LDA #<VAR_CV%[]
LDY #>VAR_CV%[]
JSR ARRAYACCESS_INTEGER_SI
STY VAR_AS%
STA VAR_AS%+1
LINE_49565:
LDA #$09
JSR COMPACT124
ROL
BCS GT_GT137
LDA #0
JMP GT_SKIP137
GT_GT137:
LDA #$1
GT_SKIP137:
COMP_SKP186:
BNE LINE_NSKIP332
JMP LINE_SKIP332
LINE_NSKIP332:
LDY #$00
LDA #$09
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_AS%
LDA VAR_AS%+1
JSR INTSUB
JSR FACWORD
STY TMP_ZP
ON5SUB0:
LDX #1
CPX TMP_ZP
COMP_SKP187:
BNE ON5SUB1
JSR GOSUB
JSR LINE_51500
JMP GSKIPON5
ON5SUB1:
INX
CPX TMP_ZP
COMP_SKP188:
BNE GSKIPON5
JSR GOSUB
JSR LINE_51600
JMP GSKIPON5
GSKIPON5:
LINE_SKIP332:
LINE_49570:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_28
JMP (JUMP_TARGET)
RBEQ_28:
JMP RETURN
LINE_49600:
LINE_49605:
LDY VAR_HH%
LDA VAR_HH%+1
JSR SUPERFIDEX
STY VAR_HH%
STA VAR_HH%+1
LDY VAR_HH%
LDA VAR_HH%+1
JSR COMPACT57
LDY VAR_I2%
LDA VAR_I2%+1
JSR ARRAYSTORE_INT_INTEGER_AC
LDY VAR_CX%
LDA VAR_CX%+1
STY VAR_P3%
STA VAR_P3%+1
LDY VAR_CY%
LDA VAR_CY%+1
STY VAR_P4%
STA VAR_P4%+1
LINE_49610:
JSR GOSUB
JSR LINE_49350
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_HH%
LDA VAR_HH%+1
JSR ICMP
ROL
BCS GT_GT138
LDA #0
JMP GT_SKIP138
GT_GT138:
LDA #$1
GT_SKIP138:
COMP_SKP190:
BEQ LINE_SKIP333
LINE_NSKIP333:
JMP LINE_49615
LINE_SKIP333:
LINE_49612:
LDY VAR_I2%
LDA VAR_I2%+1
JSR COMPACT86
JSR COMPACT56
JSR COMPACT100
EQ_EQ139:
EQ_SKIP139:
COMP_SKP191:
BNE LINE_SKIP334
LINE_NSKIP334:
JSR GOSUB
JSR LINE_48300
JSR COMPACT109
JSR LINE_49350
LINE_SKIP334:
LINE_49613:
JSR GOSUB
JSR LINE_50600
JSR GOSUB
JSR LINE_47300
JMP LINE_49630
LINE_49615:
LDY VAR_HP%
LDA VAR_HP%+1
STY VAR_IT%
STA VAR_IT%+1
LDY VAR_HH%
LDA VAR_HH%+1
STY VAR_HP%
STA VAR_HP%+1
LDY #2
LDA #0
STY VAR_DC%
STA VAR_DC%+1
JSR GOSUB
JSR LINE_49470
LDY #1
LDA #0
STY VAR_WT%
STA VAR_WT%+1
LINE_49620:
JSR GOSUB
JSR LINE_40300
LDY VAR_HH%
LDA VAR_HH%+1
STY VAR_HP%
STA VAR_HP%+1
JSR COMPACT92
JSR LINE_49470
LDY VAR_IT%
LDA VAR_IT%+1
STY VAR_HP%
STA VAR_HP%+1
LINE_49630:
LDY VAR_P3%
LDA VAR_P3%+1
STY VAR_CX%
STA VAR_CX%+1
LDY VAR_P4%
LDA VAR_P4%+1
STY VAR_CY%
STA VAR_CY%+1
JMP RETURN
LINE_49650:
LINE_49655:
JSR COMPACT122
JSR FACXREG
JSR COMPACT38
BCS GT_GT140
LDA #0
JMP GT_SKIP140
GT_GT140:
LDA #$1
GT_SKIP140:
COMP_SKP192:
BEQ LINE_SKIP335
LINE_NSKIP335:
JMP RETURN
LINE_SKIP335:
LINE_49660:
LDY VAR_CM%
LDA VAR_CM%+1
JSR INTFAC
JSR PUSHREAL
JSR ONETOFAC
JSR FACRND
JSR COMPACT141
JSR FACINT
STY VAR_IT%
STA VAR_IT%+1
LDY #0
TYA
STY VAR_AV%
STA VAR_AV%+1
LDY VAR_IT%
LDA VAR_IT%+1
STY VAR_CN%
STA VAR_CN%+1
LINE_49665:
LDY VAR_IT%
LDA VAR_IT%+1
JSR COMPACT5
LDY VAR_IB%
LDA VAR_IB%+1
JSR ARRAYSTORE_INT_INTEGER_AC
LDA #<CONST_16R
LDY #>CONST_16R
JSR REALFACPUSH
LDY VAR_IT%
LDA VAR_IT%+1
JSR COMPACT8
JSR ARRAYACCESS_INTEGER_SI
STY VAR_HP%
STA VAR_HP%+1
LDY VAR_HP%
LDA VAR_HP%+1
JSR COMPACT57
LDY VAR_IB%
LDA VAR_IB%+1
JSR ARRAYSTORE_INT_INTEGER_AC
LINE_49670:
JSR GOSUB
JSR LINE_50900
JSR GOSUB
JSR LINE_49300
JSR COMPACT92
JSR LINE_49470
LINE_49675:
LDA #<VAR_HP%[]
LDY #>VAR_HP%[]
JSR COMPACT119
STY VAR_HP%
STA VAR_HP%+1
LINE_49680:
LDY VAR_CN%
LDA VAR_CN%+1
STY VAR_CB%
STA VAR_CB%+1
LINE_49690:
JMP RETURN
LINE_49700:
LINE_49710:
LDY VAR_AV%
LDA VAR_AV%+1
JSR SUPERFIDEX
STY VAR_AV%
STA VAR_AV%+1
JMP RETURN
LINE_49750:
LINE_49760:
LDA #$06
JSR COMPACT117
BEQ EQ_EQ141
LDA #0
JMP EQ_SKIP141
EQ_EQ141:
LDA #$1
EQ_SKIP141:
COMP_SKP193:
BNE LINE_NSKIP336
JMP LINE_SKIP336
LINE_NSKIP336:
JSR GOSUB
JSR LINE_50500
JSR COMPACT121
LDY #0
TYA
STY VAR_AV%
STA VAR_AV%+1
LINE_SKIP336:
LINE_49765:
JMP RETURN
LINE_49800:
LINE_49810:
LDA #$05
JSR COMPACT117
BEQ EQ_EQ142
LDA #0
JMP EQ_SKIP142
EQ_EQ142:
LDA #$1
EQ_SKIP142:
COMP_SKP194:
BNE LINE_NSKIP337
JMP LINE_SKIP337
LINE_NSKIP337:
JSR GOSUB
JSR LINE_50400
JSR COMPACT121
LDY #0
TYA
STY VAR_AV%
STA VAR_AV%+1
LINE_SKIP337:
LINE_49815:
JMP RETURN
LINE_49850:
LINE_49852:
JSR COMPACT100
EQ_EQ143:
EQ_SKIP143:
COMP_SKP195:
BNE LINE_SKIP338
LINE_NSKIP338:
JMP RETURN
LINE_SKIP338:
LINE_49855:
LDA #$63
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_PI%
LDA VAR_PI%+1
JSR ICMP
BEQ GTEQ_GTEQ144
BCS GTEQ_GTEQ144
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP GTEQ_SKIP144
GTEQ_GTEQ144:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
GTEQ_SKIP144:
JSR REALFACPUSH
JSR COMPACT122
JSR FACXREG
JSR COMPACT38
BCS GT_GT145
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP GT_SKIP145
GT_GT145:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
GT_SKIP145:
JSR COMPACT26
COMP_SKP196:
BEQ LINE_SKIP339
LINE_NSKIP339:
JMP RETURN
LINE_SKIP339:
LINE_49860:
JSR ONETOFAC
JSR FACRND
JSR FACXREG
LDY VAR_PI%
LDA VAR_PI%+1
JSR INTFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFMULMEM
JSR FACINT
STY VAR_IT%
STA VAR_IT%+1
LDA #<VAR_CP%[]
LDY #>VAR_CP%[]
STA G_REG
STY G_REG+1
LDY VAR_IT%
LDA VAR_IT%+1
JSR ARRAYACCESS_INTEGER_INT_SI
STY VAR_I4%
STA VAR_I4%+1
LDY VAR_CB%
LDA VAR_CB%+1
STY AS_TMP
STA AS_TMP+1
LDA #<VAR_CP%[]
LDY #>VAR_CP%[]
STA G_REG
STY G_REG+1
LDY VAR_IT%
LDA VAR_IT%+1
JSR ARRAYSTORE_INT_INTEGER_AC
LDY VAR_I4%
LDA VAR_I4%+1
JSR COMPACT127
LDY VAR_PI%
LDA VAR_PI%+1
JSR ARRAYSTORE_INT_INTEGER_AC
LDY VAR_PI%
LDA VAR_PI%+1
JSR SUPERFIINX
STY VAR_PI%
STA VAR_PI%+1
LINE_49865:
JSR GOSUB
JSR LINE_50900
JMP RETURN
LINE_49900:
LINE_49905:
JSR COMPACT120
BEQ EQ_EQ146
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP EQ_SKIP146
EQ_EQ146:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
EQ_SKIP146:
JSR REALFACPUSH
LDA #$0c
JSR COMPACT117
BNE NEQ_NEQ147
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP NEQ_SKIP147
NEQ_NEQ147:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
NEQ_SKIP147:
JSR COMPACT26
COMP_SKP197:
BEQ LINE_SKIP340
LINE_NSKIP340:
JMP RETURN
LINE_SKIP340:
LINE_49910:
JSR COMPACT100
BEQ EQ_EQ148
LDA #0
JMP EQ_SKIP148
EQ_EQ148:
LDA #$1
EQ_SKIP148:
COMP_SKP198:
BNE LINE_NSKIP341
JMP LINE_SKIP341
LINE_NSKIP341:
LDY VAR_IB%
LDA VAR_IB%+1
STY VAR_IT%
STA VAR_IT%+1
LDY VAR_I2%
LDA VAR_I2%+1
STY VAR_IB%
STA VAR_IB%+1
JSR COMPACT110
JSR LINE_48300
LDY #255
LDA #255
STY VAR_DR%
STA VAR_DR%+1
LDY VAR_IT%
LDA VAR_IT%+1
STY VAR_IB%
STA VAR_IB%+1
LINE_SKIP341:
LINE_49915:
LDA #<VAR_PF%[]
LDY #>VAR_PF%[]
JSR COMPACT60
STY VAR_PO%
STA VAR_PO%+1
LDY VAR_I2%
LDA VAR_I2%+1
JSR COMPACT86
JSR COMPACT56
JSR GOSUB
JSR LINE_49350
JSR GOSUB
JSR LINE_50600
LDA #$ff
LDY #$ff
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_PO%
LDA VAR_PO%+1
JSR ICMP
NEQ_NEQ149:
NEQ_SKIP149:
COMP_SKP199:
BEQ LINE_SKIP342
LINE_NSKIP342:
JSR GOSUB
JSR LINE_47300
LINE_SKIP342:
LINE_49920:
JMP RETURN
LINE_50000:
LINE_50010:
LDY #4
LDA #0
STY VAR_AT%
STA VAR_AT%+1
STY VAR_DD%
STA VAR_DD%+1
LDY #12
LDA #0
STY VAR_EL%
STA VAR_EL%+1
LDY #3
LDA #0
STY VAR_RL%
STA VAR_RL%+1
LDY #180
LDA #0
STY VAR_LQ%
STA VAR_LQ%+1
LDY #12
LDA #0
STY VAR_HQ%
STA VAR_HQ%+1
LINE_50020:
LDY #16
LDA #0
STY VAR_WF%
STA VAR_WF%+1
LDY #8
LDA #0
STY VAR_PT%
STA VAR_PT%+1
LDY #0
TYA
STY VAR_IM%
STA VAR_IM%+1
JSR GOSUB
JSR LINE_20000
JMP RETURN
LINE_50200:
LINE_50210:
JSR GOSUB
JSR LINE_49350
LDY VAR_DR%
LDA VAR_DR%+1
JSR INTFAC
JSR NEG
JSR FACXREG
LDY #2
STY A_REG
JSR SHL
JSR FACXREG
LDA #<CONST_5R
LDY #>CONST_5R
JSR COMPACT96
STY VAR_CY%
STA VAR_CY%+1
LINE_50220:
LDY #$00
LDA #$03
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_CX%
LDA VAR_CX%+1
JSR COMPACT180
JSR FACXREG
JSR COMPACT78
JSR FASTFADDMEM
JSR FACINT
STY VAR_XC%
STA VAR_XC%+1
LDY #$00
LDA #$04
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_CY%
LDA VAR_CY%+1
JSR COMPACT131
LDA #<CONST_80R
LDY #>CONST_80R
JSR COMPACT96
STY VAR_YC%
STA VAR_YC%+1
LINE_50230:
LDY VAR_XC%
LDA VAR_XC%+1
STY 53250
LDY VAR_YC%
LDA VAR_YC%+1
STY 53251
LINE_50240:
LDY #7
STY 53286
LDY #2
STY 53269
LINE_50250:
JSR GOSUB
JSR LINE_49300
LDY #$00
LDA #$03
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_CX%
LDA VAR_CX%+1
JSR COMPACT180
JSR FACXREG
JSR COMPACT78
JSR FASTFADDMEM
JSR FACINT
STY VAR_XT%
STA VAR_XT%+1
LDY #$00
LDA #$04
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_CY%
LDA VAR_CY%+1
JSR COMPACT131
LDA #<CONST_80R
LDY #>CONST_80R
JSR COMPACT96
STY VAR_YT%
STA VAR_YT%+1
LINE_50260:
LDY VAR_YT%
LDA VAR_YT%+1
STY TMP3_ZP
STA TMP3_ZP+1
LDY VAR_YC%
LDA VAR_YC%+1
JSR INTSUBVAR
JSR FACABS
JSR PUSHREAL
LDY VAR_XT%
LDA VAR_XT%+1
STY TMP3_ZP
STA TMP3_ZP+1
LDY VAR_XC%
LDA VAR_XC%+1
JSR INTSUBVAR
JSR FACXREG
JSR POPREAL2X
JSR ARGDIV
LDX #<VAR_DX
LDY #>VAR_DX
JSR FACMEM
LDY VAR_XC%
LDA VAR_XC%+1
JSR INTFAC
LDX #<VAR_XC
LDY #>VAR_XC
JSR FACMEM
LINE_50270:
JSR GOSUB
JSR LINE_50850
LDY VAR_YC%
LDA VAR_YC%+1
JSR INTFAC
LDX #<VAR_Y
LDY #>VAR_Y
JSR FACMEM
LDY VAR_YT%
LDA VAR_YT%+1
JSR INTFAC
JSR PUSHREAL
LDY VAR_DR%
LDA VAR_DR%+1
JSR INTFAC
JSR PUSHREAL
LDA #<VAR_Y
LDY #>VAR_Y
STA A_REG
STY A_REG+1
LDA #<FORLOOP28
STA JUMP_TARGET
LDA #>FORLOOP28
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP28:
LINE_50280:
LDA #<VAR_XC
LDY #>VAR_XC
JSR COPY2_XYA_XREG
JSR XREGFAC
JSR FACWORD
STY 53250
LDA #<VAR_Y
LDY #>VAR_Y
JSR COPY2_XYA_XREG
JSR XREGFAC
JSR FACWORD
STY 53251
LINE_50285:
JSR GOSUB
JSR LINE_51000
JSR GOSUB
JSR LINE_22000
LINE_50290:
LDA #<VAR_DX
LDY #>VAR_DX
JSR REALFAC
LDA #<VAR_XC
LDY #>VAR_XC
JSR FASTFADDMEM
LDX #<VAR_XC
LDY #>VAR_XC
JSR FACMEM
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_29
JMP (JUMP_TARGET)
RBEQ_29:
LINE_50300:
LDY #0
STY 53269
LDY #1
STY 53286
JMP RETURN
LINE_50400:
LINE_50410:
LDY #1
JSR COMPACT128
LDY #0
TYA
STY VAR_EL%
STA VAR_EL%+1
JSR COMPACT181
LDY #8
LDA #0
STY VAR_HQ%
STA VAR_HQ%+1
LINE_50420:
LDY #16
LDA #0
STY VAR_WF%
STA VAR_WF%+1
LDY #5
JSR COMPACT130
LDY #3
LDA #0
STY VAR_AT%
STA VAR_AT%+1
LDY #9
LDA #0
STY VAR_HQ%
STA VAR_HQ%+1
JSR GOSUB
JSR LINE_20000
LINE_50430:
JMP RETURN
LINE_50500:
LINE_50510:
LDY #10
LDA #0
STY VAR_AT%
STA VAR_AT%+1
LDY #1
LDA #0
STY VAR_DD%
STA VAR_DD%+1
LDY #10
LDA #0
STY VAR_EL%
STA VAR_EL%+1
JSR COMPACT181
LDY #8
LDA #0
STY VAR_HQ%
STA VAR_HQ%+1
LINE_50520:
LDY #128
LDA #0
STY VAR_WF%
STA VAR_WF%+1
LDY #2
LDA #0
STY VAR_PT%
STA VAR_PT%+1
LDY #1
LDA #0
STY VAR_IM%
STA VAR_IM%+1
JSR GOSUB
JSR LINE_20000
JMP RETURN
LINE_50550:
LINE_50560:
LDY #12
LDA #0
STY VAR_AT%
STA VAR_AT%+1
LDY #15
LDA #0
STY VAR_DD%
STA VAR_DD%+1
LDY #0
TYA
JSR COMPACT134
LDY #2
LDA #0
STY VAR_HQ%
STA VAR_HQ%+1
LINE_50570:
LDY #128
LDA #0
STY VAR_WF%
STA VAR_WF%+1
LDY #2
JSR COMPACT130
JMP RETURN
LINE_50600:
LINE_50610:
LDY #2
LDA #0
STY VAR_AT%
STA VAR_AT%+1
LDY #5
LDA #0
STY VAR_DD%
STA VAR_DD%+1
LDY #15
LDA #0
STY VAR_EL%
STA VAR_EL%+1
LDY #8
LDA #0
JSR COMPACT133
LDY #5
LDA #0
STY VAR_HQ%
STA VAR_HQ%+1
LINE_50620:
LDY #32
JSR COMPACT135
JMP RETURN
LINE_50700:
LINE_50710:
LDY #2
JSR COMPACT128
LDY #2
LDA #0
JSR COMPACT132
LDY #12
LDA #0
STY VAR_HQ%
STA VAR_HQ%+1
LINE_50720:
LDY #16
JSR COMPACT135
JMP RETURN
LINE_50800:
LINE_50810:
LDY #2
LDA #0
STY VAR_AT%
STA VAR_AT%+1
LDY #15
LDA #0
STY VAR_DD%
STA VAR_DD%+1
LDY #3
LDA #0
STY VAR_EL%
STA VAR_EL%+1
LDY #6
LDA #0
JSR COMPACT133
LDY #6
LDA #0
STY VAR_HQ%
STA VAR_HQ%+1
LINE_50820:
LDY #128
LDA #0
STY VAR_WF%
STA VAR_WF%+1
LDY #5
JSR COMPACT130
JMP RETURN
LINE_50850:
LINE_50860:
LDY #9
LDA #0
STY VAR_AT%
STA VAR_AT%+1
LDY #6
LDA #0
STY VAR_DD%
STA VAR_DD%+1
LDY #2
LDA #0
JSR COMPACT132
LDY #13
LDA #0
STY VAR_HQ%
STA VAR_HQ%+1
LINE_50870:
LDY #128
LDA #0
STY VAR_WF%
STA VAR_WF%+1
LDY #4
JSR COMPACT130
JMP RETURN
LINE_50900:
LINE_50910:
LDY #12
LDA #0
STY VAR_AT%
STA VAR_AT%+1
LDY #5
LDA #0
STY VAR_DD%
STA VAR_DD%+1
LDY #2
LDA #0
STY VAR_EL%
STA VAR_EL%+1
LDY #3
LDA #0
JSR COMPACT133
LDY #7
LDA #0
STY VAR_HQ%
STA VAR_HQ%+1
LINE_50920:
LDY #128
LDA #0
STY VAR_WF%
STA VAR_WF%+1
LDY #3
JSR COMPACT130
JMP RETURN
LINE_50950:
LINE_50952:
LDY VAR_7%
LDA VAR_7%+1
STY VAR_AT%
STA VAR_AT%+1
LDY #7
LDA #0
STY VAR_DC%
STA VAR_DC%+1
LDY #0
TYA
STY VAR_EL%
STA VAR_EL%+1
JSR COMPACT129
LDY #6
LDA #0
STY VAR_HQ%
STA VAR_HQ%+1
LINE_50954:
LDY #16
LDA #0
STY VAR_WF%
STA VAR_WF%+1
LDY #20
JSR COMPACT130
LINE_50956:
LDY #8
LDA #0
STY VAR_AT%
STA VAR_AT%+1
LDY #3
JSR COMPACT136
JSR COMPACT129
LDY #8
LDA #0
STY VAR_HQ%
STA VAR_HQ%+1
LINE_50958:
LDY #16
LDA #0
STY VAR_WF%
STA VAR_WF%+1
LDY #25
JSR COMPACT130
LINE_50960:
LDY #9
LDA #0
STY VAR_AT%
STA VAR_AT%+1
LDY #3
JSR COMPACT136
JSR COMPACT129
LDY #7
LDA #0
STY VAR_HQ%
STA VAR_HQ%+1
LINE_50962:
LDY #16
LDA #0
STY VAR_WF%
STA VAR_WF%+1
LDY #34
JSR COMPACT130
JMP RETURN
LINE_51000:
LINE_51010:
LDA 53266
CMP #100
BCC PEEKLT1
BEQ PEEKEQ1
LDA #$FF
JMP PEEKDONE1
PEEKLT1:
LDA #$01
JMP PEEKDONE1
PEEKEQ1:
LDA #0
PEEKDONE1:
ROL
BCS GT_GT150
LDA #0
JMP GT_SKIP150
GT_GT150:
LDA #$1
GT_SKIP150:
COMP_SKP201:
BEQ LINE_SKIP343
LINE_NSKIP343:
JMP LINE_51010
LINE_SKIP343:
LINE_51020:
JMP RETURN
LINE_51500:
LINE_51510:
JSR COMPACT110
JSR LINE_51700
JMP RETURN
LINE_51600:
LINE_51610:
JSR COMPACT109
JSR LINE_51700
JMP RETURN
LINE_51700:
LINE_51710:
LDA #$01
LDY #$00
JSR COMPACT101
BEQ EQ_EQ151
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP EQ_SKIP151
EQ_EQ151:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
EQ_SKIP151:
JSR REALFAC
JSR FACXREG
LDY #1
STY A_REG
JSR SHL
LDA #<X_REG
LDY #>X_REG
JSR FASTFADDMEM
JSR PUSHREAL
LDY #2
LDA #0
STY A_REG
STA A_REG+1
LDA #<VAR_IC
LDY #>VAR_IC
JSR COPY2_XYA_XREG
JSR XREGFAC
JSR SHR
JSR BASINT
JSR FACXREG
LDY #2
STY A_REG
JSR SHL
JSR FACXREG
JSR POPREAL2X
JSR FASTFSUBARG
LDX #<VAR_I4
LDY #>VAR_I4
JSR FACMEM
LINE_51720:
LDX #4
dceloop5150_1:
LDA VAR_I4,X
CMP VAR_IC,X
BNE LINE_SKIP344
DEX
BPL dceloop5150_1
LINE_NSKIP344:
JMP RETURN
LINE_SKIP344:
LINE_51730:
LDX #4
dcloop3969_1:
LDA CONST_9,X
STA VAR_I2,X
LDA VAR_IC,X
STA VAR_I3,X
DEX
BPL dcloop3969_1
LDA #<VAR_I4
LDY #>VAR_I4
JSR REALFACPUSH
LDY VAR_DR%
LDA VAR_DR%+1
JSR INTFAC
JSR PUSHREAL
LDA #<VAR_I3
LDY #>VAR_I3
STA A_REG
STY A_REG+1
LDA #<FORLOOP29
STA JUMP_TARGET
LDA #>FORLOOP29
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP29:
LINE_51740:
LDA #<VAR_I3
LDY #>VAR_I3
JSR COPY2_XYA_XREG
LDA #<VAR_PF%[]
LDY #>VAR_PF%[]
JSR ARRAYACCESS_INTEGER_S
JSR COMPACT1
BEQ EQ_EQ153
LDA #0
JMP EQ_SKIP153
EQ_EQ153:
LDA #$1
EQ_SKIP153:
COMP_SKP203:
BNE LINE_NSKIP345
JMP LINE_SKIP345
LINE_NSKIP345:
LDX #4
dcloop3969_3:
LDA VAR_I3,X
STA VAR_I2,X
DEX
BPL dcloop3969_3
LDY VAR_DR%
LDA VAR_DR%+1
JSR INTFAC
LDA #<VAR_I4
LDY #>VAR_I4
JSR COPY2_XYA_XREG
LDA #<X_REG
LDY #>X_REG
JSR FASTFADDMEM
LDX #<VAR_I3
LDY #>VAR_I3
JSR FACMEM
LINE_SKIP345:
LINE_51750:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_30
JMP (JUMP_TARGET)
RBEQ_30:
LINE_51760:
LDX #4
dceloop5150_2:
LDA CONST_9,X
CMP VAR_I2,X
BNE LINE_SKIP346
DEX
BPL dceloop5150_2
LINE_NSKIP346:
JMP RETURN
LINE_SKIP346:
LINE_51770:
LDX #4
dcloop3969_4:
LDA VAR_I2,X
STA VAR_I3,X
DEX
BPL dcloop3969_4
LDY VAR_DR%
LDA VAR_DR%+1
JSR INTFAC
LDA #<VAR_IC
LDY #>VAR_IC
JSR COPY2_XYA_XREG
LDA #<X_REG
LDY #>X_REG
JSR FASTFADDMEM
JSR PUSHREAL
LDY VAR_DR%
LDA VAR_DR%+1
JSR INTFAC
JSR NEG
JSR PUSHREAL
LDA #<VAR_I3
LDY #>VAR_I3
STA A_REG
STY A_REG+1
LDA #<FORLOOP30
STA JUMP_TARGET
LDA #>FORLOOP30
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP30:
LDA #<VAR_I3
LDY #>VAR_I3
JSR REALFAC
JSR FACINT
STY VAR_IB%
STA VAR_IB%+1
LINE_51780:
LDY VAR_IB%
LDA VAR_IB%+1
JSR INTFAC
JSR PUSHREAL
JSR COMPACT137
JSR FACXREG
LDA #<VAR_PF%[]
LDY #>VAR_PF%[]
JSR ARRAYACCESS_INTEGER_SNX
JSR COPY_XREG2YREG
JSR POPREALXREG
LDA #<VAR_PF%[]
LDY #>VAR_PF%[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_INTEGER_NX
LDY VAR_IB%
LDA VAR_IB%+1
JSR INTFAC
JSR PUSHREAL
JSR COMPACT137
JSR FACXREG
LDA #<VAR_HP%[]
LDY #>VAR_HP%[]
JSR ARRAYACCESS_INTEGER_SNX
JSR COMPACT153
LINE_51785:
JSR COMPACT118
JSR COMPACT0
EQ_EQ155:
EQ_SKIP155:
COMP_SKP206:
BNE LINE_SKIP347
LINE_NSKIP347:
JMP LINE_51810
LINE_SKIP347:
LINE_51790:
LDY VAR_IB%
LDA VAR_IB%+1
STY TMP3_ZP
STA TMP3_ZP+1
LDY VAR_DR%
LDA VAR_DR%+1
JSR INTSUBVAR
JSR FACINT
STY VAR_IB%
STA VAR_IB%+1
JSR GOSUB
JSR LINE_49330
JSR GOSUB
JSR LINE_47200
LINE_51800:
LDA #<VAR_I3
LDY #>VAR_I3
JSR REALFAC
JSR FACINT
STY VAR_IB%
STA VAR_IB%+1
JSR GOSUB
JSR LINE_49330
LDY VAR_CX%
LDA VAR_CX%+1
STY VAR_XC%
STA VAR_XC%+1
LDY VAR_CY%
LDA VAR_CY%+1
STY VAR_YC%
STA VAR_YC%+1
LDA #<VAR_HP%[]
LDY #>VAR_HP%[]
JSR COMPACT119
STY VAR_HP%
STA VAR_HP%+1
JSR COMPACT118
JSR COMPACT83
LINE_51810:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_31
JMP (JUMP_TARGET)
RBEQ_31:
LDA #<VAR_IC
LDY #>VAR_IC
JSR REALFAC
JSR FACINT
STY VAR_IB%
STA VAR_IB%+1
JSR GOSUB
JSR LINE_49330
JSR GOSUB
JSR LINE_47200
LDY VAR_IB%
LDA VAR_IB%+1
JSR COMPACT86
JSR COMPACT56
LINE_51820:
LDA #$01
LDY #$00
JSR COMPACT101
EQ_EQ156:
EQ_SKIP156:
COMP_SKP208:
BNE LINE_SKIP348
LINE_NSKIP348:
JSR ONETOFAC
LDA #<VAR_I2
LDY #>VAR_I2
JSR FASTFADDMEM
LDX #<VAR_IC
LDY #>VAR_IC
JSR FACMEM
LINE_SKIP348:
LINE_51830:
JMP RETURN
LINE_51900:
LINE_51910:
JSR GOSUB
JSR LINE_57200
LDY VAR_RS%
LDA VAR_RS%+1
STY VAR_SC%
STA VAR_SC%+1
LDA #$01
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_AF%
LDA VAR_AF%+1
JSR ICMP
BEQ EQ_EQ157
LDA #0
JMP EQ_SKIP157
EQ_EQ157:
LDA #$1
EQ_SKIP157:
COMP_SKP209:
BNE LINE_NSKIP349
JMP LINE_SKIP349
LINE_NSKIP349:
JSR GOSUB
JSR LINE_57200
LDY VAR_SC%
LDA VAR_SC%+1
STY TMP_ZP
STA TMP_ZP+1
LDY VAR_RS%
LDA VAR_RS%+1
JSR ICMP
ROL
BCS GT_GT158
LDA #0
JMP GT_SKIP158
GT_GT158:
LDA #$1
GT_SKIP158:
COMP_SKP210:
BEQ LINE_SKIP350
LINE_NSKIP350:
LDY VAR_SC%
LDA VAR_SC%+1
JSR INTFAC
JSR FACYREG
JSR YREGFAC
JSR FACINT
STY VAR_RS%
STA VAR_RS%+1
LINE_SKIP350:
LINE_SKIP349:
LINE_51920:
JMP RETURN
LINE_52000:
LINE_52001:
JSR COMPACT27
STA VAR_I
STA VAR_I+1
STA VAR_I+2
STA VAR_I+3
STA VAR_I+4
LDA #<CONST_20R
LDY #>CONST_20R
JSR COMPACT13
LDA #<FORLOOP31
STA JUMP_TARGET
LDA #>FORLOOP31
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP31:
JSR COMPACT178
JSR ARRAYACCESS_INTEGER_SI
STY VAR_PF%
STA VAR_PF%+1
LDA #$ff
LDY #$ff
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_PF%
LDA VAR_PF%+1
JSR ICMP
ROL
BCS GT_GT159
LDA #0
JMP GT_SKIP159
GT_GT159:
LDA #$1
GT_SKIP159:
COMP_SKP211:
BNE LINE_NSKIP351
JMP LINE_SKIP351
LINE_NSKIP351:
LDY VAR_PF%
LDA VAR_PF%+1
JSR COMPACT35
LDA #<VAR_II
LDY #>VAR_II
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFADDMEM
LDX #<VAR_II
LDY #>VAR_II
JSR FACMEM
LINE_SKIP351:
LINE_52002:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_32
JMP (JUMP_TARGET)
RBEQ_32:
LDA #<CONST_1R
LDY #>CONST_1R
JSR REALFAC
LDA #<VAR_II
LDY #>VAR_II
JSR CMPFAC
ROL
BCS GT_GT160
LDA #0
JMP GT_SKIP160
GT_GT160:
LDA #$1
GT_SKIP160:
COMP_SKP213:
BNE LINE_NSKIP352
JMP LINE_SKIP352
LINE_NSKIP352:
LDA #<VAR_FQ
LDY #>VAR_FQ
JSR REALFACPUSH
JSR ONETOFAC
JSR FACRND
JSR COMPACT24
ROL
BCS GT_GT161
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP GT_SKIP161
GT_GT161:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
GT_SKIP161:
JSR REALFACPUSH
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_TP%
LDA VAR_TP%+1
JSR ICMP
BCC LTEQ_LTEQ162
BEQ LTEQ_LTEQ162
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP LTEQ_SKIP162
LTEQ_LTEQ162:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
LTEQ_SKIP162:
JSR COMPACT26
COMP_SKP214:
BEQ LINE_SKIP353
LINE_NSKIP353:
JMP RETURN
LINE_SKIP353:
LINE_SKIP352:
LINE_52005:
LDY VAR_HF%
LDA VAR_HF%+1
STY VAR_AF%
STA VAR_AF%+1
JSR GOSUB
JSR LINE_51900
LDY VAR_RS%
LDA VAR_RS%+1
STY VAR_CN%
STA VAR_CN%+1
LINE_52010:
JSR COMPACT28
LDA #<CONST_13R
LDY #>CONST_13R
JSR COMPACT13
LDA #<FORLOOP32
STA JUMP_TARGET
LDA #>FORLOOP32
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP32:
JSR COMPACT54
LDA #<VAR_AI%[]
LDY #>VAR_AI%[]
JSR COMPACT55
JSR NEXT
LDA A_REG
BNE RBEQ_33
JMP (JUMP_TARGET)
RBEQ_33:
LINE_52020:
JSR COMPACT28
LDA #<CONST_13R
LDY #>CONST_13R
JSR COMPACT13
LDA #<FORLOOP33
STA JUMP_TARGET
LDA #>FORLOOP33
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP33:
LDY #255
LDA #255
STY VAR_EV%
STA VAR_EV%+1
JSR COMPACT105
JSR ARRAYACCESS_INTEGER_S
JSR COMPACT1
NEQ_NEQ163:
NEQ_SKIP163:
COMP_SKP216:
BEQ LINE_SKIP354
LINE_NSKIP354:
JMP LINE_52100
LINE_SKIP354:
LINE_52030:
LDY #0
TYA
STY VAR_EV%
STA VAR_EV%+1
JSR COMPACT84
LDY #$00
LDA #$04
JSR COMPACT94
JSR COMPACT139
JSR COMPACT0
BEQ EQ_EQ164
LDA #0
JMP EQ_SKIP164
EQ_EQ164:
LDA #$1
EQ_SKIP164:
COMP_SKP217:
BNE LINE_NSKIP355
JMP LINE_SKIP355
LINE_NSKIP355:
LDY #$00
LDA #$05
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_EV%
LDA VAR_EV%+1
JSR INTADD
JSR INTCONV
STY VAR_EV%
STA VAR_EV%+1
LINE_SKIP355:
LINE_52040:
LDY #$00
LDA #$04
JSR COMPACT94
JSR COMPACT139
JSR COMPACT0
BEQ EQ_EQ165
LDA #0
JMP EQ_SKIP165
EQ_EQ165:
LDA #$1
EQ_SKIP165:
COMP_SKP218:
BNE LINE_NSKIP356
JMP LINE_SKIP356
LINE_NSKIP356:
LDY #$00
LDA #$05
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_EV%
LDA VAR_EV%+1
JSR INTADD
JSR INTCONV
STY VAR_EV%
STA VAR_EV%+1
JMP LINE_52100
LINE_SKIP356:
LINE_52050:
LDA #<CONST_16R
LDY #>CONST_16R
JSR REALFACPUSH
LDY VAR_CN%
LDA VAR_CN%+1
JSR COMPACT9
JSR COMPACT140
JSR COMPACT116
JSR ARRAYACCESS_INTEGER_SNX
JSR COMPACT146
JSR POPREAL2X
JSR FASTFADDARG
JSR FACINT
STY VAR_I2%
STA VAR_I2%+1
LDA #<CONST_16R
LDY #>CONST_16R
JSR COPY2_XYA_YREG
LDY VAR_II%
LDA VAR_II%+1
JSR INTFAC
JSR FACXREG
JSR COMPACT111
JSR ARRAYACCESS_INTEGER_S
JSR XREGFAC
JSR BASINT
JSR COMPACT10
LDA #<X_REG
LDY #>X_REG
JSR REALFACPUSH
LDA #<CONST_8R
LDY #>CONST_8R
JSR COPY2_XYA_YREG
LDY VAR_II%
LDA VAR_II%+1
JSR INTFAC
JSR FACXREG
JSR COMPACT111
JSR COMPACT108
JSR COMPACT146
JSR POPREAL2X
JSR FASTFADDARG
JSR FACINT
STY VAR_I3%
STA VAR_I3%+1
LINE_52060:
LDY VAR_I3%
LDA VAR_I3%+1
STY TMP3_ZP
STA TMP3_ZP+1
LDY VAR_I2%
LDA VAR_I2%+1
JSR INTSUBVAR
JSR FACINT
STY VAR_I3%
STA VAR_I3%+1
JSR INTFAC
JSR FACYREG
LDY VAR_EV%
LDA VAR_EV%+1
JSR COMPACT18
JSR FASTFADDMEM
JSR FACINT
STY VAR_EV%
STA VAR_EV%+1
LINE_52100:
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDY VAR_EV%
LDA VAR_EV%+1
STY AS_TMP
STA AS_TMP+1
LDA #<VAR_AI%[]
LDY #>VAR_AI%[]
JSR COMPACT58
JSR NEXT
LDA A_REG
BNE RBEQ_34
JMP (JUMP_TARGET)
RBEQ_34:
LINE_52110:
LDY #0
LDA #131
STY VAR_MX%
STA VAR_MX%+1
LDY #255
LDA #255
STY VAR_I2%
STA VAR_I2%+1
JSR COMPACT28
LDA #<CONST_13R
LDY #>CONST_13R
JSR COMPACT13
LDA #<FORLOOP34
STA JUMP_TARGET
LDA #>FORLOOP34
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP34:
JSR COMPACT142
JSR ARRAYACCESS_INTEGER_S
JSR COMPACT1
EQ_EQ166:
EQ_SKIP166:
COMP_SKP220:
BNE LINE_SKIP357
LINE_NSKIP357:
JMP LINE_52150
LINE_SKIP357:
LINE_52120:
JSR COMPACT142
JSR ARRAYACCESS_INTEGER_S
LDY VAR_MX%
LDA VAR_MX%+1
STY TMP_ZP
STA TMP_ZP+1
LDY TMP2_ZP
LDA TMP2_ZP+1
JSR ICMP
ROL
BCS GT_GT167
LDA #0
JMP GT_SKIP167
GT_GT167:
LDA #$1
GT_SKIP167:
COMP_SKP221:
BNE LINE_NSKIP358
JMP LINE_SKIP358
LINE_NSKIP358:
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<VAR_AI%[]
LDY #>VAR_AI%[]
JSR ARRAYACCESS_INTEGER_SI
STY VAR_MX%
STA VAR_MX%+1
LDA #<VAR_I
LDY #>VAR_I
JSR REALFAC
JSR FACINT
STY VAR_I2%
STA VAR_I2%+1
LINE_SKIP358:
LINE_52150:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_35
JMP (JUMP_TARGET)
RBEQ_35:
LINE_52160:
LDA #$ff
LDY #$ff
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_I2%
LDA VAR_I2%+1
JSR ICMP
EQ_EQ168:
EQ_SKIP168:
COMP_SKP223:
BNE LINE_SKIP359
LINE_NSKIP359:
JMP RETURN
LINE_SKIP359:
LINE_52170:
LDY VAR_CN%
LDA VAR_CN%+1
JSR COMPACT5
LDY VAR_I2%
LDA VAR_I2%+1
JSR ARRAYSTORE_INT_INTEGER_AC
LDY VAR_I2%
LDA VAR_I2%+1
JSR COMPACT6
LDY VAR_CN%
LDA VAR_CN%+1
JSR COMPACT12
LDY #0
TYA
STY VAR_YC%
STA VAR_YC%+1
LDA #<CONST_20R
LDY #>CONST_20R
JSR COPY2_XYA_YREG
LDY VAR_I2%
LDA VAR_I2%+1
JSR COMPACT19
JSR FACINT
STY VAR_XC%
STA VAR_XC%+1
JSR GOSUB
JSR LINE_30800
LINE_52180:
LDY VAR_TP%
LDA VAR_TP%+1
JSR SUPERFIDEX
STY VAR_TP%
STA VAR_TP%+1
JMP RETURN
LINE_53000:
LINE_53010:
LDY #0
STY 53269
LINE_53015:
LDY #$00
LDA #$03
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_WN%
LDA VAR_WN%+1
JSR INTADD
JSR INTCONV
STY VAR_MG%
STA VAR_MG%+1
LDY #3
LDA #0
STY VAR_WT%
STA VAR_WT%+1
JSR GOSUB
JSR LINE_50950
JSR GOSUB
JSR LINE_40100
JSR GOSUB
JSR LINE_48400
LINE_53020:
LDY #0
TYA
STY VAR_S1%
STA VAR_S1%+1
STY VAR_S2%
STA VAR_S2%+1
LINE_53025:
LDY #0
TYA
STY VAR_OV%
STA VAR_OV%+1
STY VAR_HC%
STA VAR_HC%+1
LINE_53030:
LDY #0
TYA
STY VAR_BC%
STA VAR_BC%+1
STY VAR_DS%
STA VAR_DS%+1
LINE_53040:
LDY #0
TYA
STY VAR_CS%
STA VAR_CS%+1
STY VAR_SO%
STA VAR_SO%+1
LDY #0
TYA
STY VAR_WN%
STA VAR_WN%+1
LINE_53050:
LDY #5
LDA #0
STY VAR_MD%
STA VAR_MD%+1
JSR GOSUB
JSR LINE_33600
JSR GOSUB
JSR LINE_33250
LINE_53060:
JSR GOSUB
JSR LINE_34700
JSR GOSUB
JSR LINE_34750
JSR GOSUB
JSR LINE_47600
JMP RETURN
LINE_54000:
LINE_54010:
LDA #<1024
STA TMP_ZP
LDA #>1024
STA TMP_ZP+1
JSR SYSTEMCALL
LDY #7
STY 646
LDY 53269
LDA #0
STY VAR_GZ%
STA VAR_GZ%+1
LDY #0
STY 53269
LINE_54020:
LDY VAR_CX%
LDA VAR_CX%+1
STY VAR_OX%
STA VAR_OX%+1
LDY VAR_CY%
LDA VAR_CY%+1
STY VAR_OY%
STA VAR_OY%+1
LDA #0
STA VAR_F
STA VAR_F+1
STA VAR_F+2
STA VAR_F+3
STA VAR_F+4
LDA #<CONST_20R
LDY #>CONST_20R
JSR REALFACPUSH
LDA #<CONST_2R
LDY #>CONST_2R
JSR REALFACPUSH
LDA #<VAR_F
LDY #>VAR_F
STA A_REG
STY A_REG+1
LDA #<FORLOOP35
STA JUMP_TARGET
LDA #>FORLOOP35
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP35:
LINE_54030:
LDA #147
JSR SINGLECHROUTMAX
LDY #0
TYA
STY VAR_CY%
STA VAR_CY%+1
STY VAR_CX%
STA VAR_CX%+1
LINE_54040:
LDA #<CONST_8R
LDY #>CONST_8R
JSR REALFACPUSH
LDA #<CONST_5R
LDY #>CONST_5R
JSR REALFACPUSH
LDA #<CONST_8R
LDY #>CONST_8R
JSR REALFACPUSH
JSR COMPACTMAX
JSR COMPACT80
LDA #<VAR_F
LDY #>VAR_F
JSR COPY2_XYA_YREG
JSR COMPACT2
JSR COMPACT144
JSR MID
LDY A_REG
LDA A_REG+1
STY B_REG
STA B_REG+1
LDA #<CONST_122
LDY #>CONST_122
STA A_REG
STY A_REG+1
JSR CONCAT
LDA #<CONST_123
LDY #>CONST_123
STA B_REG
STY B_REG+1
JSR CONCAT
LDY A_REG
LDA A_REG+1
STY G_REG
STA G_REG+1
JSR POPREAL
LDX #<D_REG
LDY #>D_REG
JSR FACMEM
JSR POPREAL
LDX #<C_REG
LDY #>C_REG
JSR FACMEM
JSR POPREALXREG
LDA #<CONST_14R
LDY #>CONST_14R
JSR COPY2_XYA_YREG
JSR OPEN
LINE_54050:
LDA #<CONST_8R
LDY #>CONST_8R
JSR REALFACPUSH
JSR CLEARQUEUE
JSR COMPACTMAX
JSR POPREAL
LDX #<C_REG
LDY #>C_REG
JSR FACMEM
JSR INPUTSTRCHANNEL
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_LI$
LDY #>VAR_LI$
JSR COPYSTRING
LDA #<CONST_124
LDY #>CONST_124
STA B_REG
STY B_REG+1
LDA VAR_LI$
LDY VAR_LI$+1
STA A_REG
STY A_REG+1
JSR SEQ
LDA X_REG
COMP_SKP224:
BEQ LINE_SKIP360
LINE_NSKIP360:
LDA #<CONST_8R
LDY #>CONST_8R
JSR COPY2_XYA_YREG
LDA #<Y_REG
LDY #>Y_REG
STY TMP3_ZP+1
LDX #<X_REG
LDY #>X_REG
JSR COPY2_XYA
JSR CLOSE
JMP LINE_54100
LINE_SKIP360:
LINE_54060:
JSR COMPACTMAX
LDA #<CONST_125
LDY #>CONST_125
STA TMP_ZP
STY TMP_ZP+1
JSR PUSHINT
LDA VAR_LI$
LDY VAR_LI$+1
STA B_REG
STY B_REG+1
LDY #1
JSR LEFTCONST
JSR POPINT2B
JSR SEQ
LDA X_REG
COMP_SKP225:
BNE LINE_NSKIP361
JMP LINE_SKIP361
LINE_NSKIP361:
JSR COMPACTMAX
LDA #<CONST_15R
LDY #>CONST_15R
JSR COPY2_XYA_CREG
LDA VAR_LI$
LDY VAR_LI$+1
STA B_REG
STY B_REG+1
JSR MIDNEGC
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
JSR PUSHINT
LDA #<CONST_8R
LDY #>CONST_8R
JSR COPY2_XYA_CREG
LDA VAR_LI$
LDY VAR_LI$+1
STA B_REG
STY B_REG+1
LDY #3
JSR MIDCONST
LDY A_REG
LDA A_REG+1
STY B_REG
STA B_REG+1
JSR VAL
JSR CHRXREG
JSR POPINT2B
JSR CONCAT
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_LI$
LDY #>VAR_LI$
JSR COPYSTRING
LINE_SKIP361:
LINE_54070:
JSR GOSUB
JSR LINE_34500
LDA VAR_LI$
LDY VAR_LI$+1
JSR STROUTWL
JSR COMPACT30
LINE_54080:
JMP LINE_54050
LINE_54100:
LDY #7
JSR COMPACT69
LINE_54110:
LDA #<CONST_126
LDY #>CONST_126
JSR STROUTWL
LINE_54120:
JSR GETADOLLAR
LDA #<CONST_103
LDY #>CONST_103
JSR COMPACT64
COMP_SKP226:
BEQ LINE_SKIP362
LINE_NSKIP362:
JMP LINE_54300
LINE_SKIP362:
LINE_54130:
LDA #<CONST_127
LDY #>CONST_127
JSR COMPACT64
COMP_SKP227:
BEQ LINE_SKIP363
LINE_NSKIP363:
LDY #0
TYA
STY A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_36
JMP (JUMP_TARGET)
RBEQ_36:
JMP LINE_54300
LINE_SKIP363:
LINE_54140:
JMP LINE_54120
LINE_54300:
LDA #<1027
STA TMP_ZP
LDA #>1027
STA TMP_ZP+1
JSR SYSTEMCALL
LDY VAR_GZ%
LDA VAR_GZ%+1
STY 53269
LDA #<EMPTYSTR
LDY #>EMPTYSTR
STA VAR_A$
STY VAR_A$+1
LDY VAR_OX%
LDA VAR_OX%+1
STY VAR_CX%
STA VAR_CX%+1
LDY VAR_OY%
LDA VAR_OY%+1
STY VAR_CY%
STA VAR_CY%+1
JMP RETURN
LINE_57000:
LINE_57010:
LDY #1
LDA #0
STY VAR_RR%
STA VAR_RR%+1
LDA #<CONST_1R
LDY #>CONST_1R
JSR COPY2_XYA_XREG
LDA #<CONST_9
LDY #>CONST_9
JSR COPY2_XYA_YREG
LDA #<VAR_RP%[]
LDY #>VAR_RP%[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_INTEGER
LDY #0
LDA #125
STY VAR_MI%
STA VAR_MI%+1
LDY #0
LDA #131
STY VAR_MX%
STA VAR_MX%+1
LDX #4
dcloop4437_1:
LDA CONST_2R,X
STA VAR_I,X
DEX
BPL dcloop4437_1
LDY VAR_CM%
LDA VAR_CM%+1
JSR FIDEX
LDA #<X_REG
LDY #>X_REG
JSR COMPACT13
LDA #<FORLOOP36
STA JUMP_TARGET
LDA #>FORLOOP36
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP36:
LINE_57020:
LDA #<CONST_36R
LDY #>CONST_36R
JSR REALFACPUSH
LDA #<VAR_I
LDY #>VAR_I
JSR REALFAC
JSR BASINT
JSR COMPACT10
LDA #<CONST_13R
LDY #>CONST_13R
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
JSR CMPFAC
BEQ EQ_EQ169
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP EQ_SKIP169
EQ_EQ169:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
EQ_SKIP169:
JSR REALFAC
JSR FACXREG
LDY #2
STY A_REG
JSR SHL
JSR PUSHREAL
LDA #<CONST_16R
LDY #>CONST_16R
JSR REALFACPUSH
LDA #<VAR_I
LDY #>VAR_I
JSR REALFAC
JSR BASINT
JSR COMPACT10
JSR COMPACT140
LDA #<VAR_I
LDY #>VAR_I
JSR REALFAC
JSR BASINT
JSR FACXREG
LDA #<VAR_CV%[]
LDY #>VAR_CV%[]
JSR ARRAYACCESS_INTEGER_SNX
JSR COMPACT146
JSR POPREAL2X
JSR FASTFADDARG
JSR FACXREG
JSR POPREAL2X
JSR FASTFSUBARG
JSR FACINT
STY VAR_II%
STA VAR_II%+1
LDY VAR_MI%
LDA VAR_MI%+1
STY TMP_ZP
STA TMP_ZP+1
LDY VAR_II%
LDA VAR_II%+1
JSR ICMP
BEQ LT_LT_EQ170
ROL
BCC LT_LT170
LT_LT_EQ170:
LDA #0
JMP LT_SKIP170
LT_LT170:
LDA #$1
LT_SKIP170:
COMP_SKP229:
BEQ LINE_SKIP364
LINE_NSKIP364:
LDY VAR_II%
LDA VAR_II%+1
STY VAR_MI%
STA VAR_MI%+1
LINE_SKIP364:
LINE_57025:
LDY VAR_MX%
LDA VAR_MX%+1
STY TMP_ZP
STA TMP_ZP+1
LDY VAR_II%
LDA VAR_II%+1
JSR ICMP
ROL
BCS GT_GT171
LDA #0
JMP GT_SKIP171
GT_GT171:
LDA #$1
GT_SKIP171:
COMP_SKP230:
BEQ LINE_SKIP365
LINE_NSKIP365:
LDY VAR_II%
LDA VAR_II%+1
STY VAR_MX%
STA VAR_MX%+1
LINE_SKIP365:
LINE_57030:
LDY VAR_II%
LDA VAR_II%+1
STY AS_TMP
STA AS_TMP+1
LDA #<VAR_RP%[]
LDY #>VAR_RP%[]
STA G_REG
STY G_REG+1
LDY VAR_RR%
LDA VAR_RR%+1
JSR ARRAYSTORE_INT_INTEGER_AC
LDY VAR_RR%
LDA VAR_RR%+1
JSR SUPERFIINX
STY VAR_RR%
STA VAR_RR%+1
LINE_57040:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_37
JMP (JUMP_TARGET)
RBEQ_37:
LDY VAR_MX%
LDA VAR_MX%+1
JSR FIINX
LDY VAR_MI%
LDA VAR_MI%+1
JSR INTFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFSUBMEM
JSR FACINT
STY VAR_MX%
STA VAR_MX%+1
LDY #0
TYA
STY VAR_I2%
STA VAR_I2%+1
LINE_57050:
LDX #4
dcloop4593_1:
LDA CONST_2R,X
STA VAR_I,X
DEX
BPL dcloop4593_1
LDY VAR_RR%
LDA VAR_RR%+1
JSR FIDEX
LDA #<X_REG
LDY #>X_REG
JSR COMPACT13
LDA #<FORLOOP37
STA JUMP_TARGET
LDA #>FORLOOP37
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP37:
LDA #<VAR_I
LDY #>VAR_I
JSR REALFACPUSH
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<VAR_RP%[]
LDY #>VAR_RP%[]
JSR ARRAYACCESS_INTEGER_S
LDY VAR_MI%
LDA VAR_MI%+1
JSR INTFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFSUBMEM
JSR FACYREG
JSR POPREALXREG
LDA #<VAR_RP%[]
LDY #>VAR_RP%[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_INTEGER_NX
LDA #<VAR_I
LDY #>VAR_I
JSR REALFACPUSH
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<VAR_RP%[]
LDY #>VAR_RP%[]
JSR ARRAYACCESS_INTEGER_S
JSR COPY_XREG2YREG
LDY VAR_MX%
LDA VAR_MX%+1
JSR COMPACT18
JSR FASTFSUBMEM
JSR FACYREG
JSR POPREALXREG
LDA #<VAR_RO%[]
LDY #>VAR_RO%[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_INTEGER_NX
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<VAR_RO%[]
LDY #>VAR_RO%[]
JSR ARRAYACCESS_INTEGER_S
LDY VAR_I2%
LDA VAR_I2%+1
JSR COMPACT49
STY VAR_I2%
STA VAR_I2%+1
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_38
JMP (JUMP_TARGET)
RBEQ_38:
LINE_57060:
LDY VAR_RR%
LDA VAR_RR%+1
STY VAR_I4%
STA VAR_I4%+1
LDY VAR_I2%
LDA VAR_I2%+1
STY VAR_RR%
STA VAR_RR%+1
LDA #$c8
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_RR%
LDA VAR_RR%+1
JSR ICMP
ROL
BCS GT_GT172
LDA #0
JMP GT_SKIP172
GT_GT172:
LDA #$1
GT_SKIP172:
COMP_SKP233:
BEQ LINE_SKIP366
LINE_NSKIP366:
JMP LINE_57300
LINE_SKIP366:
LINE_57070:
LDY #0
TYA
STY VAR_I3%
STA VAR_I3%+1
LDX #4
dcloop4593_2:
LDA CONST_2R,X
STA VAR_I,X
DEX
BPL dcloop4593_2
LDY VAR_I4%
LDA VAR_I4%+1
JSR FIDEX
LDA #<X_REG
LDY #>X_REG
JSR COMPACT13
LDA #<FORLOOP38
STA JUMP_TARGET
LDA #>FORLOOP38
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP38:
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<VAR_RO%[]
LDY #>VAR_RO%[]
JSR ARRAYACCESS_INTEGER_SI
STY VAR_II%
STA VAR_II%+1
LDY VAR_I3%
LDA VAR_I3%+1
JSR INTFAC
LDX #<VAR_P
LDY #>VAR_P
JSR FACMEM
LDY VAR_I3%
LDA VAR_I3%+1
STY TMP3_ZP
STA TMP3_ZP+1
LDY VAR_II%
LDA VAR_II%+1
JSR INTADDVAR
JSR FACXREG
JSR ONETOFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFSUBMEM
JSR PUSHREAL
JSR COMPACT103
LDA #<FORLOOP39
STA JUMP_TARGET
LDA #>FORLOOP39
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP39:
LDA #<VAR_P
LDY #>VAR_P
JSR COPY2_XYA_XREG
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_YREG
LDA #<VAR_RC%[]
LDY #>VAR_RC%[]
JSR COMPACT55
JSR NEXT
LDA A_REG
BNE RBEQ_39
JMP (JUMP_TARGET)
RBEQ_39:
LINE_57080:
LDA #<VAR_P
LDY #>VAR_P
JSR REALFAC
JSR FACINT
STY VAR_I3%
STA VAR_I3%+1
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_40
JMP (JUMP_TARGET)
RBEQ_40:
LINE_57090:
LDY VAR_RR%
LDA VAR_RR%+1
STY TMP_ZP
STA TMP_ZP+1
LDY VAR_I3%
LDA VAR_I3%+1
JSR ICMP
NEQ_NEQ173:
NEQ_SKIP173:
COMP_SKP236:
BEQ LINE_SKIP367
LINE_NSKIP367:
JMP LINE_57300
LINE_SKIP367:
LINE_57100:
JMP RETURN
LINE_57200:
LINE_57210:
LDY VAR_RR%
LDA VAR_RR%+1
JSR INTFAC
JSR PUSHREAL
LDA #<CONST_1R
LDY #>CONST_1R
JSR REALFAC
JSR FACRND
JSR FACXREG
JSR POPREAL
LDA #<X_REG
LDY #>X_REG
JSR FASTFMULMEM
JSR FACXREG
LDA #<VAR_RC%[]
LDY #>VAR_RC%[]
JSR ARRAYACCESS_INTEGER_SI
STY VAR_RS%
STA VAR_RS%+1
JMP RETURN
LINE_57250:
LINE_57255:
JSR COMPACT28
LDA #<CONST_15R
LDY #>CONST_15R
JSR COMPACT13
LDA #<FORLOOP40
STA JUMP_TARGET
LDA #>FORLOOP40
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP40:
LDY #29
LDA #0
STY VAR_CX%
STA VAR_CX%+1
LDA #<CONST_69R
LDY #>CONST_69R
JSR REALFAC
LDA #<VAR_I
LDY #>VAR_I
JSR FASTFADDMEM
JSR FACINT
STY VAR_CY%
STA VAR_CY%+1
JSR GOSUB
JSR LINE_34500
LINE_57260:
LDA #<CONST_130
LDY #>CONST_130
JSR STROUTWL
LINE_57270:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_41
JMP (JUMP_TARGET)
RBEQ_41:
JMP RETURN
LINE_57280:
LINE_57285:
JSR GOSUB
JSR LINE_57250
LDY #29
LDA #0
STY VAR_CX%
STA VAR_CX%+1
LDY #19
JSR COMPACT70
LINE_57290:
LDA #<CONST_131
LDY #>CONST_131
JSR STROUTWL
LINE_57292:
LDY #20
JSR COMPACT70
LDA #<CONST_132
LDY #>CONST_132
JSR STROUTWL
LINE_57294:
LDY #21
JSR COMPACT70
LDA #<CONST_133
LDY #>CONST_133
JSR STROUTWL
LINE_57295:
LDY #22
JSR COMPACT70
LDA #<CONST_134
LDY #>CONST_134
JSR STROUTWL
LINE_57296:
JMP RETURN
LINE_57300:
LINE_57310:
LDA #<CONST_135
LDY #>CONST_135
JSR STROUTBRKWL
JSR END
RTS
LINE_57350:
LINE_57355:
JSR GOSUB
JSR LINE_57250
LDY #29
LDA #0
STY VAR_CX%
STA VAR_CX%+1
LDY #19
JSR COMPACT70
LINE_57360:
LDA #<CONST_136
LDY #>CONST_136
JSR STROUTWL
LINE_57362:
LDY #20
JSR COMPACT70
LDA #<CONST_137
LDY #>CONST_137
JSR STROUTWL
LINE_57364:
LDY #21
JSR COMPACT70
LDA #<CONST_138
LDY #>CONST_138
JSR STROUTWL
LINE_57366:
JMP RETURN
LINE_57400:
LINE_57410:
LDY VAR_CY%
LDA VAR_CY%+1
JSR INTFAC
JSR FACYREG
LDY #5
JSR COMPACT31
JSR COMPACT48
JSR FACXREG
LDY VAR_CX%
LDA VAR_CX%+1
JSR INTFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFADDMEM
JSR COMPACT34
LDX #<VAR_P
LDY #>VAR_P
JSR FACMEM
LDX #4
dcloop4593_3:
LDA VAR_P,X
STA VAR_PP,X
DEX
BPL dcloop4593_3
LDA #<VAR_P
LDY #>VAR_P
JSR REALFAC
JSR FACWORD
STY MOVBSELF85+1
STA MOVBSELF85+2
LDA #$E0
MOVBSELF85:
STA $FFFF
LDA #<VAR_CA
LDY #>VAR_CA
JSR REALFAC
LDA #<VAR_P
LDY #>VAR_P
JSR FASTFADDMEM
JSR FACWORD
STY MOVBSELF86+1
STA MOVBSELF86+2
LDA #$1
MOVBSELF86:
STA $FFFF
LINE_57440:
LDY VAR_S1%
LDA VAR_S1%+1
STY A_REG
STA A_REG+1
LDY #2
JSR INTSHR
STY VAR_P1%
STA VAR_P1%+1
LDY VAR_P1%
LDA VAR_P1%+1
JSR COMPACT113
JSR FACYREG
LDY VAR_S1%
LDA VAR_S1%+1
JSR COMPACT18
JSR FASTFSUBMEM
JSR FACINT
STY VAR_P2%
STA VAR_P2%+1
JSR ONETOFAC
LDA #<VAR_P
LDY #>VAR_P
JSR FASTFADDMEM
LDX #<VAR_P
LDY #>VAR_P
JSR FACMEM
LDY #0
TYA
STY VAR_P3%
STA VAR_P3%+1
LINE_57450:
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_P1%
LDA VAR_P1%+1
JSR ICMP
ROL
BCS GT_GT174
LDA #0
JMP GT_SKIP174
GT_GT174:
LDA #$1
GT_SKIP174:
COMP_SKP238:
BNE LINE_NSKIP368
JMP LINE_SKIP368
LINE_NSKIP368:
LDY VAR_P1%
LDA VAR_P1%+1
JSR SUPERFIDEX
STY VAR_P1%
STA VAR_P1%+1
LDA #<VAR_P
LDY #>VAR_P
JSR COPY2_XYA_YREG
JSR YREGFAC
JSR FACWORD
STY MOVBSELF87+1
STA MOVBSELF87+2
LDA #$E0
MOVBSELF87:
STA $FFFF
JSR COMPACT149
STY MOVBSELF88+1
STA MOVBSELF88+2
LDA #$5
MOVBSELF88:
STA $FFFF
JSR COMPACT147
JSR COMPACT150
JMP LINE_57450
LINE_SKIP368:
LINE_57460:
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_P2%
LDA VAR_P2%+1
JSR ICMP
ROL
BCS GT_GT175
LDA #0
JMP GT_SKIP175
GT_GT175:
LDA #$1
GT_SKIP175:
COMP_SKP239:
BNE LINE_NSKIP369
JMP LINE_SKIP369
LINE_NSKIP369:
LDA #<VAR_P
LDY #>VAR_P
JSR COPY2_XYA_YREG
LDA #<Y_REG
LDY #>Y_REG
JSR REALFACPUSH
LDY #$00
LDA #$02
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_P2%
LDA VAR_P2%+1
JSR INTADD
JSR FACXREG
LDA #<VAR_SB%[]
LDY #>VAR_SB%[]
JSR ARRAYACCESS_INTEGER_SNX
JSR POPREAL
JSR FACWORD
STY MOVBSELF89+1
STA MOVBSELF89+2
JSR XREGFAC
JSR FACWORD
MOVBSELF89:
STY $FFFF
JSR COMPACT149
STY MOVBSELF90+1
STA MOVBSELF90+2
LDA #$5
MOVBSELF90:
STA $FFFF
JSR COMPACT147
JSR COMPACT150
LINE_SKIP369:
LINE_57465:
LDA #$0a
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_P3%
LDA VAR_P3%+1
JSR ICMP
BEQ LT_LT_EQ176
ROL
BCC LT_LT176
LT_LT_EQ176:
LDA #0
JMP LT_SKIP176
LT_LT176:
LDA #$1
LT_SKIP176:
COMP_SKP240:
BNE LINE_NSKIP370
JMP LINE_SKIP370
LINE_NSKIP370:
LDA #<CONST_77R
LDY #>CONST_77R
JSR REALFAC
LDA #<VAR_P
LDY #>VAR_P
JSR FASTFADDMEM
JSR FACXREG
LDY VAR_P3%
LDA VAR_P3%+1
JSR INTFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFSUBMEM
JSR PUSHREAL
JSR COMPACT103
LDA #<FORLOOP41
STA JUMP_TARGET
LDA #>FORLOOP41
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP41:
JSR COMPACT148
STY MOVBSELF91+1
STA MOVBSELF91+2
LDA #$20
MOVBSELF91:
STA $FFFF
LDY #0
TYA
STY A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_42
JMP (JUMP_TARGET)
RBEQ_42:
LINE_SKIP370:
LINE_57470:
JSR ONETOFAC
LDA #<VAR_PP
LDY #>VAR_PP
JSR FASTFSUBMEM
LDX #<VAR_P
LDY #>VAR_P
JSR FACMEM
LINE_57480:
LDY VAR_S2%
LDA VAR_S2%+1
STY A_REG
STA A_REG+1
LDY #2
JSR INTSHR
STY VAR_P1%
STA VAR_P1%+1
LDY VAR_P1%
LDA VAR_P1%+1
JSR COMPACT113
JSR FACYREG
LDY VAR_S2%
LDA VAR_S2%+1
JSR COMPACT18
JSR FASTFSUBMEM
JSR FACINT
STY VAR_P2%
STA VAR_P2%+1
LDY #0
TYA
STY VAR_P3%
STA VAR_P3%+1
LINE_57490:
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_P1%
LDA VAR_P1%+1
JSR ICMP
ROL
BCS GT_GT177
LDA #0
JMP GT_SKIP177
GT_GT177:
LDA #$1
GT_SKIP177:
COMP_SKP242:
BNE LINE_NSKIP371
JMP LINE_SKIP371
LINE_NSKIP371:
LDY VAR_P1%
LDA VAR_P1%+1
JSR SUPERFIDEX
STY VAR_P1%
STA VAR_P1%+1
LDA #<VAR_P
LDY #>VAR_P
JSR COPY2_XYA_YREG
JSR YREGFAC
JSR FACWORD
STY MOVBSELF92+1
STA MOVBSELF92+2
LDA #$E0
MOVBSELF92:
STA $FFFF
JSR COMPACT149
STY MOVBSELF93+1
STA MOVBSELF93+2
LDA #$2
MOVBSELF93:
STA $FFFF
JSR COMPACT151
JSR COMPACT150
JMP LINE_57490
LINE_SKIP371:
LINE_57500:
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_P2%
LDA VAR_P2%+1
JSR ICMP
ROL
BCS GT_GT178
LDA #0
JMP GT_SKIP178
GT_GT178:
LDA #$1
GT_SKIP178:
COMP_SKP243:
BNE LINE_NSKIP372
JMP LINE_SKIP372
LINE_NSKIP372:
LDA #<VAR_P
LDY #>VAR_P
JSR COPY2_XYA_YREG
LDA #<Y_REG
LDY #>Y_REG
JSR REALFACPUSH
LDY VAR_P2%
LDA VAR_P2%+1
JSR FIDEX
LDA #<VAR_SB%[]
LDY #>VAR_SB%[]
JSR ARRAYACCESS_INTEGER_S
JSR POPREAL
JSR FACWORD
STY MOVBSELF94+1
STA MOVBSELF94+2
JSR XREGFAC
JSR FACWORD
MOVBSELF94:
STY $FFFF
JSR COMPACT149
STY MOVBSELF95+1
STA MOVBSELF95+2
LDA #$2
MOVBSELF95:
STA $FFFF
JSR COMPACT151
JSR COMPACT150
LINE_SKIP372:
LINE_57510:
LDA #$0a
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_P3%
LDA VAR_P3%+1
JSR ICMP
BEQ LT_LT_EQ179
ROL
BCC LT_LT179
LT_LT_EQ179:
LDA #0
JMP LT_SKIP179
LT_LT179:
LDA #$1
LT_SKIP179:
COMP_SKP244:
BNE LINE_NSKIP373
JMP LINE_SKIP373
LINE_NSKIP373:
LDY VAR_P3%
LDA VAR_P3%+1
JSR INTFAC
LDA #<CONST_77R
LDY #>CONST_77R
JSR COPY2_XYA_XREG
LDA #<X_REG
LDY #>X_REG
JSR FASTFSUBMEM
JSR FACYREG
LDA #<VAR_P
LDY #>VAR_P
JSR COMPACT23
JSR PUSHREAL
LDA #<CONST_9
LDY #>CONST_9
JSR REALFACPUSH
LDA #<VAR_P
LDY #>VAR_P
STA A_REG
STY A_REG+1
LDA #<FORLOOP42
STA JUMP_TARGET
LDA #>FORLOOP42
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP42:
JSR COMPACT148
STY MOVBSELF96+1
STA MOVBSELF96+2
LDA #$20
MOVBSELF96:
STA $FFFF
LDY #0
TYA
STY A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_43
JMP (JUMP_TARGET)
RBEQ_43:
LINE_SKIP373:
LINE_57520:
JMP RETURN
LINE_58000:
LINE_58010:
LDA #0
STA VAR_I4
STA VAR_I4+1
STA VAR_I4+2
STA VAR_I4+3
STA VAR_I4+4
LDA #<CONST_13R
LDY #>CONST_13R
JSR REALFACPUSH
LDA #<CONST_2R
LDY #>CONST_2R
JSR REALFACPUSH
LDA #<VAR_I4
LDY #>VAR_I4
STA A_REG
STY A_REG+1
LDA #<FORLOOP43
STA JUMP_TARGET
LDA #>FORLOOP43
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP43:
LDA #<VAR_I4
LDY #>VAR_I4
JSR COPY2_XYA_XREG
LDA #<VAR_PF%[]
LDY #>VAR_PF%[]
JSR ARRAYACCESS_INTEGER_SI
STY VAR_CN%
STA VAR_CN%+1
JSR COMPACT115
EQ_EQ180:
EQ_SKIP180:
COMP_SKP246:
BNE LINE_SKIP374
LINE_NSKIP374:
JMP LINE_58100
LINE_SKIP374:
LINE_58020:
LDA #<CONST_14R
LDY #>CONST_14R
JSR REALFAC
LDA #<VAR_I4
LDY #>VAR_I4
JSR FASTFADDMEM
LDX #<VAR_II
LDY #>VAR_II
JSR FACMEM
JSR COMPACT102
JSR ARRAYACCESS_INTEGER_SI
STY VAR_CB%
STA VAR_CB%+1
JSR COMPACT120
NEQ_NEQ181:
NEQ_SKIP181:
COMP_SKP247:
BEQ LINE_SKIP375
LINE_NSKIP375:
JMP LINE_58100
LINE_SKIP375:
LINE_58030:
LDA #<VAR_II
LDY #>VAR_II
JSR REALFACPUSH
LDA #<VAR_I4
LDY #>VAR_I4
JSR COPY2_XYA_XREG
LDA #<VAR_PF%[]
LDY #>VAR_PF%[]
JSR ARRAYACCESS_INTEGER_S
JSR COPY_XREG2YREG
JSR POPREALXREG
LDA #<VAR_PF%[]
LDY #>VAR_PF%[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_INTEGER_NX
LDA #<VAR_II
LDY #>VAR_II
JSR REALFACPUSH
LDA #<VAR_I4
LDY #>VAR_I4
JSR COPY2_XYA_XREG
LDA #<VAR_HP%[]
LDY #>VAR_HP%[]
JSR ARRAYACCESS_INTEGER_S
JSR COMPACT164
JSR ARRAYSTORE_INTEGER_NX
LDA #<VAR_I4
LDY #>VAR_I4
JSR COPY2_XYA_XREG
LDA #<CONST_9
LDY #>CONST_9
JSR COPY2_XYA_YREG
JSR COMPACT56
LINE_58040:
LDY #0
TYA
STY VAR_YC%
STA VAR_YC%+1
LDA #<CONST_20R
LDY #>CONST_20R
JSR REALFAC
LDA #<VAR_I4
LDY #>VAR_I4
JSR FASTFMULMEM
JSR FACINT
STY VAR_XC%
STA VAR_XC%+1
JSR GOSUB
JSR LINE_32100
LINE_58050:
LDY #4
LDA #0
STY VAR_YC%
STA VAR_YC%+1
LDA #<VAR_II
LDY #>VAR_II
JSR COPY2_XYA_XREG
JSR COMPACT95
LINE_58100:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_44
JMP (JUMP_TARGET)
RBEQ_44:
JMP RETURN
LINE_58500:
LINE_58510:
JSR COMPACT28
LDA #<CONST_80R
LDY #>CONST_80R
JSR REALFACPUSH
LDA #<CONST_13R
LDY #>CONST_13R
JSR REALFAC
JSR FACYREG
LDA #<Y_REG
LDY #>Y_REG
JSR COMPACT14
LDA #<FORLOOP44
STA JUMP_TARGET
LDA #>FORLOOP44
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP44:
LINE_58520:
JSR READMAYBEBYTE
STY VAR_A%
STA VAR_A%+1
JSR READMAYBEBYTE
STY VAR_B%
STA VAR_B%+1
JSR READMAYBEBYTE
STY VAR_C%
STA VAR_C%+1
LDA #<VAR_I
LDY #>VAR_I
JSR REALFAC
JSR FACINT
STY VAR_I%
STA VAR_I%+1
LINE_58530:
LDY VAR_A%
LDA VAR_A%+1
STY AS_TMP
STA AS_TMP+1
LDA #<VAR_SK%[]
LDY #>VAR_SK%[]
STA G_REG
STY G_REG+1
LDY VAR_I%
LDA VAR_I%+1
JSR ARRAYSTORE_INT_INTEGER_AC
LDY VAR_I%
LDA VAR_I%+1
JSR FIINX
LDY VAR_B%
LDA VAR_B%+1
JSR COMPACT154
JSR ARRAYSTORE_INT_INTEGER
LDY #$00
LDA #$02
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_I%
LDA VAR_I%+1
JSR INTADD
JSR FACXREG
LDY VAR_C%
LDA VAR_C%+1
JSR COMPACT154
JSR ARRAYSTORE_INT_INTEGER
LINE_58540:
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_45
JMP (JUMP_TARGET)
RBEQ_45:
JMP RETURN
LINE_58999:
LINE_59000:
LDY #11
STY 53285
LINE_59010:
LDY #1
STY 53286
LINE_59020:
LDY #0
STY 53269
LINE_59030:
LDX #4
dcloop4905_1:
LDA CONST_140,X
STA VAR_X,X
DEX
BPL dcloop4905_1
LDA #<CONST_141
LDY #>CONST_141
JSR REALFACPUSH
JSR ONETOFAC
JSR FACYREG
LDA #<Y_REG
LDY #>Y_REG
JSR REALFACPUSH
LDA #<VAR_X
LDY #>VAR_X
STA A_REG
STY A_REG+1
LDA #<FORLOOP45
STA JUMP_TARGET
LDA #>FORLOOP45
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP45:
JSR READMAYBEBYTE
STY VAR_Y%
STA VAR_Y%+1
LDA #<VAR_X
LDY #>VAR_X
JSR REALFAC
JSR FACWORD
STY MOVBSELF100+1
STA MOVBSELF100+2
LDY VAR_Y%
MOVBSELF100:
STY $FFFF
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
LDA A_REG
BNE RBEQ_46
JMP (JUMP_TARGET)
RBEQ_46:
LINE_59040:
LINE_59050:
LDY #5
STY 53287
LINE_59060:
LDY #0
STY 53240
LINE_59070:
LDY #97
STY 53248
LINE_59080:
LDY #100
STY 53249
LINE_59090:
LINE_59100:
LDY #15
STY 53288
LINE_59110:
LDY #1
STY 53241
LINE_59120:
LDY #124
STY 53250
LINE_59130:
LDY #100
STY 53251
LINE_59190:
LDY #7
STY 53276
LINE_59200:
LDY #0
STY 53277
LINE_59210:
LDY #0
STY 53271
LINE_59215:
JMP RETURN
LINE_59220:
LINE_59230:
LINE_59240:
LINE_59250:
LINE_59260:
LINE_59270:
LINE_59280:
LINE_59290:
LINE_59300:
LINE_59310:
LINE_59999:
LINE_60010:
LINE_60020:
LINE_60030:
LINE_60040:
LINE_60050:
LINE_60060:
LINE_60070:
LINE_60080:
LINE_60090:
LINE_60100:
LINE_60110:
LINE_60120:
LINE_60130:
LINE_60140:
LINE_60150:
LINE_60160:
LINE_60170:
LINE_60180:
LINE_60190:
LINE_60200:
LINE_60210:
LINE_60220:
LINE_60230:
LINE_61000:
LINE_61010:
LINE_61020:
LINE_61030:
LINE_61040:
LINE_61050:
LINE_62800:
LINE_62805:
LINE_62810:
LINE_62820:
LINE_62830:
LINE_62840:
LINE_62850:
LINE_62860:
LINE_62870:
LINE_62899:
LINE_62900:
LINE_62910:
LINE_62920:
LINE_62930:
LINE_62940:
LINE_62942:
LINE_62944:
LINE_62946:
LINE_62948:
LINE_62950:
LINE_62952:
LINE_62954:
LINE_62956:
LINE_62958:
LINE_62960:
LINE_62962:
LINE_63000:
LINE_63002:
LINE_63004:
LINE_63006:
LINE_63007:
LINE_63008:
LINE_63010:
LINE_63011:
LINE_63012:
LINE_63014:
LINE_63016:
LINE_63018:
LINE_63020:
LINE_63022:
LINE_63023:
LINE_63024:
LINE_63026:
LINE_63028:
LINE_63030:
LINE_63034:
LINE_63036:
LINE_63038:
LINE_63040:
LINE_63042:
LINE_63044:
LINE_63046:
LINE_63048:
LINE_63050:
LINE_63052:
LINE_63054:
LINE_63056:
LINE_63060:
LINE_63062:
LINE_63064:
LINE_63065:
LINE_63066:
LINE_63068:
LINE_63070:
LINE_63072:
LINE_63074:
LINE_63076:
LINE_63078:
LINE_63080:
LINE_63090:
LINE_63100:
LINE_63110:
LINE_63120:
LINE_63130:
LINE_63140:
LINE_63150:
LINE_63160:
LINE_63170:
LINE_63180:
LINE_63190:
LINE_63200:
LINE_63210:
LINE_63220:
JSR END
RTS
;###################################
END			LDX SP_SAVE
TXS
<IF BIGRAM>
JSR ENABLEROM
</IF>
<IF BOOST>
JSR BOOSTDIASBLE
</IF>
RTS
;###################################
;###################################
SYSTEMCALL
LDA TMP_ZP
STA SCDO+1
LDA TMP_ZP+1
STA SCDO+2
LDA $030F
PHA
LDA $030C
LDX $030D
LDY $030E
PLP
<IF BIGRAM>
JSR ENABLEROM
</IF>
SCDO		JSR $FFFF
<IF BIGRAM>
JSR DISABLEROM
</IF>
PHP
STA $030C
STX $030D
STY $030E
PLA
STA $030F
RTS
;###################################
;###################################
START		LDA ENDSTRBUF+1
BNE ENDGIVEN
LDA BASICEND
STA ENDSTRBUF
LDA BASICEND+1
STA ENDSTRBUF+1
ENDGIVEN	LDA #<FPSTACK
LDY #>FPSTACK
STA FPSTACKP
STY FPSTACKP+1
LDA #<FORSTACK
LDY #>FORSTACK
STA FORSTACKP
STY FORSTACKP+1
LDA #<STRBUF
LDY #>STRBUF
STA STRBUFP
STY STRBUFP+1
STA HIGHP
STY HIGHP+1
LDA #0
STA CHLOCKFLAG
STA LASTVAR
STA LASTVAR+1
JSR INITVARS
LDA #0
STA CMD_NUM
STA CHANNEL
TAY
TAX
<IF X16>
JSR VARBANKON
</IF>
STA KEYNDX
<IF X16>
JSR VARBANKOFF
LDA #DEFAULT_BANK
STA RAMSELECT
</IF>
JSR RESTORE
CLC
<IF BOOST>
JSR BOOSTENABLE
</IF>
RTS
;###################################
;###################################
RESTARTPRG	LDA #<FPSTACK
LDY #>FPSTACK
STA FPSTACKP
STY FPSTACKP+1
LDA #<FORSTACK
LDY #>FORSTACK
STA FORSTACKP
STY FORSTACKP+1
JMP LINE_0
;###################################
;###################################
INITNARRAY
STA TMP_ZP
STY TMP_ZP+1
LDY #0
TYA
NINITLOOP	STA (TMP_ZP),Y
INC TMP_ZP
BNE NLOOPNOV
INC TMP_ZP+1
NLOOPNOV	LDX TMP2_ZP
BNE NLOOPNOV2
DEC TMP2_ZP+1
NLOOPNOV2	DEC TMP2_ZP
BNE NINITLOOP
LDX TMP2_ZP+1
BNE NINITLOOP
RTS
;###################################
;###################################
INITSTRARRAY
STA TMP_ZP
STY TMP_ZP+1
SINITLOOP	LDY #0
LDA #<EMPTYSTR
STA (TMP_ZP),Y
LDA #>EMPTYSTR
INY
STA (TMP_ZP),Y
CLC
LDA TMP_ZP
ADC #2
STA TMP_ZP
BCC SLOOPNOV1
INC TMP_ZP+1
SLOOPNOV1	SEC
LDA TMP2_ZP
SBC #2
STA TMP2_ZP
BCS SLOOPNOV2
DEC TMP2_ZP+1
SLOOPNOV2	LDA TMP2_ZP
BNE SINITLOOP
LDA TMP2_ZP+1
BNE SINITLOOP
RTS
;###################################
;###################################
INITSPARAMS	STA TMP3_ZP
STY TMP3_ZP+1
SEC
SBC #2
STA TMP_ZP
TYA
SBC #0
STA TMP_ZP+1
LDY #0
LDA (TMP_ZP),Y
STA TMP2_ZP
INY
LDA (TMP_ZP),Y
STA TMP2_ZP+1
LDA TMP3_ZP
LDY TMP3_ZP+1
RTS
;##################################
;##################################
INITSTRVARS	LDA #<STRINGVARS_START		; Reset all string variables...
LDY #>STRINGVARS_START
CMP #<STRINGVARS_END
BNE INITIT1
CPY #>STRINGVARS_END
BNE INITIT1
JMP INITSA2					; No string variables at all
INITIT1		STA TMP_ZP
STY TMP_ZP+1
LDY #0
INITSTRLOOP	LDA #<EMPTYSTR
STA (TMP_ZP),Y
INY
LDA #>EMPTYSTR
STA (TMP_ZP),Y
DEY
LDA TMP_ZP
CLC
ADC #2
STA TMP_ZP
LDA TMP_ZP+1
ADC #0
STA TMP_ZP+1
CMP #>STRINGVARS_END
BNE INITSTRLOOP
LDA TMP_ZP
CMP #<STRINGVARS_END
BNE INITSTRLOOP
INITSA2		LDA #<STRINGARRAYS_START	; ...and all string arrays
LDY #>STRINGARRAYS_START
CMP #<STRINGARRAYS_END
BNE ARRAYLOOP
CPY #>STRINGARRAYS_END
BNE ARRAYLOOP
RTS							;...no string array at all
ARRAYLOOP	CLC
ADC #3
BCC ARRAYSKIP1
INY
ARRAYSKIP1	CPY #>STRINGARRAYS_END
BEQ ARRAYSC
BCC ARRAYSKIP2
JMP ARRAYQUIT
ARRAYSC		CMP #<STRINGARRAYS_END
BCS ARRAYQUIT
ARRAYSKIP2	STA TMP_REG
STY TMP_REG+1
JSR INITSPARAMS
LDA TMP_REG
LDY TMP_REG+1
JSR INITSTRARRAY
LDA TMP_ZP
LDY TMP_ZP+1
JMP ARRAYLOOP
ARRAYQUIT	RTS
;###################################
;###################################
RESTORE		LDA #<DATAS
LDY #>DATAS
STA DATASP
STY DATASP+1
RTS
;###################################
;###################################
MID			LDA #<D_REG
LDY #>D_REG
JSR REALFAC
JSR SGNFAC
ROL
BCC MIDLENGTH		; an actual length was given...
MIDNEGC		JSR STRFUNCINT		; ...no, it wasn't.
LDA TMP_REG			; copy start position from TMP_REG into TMP_REG+1
STA TMP_REG+1
BNE MIDOK2
JMP ILLEGALQUANTITY	; start has to be larger than 0
MIDOK2		DEC TMP_REG+1		; BASIC starts at 1, we start at 0
LDA (TMP_ZP),Y
SEC
SBC TMP_REG+1
STA TMP_REG			; store the calculated length
BCS	MIDNOV2
STY TMP_REG			; Set length to 0, if start>string length
JMP MIDNOV2
MIDLENGTH	JSR FACWORD
MIDCONST	STY TMP2_REG		; save the length in TMP2_REG
JSR STRFUNCINT
LDA TMP_REG			; copy start position from TMP_REG into TMP_REG+1
BNE MIDOK
JMP ILLEGALQUANTITY	; start has to be larger than 0
MIDOK		LDX TMP2_REG
STX TMP_REG			; store the length saved above in TMP_REG
STA TMP_REG+1
DEC TMP_REG+1		; BASIC starts at 1, we start at 0
MIDNOV
MIDNOV2		LDA TMP_REG+1		; the starting position
CLC
ADC TMP_REG			; add the length
BCS MIDCLAMP
CMP (TMP_ZP),Y
BCS	MIDCLAMP
MIDCOPY		JMP STRFUNC
MIDCLAMP	LDA (TMP_ZP),Y		; Clamp to the string's length, if needed...
SEC
SBC TMP_REG+1
STA TMP_REG
BCS MIDCOPY
STY TMP_REG
JMP MIDCOPY
;###################################
;###################################
RIGHT		JSR STRFUNCINT
RIGHT2		LDA (TMP_ZP),Y
TAX
CMP TMP_REG			; compare the source string's length with the parameter
BCS RIGHTBELOW
STA TMP_REG			; length>source length? -> clamp to source length
RIGHTBELOW	TXA
SEC
SBC TMP_REG
BCS RIGHTNOV
LDA #0
RIGHTNOV	STA TMP_REG+1
JMP STRFUNC
;###################################
;###################################
LEFTCONSTA	CMP #0
BEQ LEFTCONST
LDY #$FF
LEFTCONST	JSR STRFUNCINTINT
JMP LEFT2
;###################################
;###################################
LEFT		JSR STRFUNCINT
LEFT2		STY TMP_REG+1		; store the start position (always 0 for left$)
LDA (TMP_ZP),Y
CMP TMP_REG			; compare the source string's length with the parameter
BCS LEFTBELOW
STA TMP_REG			; length>source length? -> clamp to source length
LEFTBELOW	JMP STRFUNC
;###################################
;###################################
STRFUNCINT 	LDA B_REG			;the source string
STA TMP_ZP
LDA B_REG+1
STA TMP_ZP+1
LDA #<C_REG
LDY #>C_REG
JSR REALFAC
JSR FACWORD
STY TMP_REG			; store the parameter
LDY #0
RTS
;###################################
;###################################
STRFUNCINTINT
LDA B_REG			;the source string
STA TMP_ZP
LDA B_REG+1
STA TMP_ZP+1
STY TMP_REG			; store the parameter
LDY #0
RTS
;###################################
;###################################
STRFUNC		LDA TMP_REG+1
BEQ STARTATZERO
LDA TMP_ZP
CLC
ADC TMP_REG+1
STA TMP_ZP
BCC STARTATZERO
INC TMP_ZP+1
STARTATZERO	LDY #0
LDA (TMP_ZP),Y
PHA					; save the first byte of the source string on the stack
LDA TMP_REG
BNE STRFUNCNZ
LDA #<EMPTYSTR
STA A_REG
LDA #>EMPTYSTR
STA A_REG+1
PLA					; if the lenght is 0, it's an indicator that we are outside of the string (or the length is actual 0)
JMP EXITSTRFUNC
STRFUNCNZ	STA (TMP_ZP),Y
LDA #<A_REG
LDY #>A_REG
STA TMP2_ZP
STY TMP2_ZP+1
LDX TMP_REG			; Put length into X for copy
JSR COPYONLY
PLA
LDY #0
STA (TMP_ZP),Y		; restore the first byte of the source string from the stack
EXITSTRFUNC	RTS
;###################################
;###################################
CONCAT		LDA A_REG
STA TMP_ZP
LDA A_REG+1
STA TMP_ZP+1
LDA STRBUFP		; adjust A_REG so that it points to the new tmp buffer
STA A_REG
STA TMP3_ZP
LDA STRBUFP+1
STA A_REG+1
STA TMP3_ZP+1
LDY #0
LDA (TMP_ZP),Y
TAX
LDA B_REG
STA TMP2_ZP
LDA B_REG+1
STA TMP2_ZP+1
TXA
CLC
ADC (TMP2_ZP),Y
BCC CCSTRFITS
JMP STRINGTOOLONG
CCSTRFITS	STA (TMP3_ZP),Y
INC TMP3_ZP
BNE CCNOOV2
INC TMP3_ZP+1
CCNOOV2		CLC
ADC STRBUFP
PHP
CLC
ADC #3
STA STRBUFP
BCC CCNOCS1
INC STRBUFP+1
CCNOCS1		PLP
BCC CCSTRFITS2
INC STRBUFP+1
CCSTRFITS2	JSR COPY2CONCAT		;...copy into the buffer
LDA B_REG			;set the content to append
STA TMP_ZP
LDA B_REG+1
STA TMP_ZP+1
JMP COPY2CONCAT		;..and copy it
;###################################
;###################################
COPY2CONCAT	LDY #0
LDA (TMP_ZP),Y
BEQ NOC2C			; Nothing to append, skip
STA TMP2_ZP
INC TMP_ZP
BNE COPY2LOOP
INC TMP_ZP+1
COPY2LOOP	LDA (TMP_ZP),Y
STA (TMP3_ZP),Y
INY
CPY TMP2_ZP
BNE COPY2LOOP
TYA
CLC
ADC TMP3_ZP			; Update tmp pointer in concat memory
STA TMP3_ZP
BCC NOC2C
INC TMP3_ZP+1
NOC2C		RTS
;###################################
;###################################
FASTFOR		JSR POPREAL
JSR SGNFAC
STA TMP_REG		; store sign
BCC FFPOSSTEP
LDA #<REAL_CONST_MINUS_ONE	; negative...negate it
LDY #>REAL_CONST_MINUS_ONE
JSR MEMARG	; to ARG
JSR FACMUL	; MUL
FFPOSSTEP	JSR FACWORD	; to WORD
STY TMP2_ZP
STA TMP2_ZP+1	; step
LDA A_REG
LDY A_REG+1
JSR REALFAC
JSR FACWORD
STY TMP_ZP
STA TMP_ZP+1	; from
JSR POPREAL
JSR FACWORD
STY TMP2_ZP+2
STA TMP2_ZP+3	; end
JSR XREGFAC
JSR FACINT
STY TMP3_ZP		; value
LDA TMP2_ZP+1
BNE STEPNOTONE
LDA TMP2_ZP
CMP #$1
BNE STEPNOTONE
JMP STEPONE
STEPNOTONE	LDA TMP_REG
BEQ FFSTEPZERO
ROL
FFSTEPZERO	BCC FFSTEPPOS
FFSTEPNEG	LDY #0
LDA TMP3_ZP
TAX
FFNEGLOOP	TXA
STA (TMP_ZP),Y
LDA TMP_ZP
SEC
SBC TMP2_ZP
STA TMP_ZP
LDA TMP_ZP+1
BCS	FFNEGSKIP
SBC TMP2_ZP+1
STA TMP_ZP+1
FFNEGSKIP	CMP TMP2_ZP+3
BEQ FFNEGCHECK2
BCS FFNEGLOOP
JMP FFDONE
FFNEGCHECK2	LDA TMP_ZP
CMP TMP2_ZP+2
BCS FFNEGLOOP
JMP FFDONE
FFSTEPPOS	LDY #0
LDA TMP3_ZP
TAX
FFPOSLOOP	TXA
STA (TMP_ZP),Y
LDA TMP_ZP
CLC
ADC TMP2_ZP
STA TMP_ZP
LDA TMP_ZP+1
BCC	FFPOSSKIP
ADC TMP2_ZP+1
STA TMP_ZP+1
FFPOSSKIP	CMP TMP2_ZP+3
BCC FFPOSLOOP
BEQ FFPOSCHECK2
JMP FFDONE
FFPOSCHECK2	LDA TMP_ZP
CMP TMP2_ZP+2
BCC FFPOSLOOP
BEQ FFPOSLOOP
FFDONE		LDY TMP_ZP
LDA TMP_ZP+1
JSR INTFAC
LDX A_REG
LDY A_REG+1
LDA #1
STA A_REG
JMP FACMEM		; Store end value in loop variable
STEPONE	LDA TMP_REG
BEQ OFFSTEPZERO
ROL
OFFSTEPZERO	BCC OFFSTEPPOS
OFFSTEPNEG	LDY #0
LDA TMP3_ZP
TAX
OFFNEGLOOP	TXA
STA (TMP_ZP),Y
LDA TMP_ZP
BNE ONOOVERFLOW
DEC TMP_ZP+1
ONOOVERFLOW	DEC TMP_ZP
LDA TMP_ZP+1
OFFNEGSKIP	CMP TMP2_ZP+3
BEQ OFFNEGCHECK2
BCS OFFNEGLOOP
JMP FFDONE
OFFNEGCHECK2
LDA TMP_ZP
CMP TMP2_ZP+2
BCS OFFNEGLOOP
JMP FFDONE
OFFSTEPPOS	LDY #0
LDA TMP3_ZP
TAX
OFFPOSLOOP	TXA
STA (TMP_ZP),Y
INC TMP_ZP
BNE ONOOVERFLOW2
INC TMP_ZP+1
ONOOVERFLOW2
LDA TMP_ZP+1
OFFPOSSKIP	CMP TMP2_ZP+3
BCC OFFPOSLOOP
BEQ OFFPOSCHECK2
JMP FFDONE
OFFPOSCHECK2
LDA TMP_ZP
CMP TMP2_ZP+2
BCC OFFPOSLOOP
BEQ OFFPOSLOOP
JMP FFDONE
;###################################
;###################################
STR			JSR YREGFAC
STRINT		LDY #1
JSR FACSTR
LDY #0
STY TMP_ZP+1
LDA #LOFBUF
STA TMP_ZP
DEY
STRLOOP		INY
LDA LOFBUFH,Y
BNE STRLOOP
STY LOFBUF
TYA
TAX			; Length in X
LDA #<A_REG
LDY #>A_REG
STA TMP2_ZP
STY TMP2_ZP+1
JMP COPYONLY
;###################################
;###################################
VAL			LDA B_REG
STA INDEX1
LDA B_REG+1
STA INDEX1+1
LDY #0
STY VALTYPE
LDA (INDEX1),Y
BNE	DOACVAL
JMP ZEROSET
DOACVAL		TAY
INC INDEX1
BNE VALSTR
INC INDEX1+1
VALSTR		JSR VALS
JMP FACXREG	;RTS is implicit
;###################################
;###################################
LEN			LDA B_REG
STA TMP_ZP
LDA B_REG+1
STA TMP_ZP+1
LDY #0
LDA (TMP_ZP),Y
STA TMP2_ZP		;For use in a later optimization
BEQ ZEROLEN
TAY
LDA #0
JSR INTFAC
JMP FACXREG	;RTS is implicit
ZEROLEN		JMP ZEROSET
;###################################
;###################################
ASC			LDA B_REG
STA TMP_ZP
LDA B_REG+1
STA TMP_ZP+1
LDY #0
LDA (TMP_ZP),Y
BNE DOASC
JMP ILLEGALQUANTITY
DOASC		INY
LDA (TMP_ZP),Y
STA TMP2_ZP		;For use in a later optimization
TAY
LDA #0
JSR INTFAC
JMP FACXREG
;###################################
;###################################
CHRXREG     JSR XREGFAC
JMP CHRFAC2
;###################################
;###################################
CHR			JSR YREGFAC
CHRFAC2		JSR FACWORD
TYA
TAX
LDA STRBUFP
STA TMP_ZP
STA A_REG
LDA STRBUFP+1
STA TMP_ZP+1
STA A_REG+1
LDA #1
LDY #0
STA (TMP_ZP),Y
TXA
LDY #1
STA (TMP_ZP),Y
LDA STRBUFP
CLC
ADC #2
STA STRBUFP
BCC NOCHR1
INC STRBUFP+1
NOCHR1		RTS
;###################################
;###################################
SAVEPOINTERS
LDA TMP_ZP			; ...save the pointers
STA STORE1
LDA TMP_ZP+1
STA STORE1+1
LDA TMP2_ZP
STA STORE2
LDA TMP2_ZP+1
STA STORE2+1
LDA TMP3_ZP
STA STORE3
LDA TMP3_ZP+1
STA STORE3+1
RTS
;###################################
;###################################
RESTOREPOINTERS
LDA STORE3+1		; ...restore the pointers
STA TMP3_ZP+1
LDA STORE3
STA TMP3_ZP
LDA STORE2+1
STA TMP2_ZP+1
LDA STORE2
STA TMP2_ZP
LDA STORE1+1
STA TMP_ZP+1
LDA STORE1
STA TMP_ZP
RTS
;###################################
;###################################
COMPACTMAX
LDA #$FF
LDY #$0
JMP COMPACTF
;###################################
;###################################
COMPACT
LDY #0
GCBUFNE		LDA (TMP_ZP),Y		; Get the source's length
COMPACTF	STA TMP4_REG		; ...and store it
LDY STRBUFP+1		; First, check if the new string would fit into memory...
STY TMP4_REG+1		; For that, we have to calculate the new strbufp after adding the string
INY					; add 1 to the high byte to check, if at least 256 bytes are free (fast path)
BEQ ENDMEM			; actually, if this happens, all went wrong anyway...whatever...
CPY ENDSTRBUF+1		; check, if there are at least 256 bytes free. If there are, no detailed check is needed...
BCC RGCEXIT			; there are? We are out then.
ENDMEM		LDA STRBUFP
CLC
ADC TMP4_REG
STA TMP4_REG
BCC	RGCNOOV1
INC TMP4_REG+1
RGCNOOV1	CLC
LDA TMP4_REG
ADC #3
STA TMP4_REG
BCC	RGCNOOV2
INC TMP4_REG+1
RGCNOOV2	LDA TMP4_REG+1		; Now do the actual check
CMP ENDSTRBUF+1
BEQ RGCLOW1
BCS GCEXECOMP		; Doesn't fit, run GC!
JMP RGCEXIT
RGCLOW1		LDA TMP4_REG
CMP ENDSTRBUF
BCS	GCEXECOMP		; This also triggers if it would fit exactly...but anyway...
RGCEXIT		RTS					; It fits? Then exit without GC
;###################################
;###################################
GCEXECOMP	LDA STRBUFP
STA STORE4
LDA STRBUFP+1
STA STORE4+1
JSR GCEXE
JMP CHECKMEMORY
;###################################
;###################################
GCEXE		JSR SAVEPOINTERS
LDA #0
STA LASTVAR
STA LASTVAR+1		; reset the last variable pointer to 0
LDA #<STRBUF
STA TMP_ZP
STA GCSTART
LDA #>STRBUF
STA TMP_ZP+1		; Pointer into the string memory, initialized to point at the start...
STA GCSTART+1
GCLOOP		LDY #0
LDA TMP_ZP
STA GCWORK
LDA TMP_ZP+1
STA GCWORK+1		; store the pointer for later use...
LDA (TMP_ZP),Y
STA GCLEN			; store the length
INC TMP_ZP
BNE GCLOOPNOOV
INC TMP_ZP+1
GCLOOPNOOV	LDA TMP_ZP
CLC
ADC GCLEN
STA TMP_ZP
BCC GCLOOPNOOV2
INC TMP_ZP+1		; TMP_ZP now points to the reference to the string variable that used this chunk once
GCLOOPNOOV2 LDY #0
LDA (TMP_ZP),Y
STA TMP2_ZP
INY
LDA (TMP_ZP),Y
STA TMP2_ZP+1		; Store the variable reference in TMP2_ZP
LDA TMP_ZP
CLC
ADC #2
STA TMP_ZP
BCC GCLOOPNOOV3
INC TMP_ZP+1		; adjust the pointer to point to the next entry
GCLOOPNOOV3 LDY #0
LDA (TMP2_ZP),Y
CMP GCWORK
BNE GCKLOOP
INY
LDA (TMP2_ZP),Y
CMP GCWORK+1
BEQ MEMFREE
GCKLOOP		LDA TMP_ZP+1		; Check if we have processed all of the string memory...
CMP HIGHP+1
BEQ GCHECKLOW
BCC GCLOOP
JMP GCDONE
GCHECKLOW	LDA TMP_ZP
CMP HIGHP
BCS GCDONE
JMP GCLOOP
MEMFREE		LDA GCSTART			; found a variable that points to this chunk...
CMP GCWORK			; ...then check if the can be copied down. This is the case if GCSTART!=GCWORK
BNE COPYDOWN
LDA GCSTART+1
CMP GCWORK+1
BNE COPYDOWN
LDA TMP_ZP			; GCSTART==GCWORK...adjust GCSTART and continue
STA GCSTART
LDA TMP_ZP+1
STA GCSTART+1
JMP	GCKLOOP			; continue if needed...
COPYDOWN	LDA GCSTART			; There's a gap in memory, so copy the found variable down to GCSTART and adjust GCSTART accordingly
STA TMP_REG
LDA GCSTART+1
STA TMP_REG+1		; set the target location...
LDA GCWORK
STA TMP2_REG
LDA GCWORK+1
STA TMP2_REG+1		; set the source location...
LDA TMP_ZP
SEC
SBC GCWORK
STA TMP3_REG
LDA TMP_ZP+1
SBC GCWORK+1
STA TMP3_REG+1		; set the length
LDA GCSTART
CLC
ADC TMP3_REG
STA GCSTART
LDA GCSTART+1
ADC TMP3_REG+1
STA GCSTART+1		; update GCSTART to point to the next free chunk
JSR QUICKCOPY		; copy the chunk down to (former, now stored in TMP_REG) GCSTART
LDY #0
LDA TMP_REG
STA (TMP2_ZP),Y
INY
LDA TMP_REG+1
STA (TMP2_ZP),Y		; ...and adjust the pointer to the memory in the variable to that new location
JMP GCKLOOP
GCDONE		LDA GCSTART
STA HIGHP
STA STRBUFP
LDA GCSTART+1
STA HIGHP+1
STA STRBUFP+1		; Update the string pointers to the new, hopefully lower position
GCSKIP		JSR RESTOREPOINTERS
RTS					; Remember: GC has to adjust highp as well!
;###################################
;###################################
CHECKMEMORY
LDA STRBUFP+1		; Check if we are out of memory even after a garbage collection.
CMP STORE4+1		; This is indicated by the string pointer being still equal or higher
BCC STILLFITSCM		; than before the GC. We are not checking against the actual memory limit,
BEQ CHECKMEMLOWCM
JMP OUTOFMEMORY		; STRBUFP>last value? OOM!
CHECKMEMLOWCM
LDA STRBUFP			; High bytes are equal? Check low bytes
CMP STORE4
BCC	STILLFITSCM
JMP OUTOFMEMORY		; No? OOM
STILLFITSCM RTS
;###################################
;###################################
QUICKCOPY	LDA TMP_REG		; a self modifying copy routine
STA TMEM+1
LDA TMP_REG+1
STA TMEM+2
LDA TMP2_REG
STA SMEM+1
LDA TMP2_REG+1
STA SMEM+2
LDY #$0
LDX TMP3_REG
BNE QCLOOP
LDA TMP3_REG+1
BEQ QCEXIT		; length is null, nothing to copy
QCLOOP
SMEM		LDA $0000,Y
TMEM		STA $0000,Y
INY
BNE YNOOV
INC TMEM+2
INC SMEM+2
YNOOV		DEX
BNE QCLOOP
LDA TMP3_REG+1
BEQ QCEXIT
DEC TMP3_REG+1
JMP QCLOOP
QCEXIT		RTS
;###################################
;###################################
COPYSTRING	STA TMP2_ZP
STY TMP2_ZP+1
CPY TMP_ZP+1
BNE CONTCOPY
LDA TMP2_ZP
CMP TMP_ZP
BNE CONTCOPY
RTS					; A copy from a variable into the same instance is pointless an will be ignored.
CONTCOPY	JSR COMPACT			; Do a GC if needed
LDY #0
STY TMP_FLAG
LDA (TMP_ZP),Y
BNE NOTEMPTYSTR
LDA #<EMPTYSTR		; The source is empty? Then assign the empty string constant instead
STA TMP_ZP
LDA #>EMPTYSTR
STA TMP_ZP+1
JMP ISCONST
NOTEMPTYSTR	TAX					; Store the length of the source in X...this is valid until right to the end, where it's not longer used anyway
LDA (TMP2_ZP),Y
STA TMP3_ZP
INY
LDA (TMP2_ZP),Y
STA TMP3_ZP+1
DEY
LDA TMP_ZP+1		; Check if the source is a constant (upper bound). If so, don't copy it but just point to it
CMP #>CONSTANTS_END
BEQ CHECKLOW1
BCS INVAR
JMP CHECKNEXT
CHECKLOW1	LDA TMP_ZP
CMP #<CONSTANTS_END
BCS INVAR
CHECKNEXT	LDA TMP_ZP+1		; Check if the source is a constant (lower bound). If so, don't copy it but just point to it
CMP #>CONSTANTS
BEQ CHECKLOW3
BCC INVAR
JMP ISCONST
CHECKLOW3	LDA TMP_ZP
CMP #<CONSTANTS
BCC INVAR			; No, it's not a constant. It's something from lower memory...
ISCONST		JSR CHECKLASTVAR	; Reclaim formerly used memory if possible
LDA TMP_ZP
STA (TMP2_ZP),Y		; Yes, it's a constant...
INY
LDA TMP_ZP+1
STA (TMP2_ZP),Y
LDA HIGHP			; Reset the memory pointer to the last assigned one. Everything that came later has to be temp. data
STA STRBUFP
LDA HIGHP+1
STA STRBUFP+1
RTS
INVAR		INY
LDA (TMP2_ZP),Y		; Check if the target is currently pointing into the constant pool. If so, don't update that memory by accident
CMP #>CONSTANTS_END
BEQ CHECKLOW2
BCS INVAR2
JMP PUPDATEPTR
CHECKLOW2	DEY
LDA (TMP2_ZP),Y
CMP #<CONSTANTS_END
BCS INVAR2
JMP PUPDATEPTR
INVAR2		LDY #0			; The target is somewhere in var memory (i.e. not in constant memory)
LDA (TMP3_ZP),Y
STA TMP_REG
TXA
CMP TMP_REG		; Compare the string-to-copy's length (in A) with the variable's current one (in TMP_REG)
BEQ UPDATEHP2	; does the new string fit into the old memory location (i.e. is it the same length)?
PUPDATEPTR	JSR CHECKLASTVAR
LDY #1			; No? Then new memory has to be used. Update the "highest memory position" in the process
STY TMP_FLAG	; to regain temp. memory used for non-assigned strings like for printing and such...
JMP UPDATEPTR	; ...we set a flag here to handle this case later
UPDATEHP2	LDA HIGHP		; Update the memory pointer to the last assigned position, reclaim some memory this way
STA STRBUFP
LDA HIGHP+1
STA STRBUFP+1
JMP STRFITS
COPYONLY	LDY #0
STY TMP_FLAG
JMP CHECKMEM
ALTCOPY		JMP COPYSTRING2
UPDATEPTR	LDA TMP_ZP+1	; Check if the new string comes after or equals highp, which indicates that it can be
CMP HIGHP+1		; "copied down". This is another routine, because of...reasons...
BEQ CHECKXT1
BCS ALTCOPY
JMP CHECKMEM
CHECKXT1	LDA TMP_ZP
CMP HIGHP
BCS ALTCOPY
CHECKMEM
MEMOK		LDY #0
LDA STRBUFP		; no, then copy it into string memory later...
STA (TMP2_ZP),Y	; ...but update the string memory pointer now
STA TMP3_ZP
LDA STRBUFP+1
INY
STA (TMP2_ZP),Y
STA TMP3_ZP+1
TXA
CLC
ADC STRBUFP
PHP
CLC
ADC #3
STA STRBUFP
BCC NOCS1
INC STRBUFP+1
NOCS1		PLP
BCC STRFITS
INC STRBUFP+1
STRFITS		LDY TMP_FLAG	; Check if the pointer to the highest mem addr is used by an actual string
BEQ NOHPUPDATE	; has to be updated and do that...
LDA HIGHP+1
CMP STRBUFP+1
BCC UPDATEHIGHP
BEQ CHECKNEXTHP
JMP NOHPUPDATE
CHECKNEXTHP	LDA HIGHP
CMP	STRBUFP
BCC UPDATEHIGHP
JMP NOHPUPDATE
UPDATEHIGHP	LDA STRBUFP
STA HIGHP
LDA STRBUFP+1
STA HIGHP+1		; set new pointer
JSR REMEMBERLASTVAR
JSR STOREVARREF
NOHPUPDATE	LDY #0
LDA (TMP_ZP),Y	; Set the new length...
STA (TMP3_ZP),Y
TAY				; Copy length to Y
BEQ	EXITCOPY	; Length 0? nothing to copy then...
LOOP		LDA (TMP_ZP),Y	; Copy the actual string
STA (TMP3_ZP),Y
DEY
BNE LOOP
EXITCOPY	RTS
;###################################
;###################################
COPYSTRING2	LDY #0
LDA (TMP_ZP),Y
STA TMP_REG
TAX
LDA HIGHP
STA TMP3_ZP
STA (TMP2_ZP),Y
LDA HIGHP+1
STA TMP3_ZP+1
INY
STA (TMP2_ZP),Y
JSR REMEMBERLASTVAR
LDA TMP_ZP
CMP TMP3_ZP
BNE DOLOOP
LDA TMP_ZP+1
CMP TMP3_ZP+1
BEQ SKIPCP2
DOLOOP		DEY
TXA
STA (TMP3_ZP),Y
INY
ASLOOP		LDA (TMP_ZP),Y
STA (TMP3_ZP),Y
INY
DEX
BNE	ASLOOP
SKIPCP2		LDA HIGHP
CLC
ADC TMP_REG
PHP
CLC
ADC #3
STA HIGHP
STA STRBUFP
BCC SKIPLOWAS1
INC HIGHP+1
SKIPLOWAS1	PLP
BCC SKIPLOWAS2
INC HIGHP+1
SKIPLOWAS2	LDA HIGHP+1
STA STRBUFP+1
JSR STOREVARREF
RTS
;###################################
;###################################
CHECKLASTVAR
LDA TMP2_ZP
CMP LASTVAR
BNE NOTSAMEVAR
LDA TMP2_ZP+1
CMP LASTVAR+1
BNE NOTSAMEVAR
LDA LASTVARP			; The target is the last string that has been added. We can free it's currently used memory then.
STA HIGHP
STA STRBUFP
LDA LASTVARP+1
STA HIGHP+1
STA STRBUFP+1
NOTSAMEVAR	RTS
;###################################
;###################################
REMEMBERLASTVAR
LDA TMP2_ZP
STA LASTVAR
LDA TMP2_ZP+1
STA LASTVAR+1
LDA TMP3_ZP
STA LASTVARP
LDA TMP3_ZP+1
STA LASTVARP+1	; Remember this variable as the last written one
RTS
;###################################
;###################################
STOREVARREF
TYA
PHA				; Save Y reg
LDA TMP_ZP
PHA
LDA TMP_ZP+1
PHA
LDA HIGHP+1
STA TMP_ZP+1
LDA HIGHP
SEC
SBC #2
STA TMP_ZP
BCS RLVNOOV
DEC TMP_ZP+1
RLVNOOV		LDA TMP2_ZP
LDY #0
STA (TMP_ZP),Y
LDA TMP2_ZP+1
INY
STA (TMP_ZP),Y	; Store the reference to the variable that uses this chunk of memory at the end of the string
PLA
STA TMP_ZP+1
PLA
STA TMP_ZP		; ...restore TMP_ZP
PLA
TAY				; ...restore Y reg
RTS
;###################################
;###################################
REROUTE		LDA CMD_NUM		; if CMD mode, enable channel output
BEQ REROUTECMD
TAX
STA CHANNEL
JMP CHKOUT
REROUTECMD	RTS
;###################################
;###################################
RESETROUTE	LDA CMD_NUM		; if CMD mode, disable channel output
BEQ RESETROUTECMD
JMP CLRCHNEW
RESETROUTECMD
RTS
;###################################
;###################################
INTOUTFASTZ	LDX #32				; SPACE
LDA TMP_ZP+1
BPL INTISPOS
CLC
LDA TMP_ZP
EOR #$FF
ADC #1
STA TMP_ZP
LDA TMP_ZP+1
EOR #$FF
ADC #0
STA TMP_ZP+1
LDX #45				; MINUS
INTISPOS
TXA
JSR CHROUT
JSR CONVPOSINT
LDA NUMFLAG
BNE ALLINTOUTDONE
LDA #48
JSR CHROUT
ALLINTOUTDONE
RTS
;###################################
;###################################
NUMBEROUT
BEQ NUMZERO
ORA #$30
STA NUMFLAG
JMP CHROUT
NUMZERO
LDX NUMFLAG
BEQ STILLZERO
ORA #$30
JMP CHROUT
STILLZERO
RTS
;###################################
;###################################
CONVPOSINT
JSR INT2BCD
LDX #0
STX NUMFLAG
AND #$0F
JSR NUMBEROUT
LDA BCD+1
LSR
LSR
LSR
LSR
JSR NUMBEROUT
LDA BCD+1
AND #$0F
TAY
JSR NUMBEROUT
LDA BCD
LSR
LSR
LSR
LSR
JSR NUMBEROUT
LDA BCD
AND #$0F
JSR NUMBEROUT
RTS
;###################################
;###################################
INT2BCD
SED
LDA #0
STA BCD
STA BCD+1
STA BCD+2
ASL TMP_ZP
ROL TMP_ZP+1
LDA BCD
ADC BCD
STA BCD
ASL TMP_ZP
ROL TMP_ZP+1
ADC BCD
STA BCD
ASL TMP_ZP
ROL TMP_ZP+1
ADC BCD
STA BCD
ASL TMP_ZP
ROL TMP_ZP+1
ADC BCD
STA BCD
ASL TMP_ZP
ROL TMP_ZP+1
ADC BCD
STA BCD
ASL TMP_ZP
ROL TMP_ZP+1
ADC BCD
STA BCD
LDX #7
BCDBIT1
JSR COMPACT156
LDA BCD+1
ADC BCD+1
STA BCD+1
DEX
BNE BCDBIT1
LDX #3
BCDBIT2
JSR COMPACT156
LDA BCD+1
ADC BCD+1
STA BCD+1
LDA BCD+2
ADC BCD+2
STA BCD+2
DEX
BNE BCDBIT2
CLD
RTS
BCD
.WORD 0 0
NUMFLAG
.BYTE 0
;###################################
;###################################
REALOUTFAST	JSR FACINT
STA TMP_ZP+1
STY TMP_ZP
JMP INTOUTFASTZ
;###################################
;###################################
CHECKFORFASTOUT
JSR REROUTE
JSR XREGFAC
LDA FACEXP
CMP #$90
BCS REALOUTINT
CMP #$81
BCC REALOUTINT
MAYBEREALOUTFAST
LDA FACEXP+3
BNE REALOUTINT
LDA FACEXP+4
BNE REALOUTINT
LDA FACEXP
SEC
SBC #129
ASL
TAX
LDA FACEXP+1
AND MANTMASK,X
BNE	REALOUTINT
INX
LDA FACEXP+2
AND MANTMASK,X
BNE	REALOUTINT
JMP REALOUTFAST
REALOUTINT	LDY #0
JSR FACSTR
LDY #0
LDA LOFBUF,Y
STRLOOPRO	JSR CHROUT
INY
LDA LOFBUF,Y
BNE STRLOOPRO
RTS
MANTMASK
.BYTE 127 255 63 255 31 255 15 255 7 255 3 255 1 255 0 255 0 127 0 63 0 31 0 15 0 7 0 3 0 1
;###################################
;###################################
STROUTWL	STA A_REG
STY A_REG+1
STROUT		JSR REROUTE
LDA A_REG
STA INDEX1
LDA A_REG+1
STA INDEX1+1
LDY #0
LDA (INDEX1),Y
TAX
INC INDEX1
BNE PRINTSTR
INC INDEX1+1
PRINTSTR	JSR PRINTSTRS
LDA HIGHP			; Update the memory pointer to the last actually assigned one
STA STRBUFP
LDA HIGHP+1
STA STRBUFP+1
JSR RESETROUTE
RTS
;###################################
;###################################
SINGLECHROUTBRKMAX
JSR SINGLECHROUTBRK
JMP COMPACTMAX
;###################################
;###################################
SINGLECHROUTBRK
STA TMP_ZP
JSR REROUTE
LDA TMP_ZP
JSR CHROUT
LDA #$0D
JSR CHROUT
JMP RESETROUTE
;###################################
;###################################
SINGLECHROUTMAX
JSR SINGLECHROUT
JMP COMPACTMAX
;###################################
;###################################
SINGLECHROUT
STA TMP_ZP
JSR REROUTE
LDA TMP_ZP
JSR CHROUT
JMP RESETROUTE
;###################################
;###################################
STROUTBRKWL	STA A_REG
STY A_REG+1
STROUTBRK	JSR REROUTE
LDA A_REG
STA INDEX1
LDA A_REG+1
STA INDEX1+1
LDY #0
LDA (INDEX1),Y
TAX
INC INDEX1
BNE PRINTSTR2
INC INDEX1+1
PRINTSTR2	JSR PRINTSTRS
LDA HIGHP			; Update the memory pointer to the last actually assigned one
STA STRBUFP
LDA HIGHP+1
STA STRBUFP+1
LDA #$0D
JSR CHROUT
JMP RESETROUTE 	;RTS is implicit
;###################################
;###################################
ARRAYACCESS_STRING
JSR XREGFAC
JSR FACINT
ARRAYACCESS_STRING_INT
LDX G_REG
STX TMP_ZP
LDX G_REG+1
STX TMP_ZP+1
JSR COMPACT182
JSR COMPACT155
ADC TMP2_ZP+1
STA TMP_ZP+1
LDY #0
LDA (TMP_ZP),Y
STA A_REG
INY
LDA (TMP_ZP),Y
STA A_REG+1
RTS
;###################################
;###################################
ARRAYACCESS_INTEGER_SI
STA G_REG
STY G_REG+1
JSR XREGFAC
JSR FACINT
ARRAYACCESS_INTEGER_INT_SI
JSR COMPACT157
JSR COMPACT155
ADC TMP2_ZP+1
STA TMP_ZP+1
LDY #1
LDA (TMP_ZP),Y
TAX
DEY
LDA (TMP_ZP),Y
TAY
TXA
RTS
;###################################
;###################################
ARRAYACCESS_INTEGER_SNX
STA G_REG
STY G_REG+1
JMP ARRAYACCESS_INTEGER_NX
;###################################
;###################################
ARRAYACCESS_INTEGER_S
STA G_REG
STY G_REG+1
ARRAYACCESS_INTEGER
JSR XREGFAC
ARRAYACCESS_INTEGER_NX
JSR FACINT
ARRAYACCESS_INTEGER_INT
JSR COMPACT157
JSR COMPACT155
ADC TMP2_ZP+1
STA TMP_ZP+1
AIIDI		LDY #1
LDA (TMP_ZP),Y
TAX
DEY
LDA (TMP_ZP),Y
TAY
TXA
STY TMP2_ZP		; Store for integer optimization later on
STA TMP2_ZP+1
JSR INTFAC
JMP FACXREG	;RTS is implicit
;###################################
;###################################
ARRAYACCESS_REAL_S
STA G_REG
STY G_REG+1
ARRAYACCESS_REAL
JSR XREGFAC
JSR FACINT
ARRAYACCESS_REAL_INT
LDX G_REG
STX TMP_ZP
LDX G_REG+1
STX TMP_ZP+1
STY TMP3_ZP
STA TMP3_ZP+1
TAX
TYA
ASL
TAY
TXA
ROL
JSR COMPACT158
JSR COMPACT159
LDA TMP_ZP
CLC
ADC TMP2_ZP
STA TMP3_ZP
LDA TMP_ZP+1
ADC TMP2_ZP+1
STA TMP3_ZP+1
JMP COPY2_XY_XREG
;###################################
;###################################
ARRAYSTORE_STRING
JSR XREGFAC
JSR FACINT
ARRAYSTORE_STRING_INT
JSR COMPACT157
LDA TMP_ZP
CLC
ADC TMP2_ZP
TAX
LDA TMP_ZP+1
ADC TMP2_ZP+1
TAY
LDA A_REG
STA TMP_ZP
LDA A_REG+1
STA TMP_ZP+1
TXA
JMP COPYSTRING	; RTS is implicit
;###################################
;###################################
ARRAYSTORE_INT_INTEGER
JSR XREGFAC
JSR FACINT
ARRAYSTORE_INT_INTEGER_AC
JSR COMPACT157
JSR COMPACT155
ADC TMP2_ZP+1
STA TMP_ZP+1
LDY #1
LDA AS_TMP+1
STA (TMP_ZP),Y
DEY
LDA AS_TMP
STA (TMP_ZP),Y
RTS
;###################################
;###################################
ARRAYSTORE_INTEGER
JSR XREGFAC
ARRAYSTORE_INTEGER_NX
JSR FACINT
ARRAYSTORE_INTEGER_INT
JSR COMPACT157
JSR COMPACT155
ADC TMP2_ZP+1
STA TMP_ZP+1
JSR YREGFAC
JSR FACINT
STY TMP3_ZP
LDY #1
STA (TMP_ZP),Y
DEY
LDA TMP3_ZP
STA (TMP_ZP),Y
RTS
;###################################
;###################################
ARRAYSTORE_REAL
JSR XREGFAC
JSR FACINT
ARRAYSTORE_REAL_INT
LDX G_REG
STX TMP_ZP
LDX G_REG+1
STX TMP_ZP+1
STY TMP3_ZP
STA TMP3_ZP+1
TAX
TYA
ASL
TAY
TXA
ROL
JSR COMPACT158
JSR COMPACT159
JSR COMPACT155
ADC TMP2_ZP+1
STA TMP_ZP+1
JMP COPY2_YREG_XYA	;RTS is implicit
;###################################
;###################################
ADJUSTSTACK LDA FORSTACKP	; Adjust the FORSTACK in case a new loop uses an unclosed old one (i.e. the code jumped out of that loop with goto)
STA TMP_ZP
LDA FORSTACKP+1
STA TMP_ZP+1
ADSEARCHFOR	LDA TMP_ZP
CMP #<FORSTACK
BNE ADJUST2
LDA TMP_ZP+1
CMP #>FORSTACK
BNE ADJUST2
RTS				; Start of Stack reached? Return
ADJUST2		LDA TMP_ZP
SEC
SBC #2
STA TMP_ZP
BCS ADNOPV1N1
DEC TMP_ZP+1
ADNOPV1N1	LDY #0
LDA (TMP_ZP),Y
BNE ADNOGOSUB
RTS				; Encountered a GOSUB on the way? Then return (is this correct?)
ADNOGOSUB
INY
LDA TMP_ZP
SEC
SBC (TMP_ZP),Y
STA TMP_ZP
BCS ADNOPV1N2
DEC TMP_ZP+1
ADNOPV1N2	DEY
LDA A_REG
ADCMPFOR	CMP (TMP_ZP),Y
BNE ADSEARCHFOR
LDA A_REG+1
INY
CMP (TMP_ZP),Y
BEQ ADFOUNDFOR
JMP ADSEARCHFOR
ADLOW0		LDX A_REG+1
BEQ ADFOUNDFOR
BNE ADCMPFOR
ADFOUNDFOR	LDA TMP_ZP		; Adjust the stack so that it points onto the last entry for the "new" loop variable
STA FORSTACKP
LDA TMP_ZP+1
STA FORSTACKP+1
RTS
;###################################
;###################################
INITFOR		JSR ADJUSTSTACK
LDA FORSTACKP
STA TMP_ZP
LDA FORSTACKP+1
STA TMP_ZP+1
LDY #0
LDA A_REG
STA (TMP_ZP),Y
INY
LDA A_REG+1
STA (TMP_ZP),Y
INY
LDA JUMP_TARGET
STA (TMP_ZP),Y
INY
LDA JUMP_TARGET+1
STA (TMP_ZP),Y
INY
STY TMP3_ZP
JSR INCTMPZP
JSR POPREAL
LDX TMP_ZP
LDY TMP_ZP+1
JSR FACMEM
JSR SGNFAC
STA TMP_FLAG
LDY #5
STY TMP3_ZP
JSR INCTMPZP
JSR POPREAL
LDX TMP_ZP
LDY TMP_ZP+1
JSR FACMEM
LDY #5
STY TMP3_ZP
JSR INCTMPZP
LDY #0
LDA TMP_FLAG
STA (TMP_ZP),Y
INY
LDA #1
STA (TMP_ZP),Y
INY
LDA #15
STA (TMP_ZP),Y
LDY #3
STY TMP3_ZP
JSR INCTMPZP
LDA TMP_ZP
STA FORSTACKP
LDA TMP_ZP+1
STA FORSTACKP+1
RTS
;###################################
;###################################
NEXT		LDA FORSTACKP
STA TMP_ZP
LDA FORSTACKP+1
STA TMP_ZP+1
SEARCHFOR	LDA TMP_ZP+1
STA TMP3_REG+1
LDA TMP_ZP
STA TMP3_REG
SEC
SBC #2
STA TMP_ZP
BCS NOPV1N1
DEC TMP_ZP+1
NOPV1N1		LDY #0
LDA (TMP_ZP),Y
BNE NOGOSUB
JMP NEXTWOFOR
NOGOSUB
INY
LDA TMP_ZP
SEC
SBC (TMP_ZP),Y
STA TMP_ZP
BCS NOPV1N2
DEC TMP_ZP+1
NOPV1N2		DEY
LDA A_REG
BEQ LOW0
CMPFOR		CMP (TMP_ZP),Y
BNE SEARCHFOR
LDA A_REG+1
INY
CMP (TMP_ZP),Y
BEQ FOUNDFOR
JMP SEARCHFOR
LOW0		LDX A_REG+1
BEQ FOUNDFOR
BNE CMPFOR
FOUNDFOR	LDA TMP_ZP
STA TMP2_REG
LDA TMP_ZP+1
STA TMP2_REG+1
VARREAL
LDY #0
STY A_REG+1 ; Has to be done anyway...so we can do it here as well
LDA (TMP_ZP),Y
TAX
INY
LDA (TMP_ZP),Y
TAY
TXA
JSR REALFAC
CALCNEXT	LDA TMP_ZP
CLC
ADC #4
STA TMP_ZP
BCC NOPV2IN
INC TMP_ZP+1
NOPV2IN		STA TMP_REG
LDY TMP_ZP+1
STY TMP_REG+1
JSR FASTFADDMEM
LDA TMP2_REG
STA TMP_ZP
LDA TMP2_REG+1
STA TMP_ZP+1
STOREREAL
LDY #0
LDA (TMP_ZP),Y
TAX
INY
LDA (TMP_ZP),Y
TAY
JSR FACMEM	;FAC TO (X/Y)
CMPFOR		LDA #5
STA TMP3_ZP
LDA TMP_REG
CLC
ADC #5
STA TMP_REG
BCC NOPV3
INC TMP_REG+1
NOPV3		LDY TMP_REG+1
JSR CMPFAC 	;CMPFAC
BEQ LOOPING
PHA
LDY #14
LDA (TMP_ZP),Y
BEQ STEPZERO
ROL
BCC STEPPOS
STEPNEG		PLA
ROL
BCC LOOPING
BCS EXITLOOP
STEPPOS		PLA
ROL
BCC EXITLOOP
LOOPING		LDA TMP3_REG
STA FORSTACKP
LDA TMP3_REG+1
STA FORSTACKP+1
LDA TMP2_REG
CLC
ADC #2
STA TMP2_REG
BCC NOPV4IN
INC TMP2_REG+1
NOPV4IN		LDY #0
STY A_REG
STA TMP_ZP
LDA TMP2_REG+1
STA TMP_ZP+1
LDA (TMP_ZP),Y
STA JUMP_TARGET
INY
LDA (TMP_ZP),Y
STA JUMP_TARGET+1
RTS
STEPZERO	PLA
JMP LOOPING
EXITLOOP	LDA TMP2_REG
STA FORSTACKP
LDA TMP2_REG+1
STA FORSTACKP+1
LDA #1
STA A_REG
RTS
;###################################
;###################################
RETURN		LDA FORSTACKP
STA TMP_ZP
LDA FORSTACKP+1
STA TMP_ZP+1
SEARCHGOSUB	LDA TMP_ZP
SEC
SBC #2
STA TMP_ZP
BCS NOPV1SG
DEC TMP_ZP+1
NOPV1SG		LDY #0
LDA (TMP_ZP),Y
BEQ FOUNDGOSUB
INY
LDA (TMP_ZP),Y
STA TMP3_ZP
LDA TMP_ZP
SEC
SBC (TMP_ZP),Y
STA TMP_ZP
BCS NOPV1GS
DEC TMP_ZP+1
NOPV1GS		JMP SEARCHGOSUB
FOUNDGOSUB
LDA TMP_ZP
STA FORSTACKP
LDA TMP_ZP+1
STA FORSTACKP+1
RTS
;###################################
;###################################
GOSUB		LDA FORSTACKP
STA TMP_ZP
LDA FORSTACKP+1
STA TMP_ZP+1
LDY #0
TYA
STA (TMP_ZP),Y
INY
STA (TMP_ZP),Y
INY
TYA
CLC
ADC TMP_ZP
STA FORSTACKP
BCC GOSUBNOOV
INC FORSTACKP+1
GOSUBNOOV	RTS
;###################################
;###################################
CLEARQUEUE	LDA #$0
STA INPUTQUEUEP
RTS
;###################################
;###################################
INTSHL		LDA A_REG+1
ASL
PHP
CLC
ROL A_REG
ROL A_REG+1
PLA
AND #128
ORA A_REG+1
STA A_REG+1
DEY
BNE INTSHL
LDA A_REG+1
LDY A_REG
RTS
;###################################
;###################################
INTSHR		LDA A_REG+1
ASL
ROR A_REG+1
ROR A_REG
DEY
BNE INTSHR
LDA A_REG+1
LDY A_REG
RTS
;###################################
;###################################
INTSUBVAR	LDX #128		; Do the fast way for positive numbers  below 16384...second var
STX TMP_REG
BIT TMP_REG
BEQ INTSUBVARC2
JMP FLOATINTSUB
INTSUBVARC2
LDX #64
STX TMP_REG
BIT TMP_REG
BEQ INTSUBVARC3
JMP FLOATINTSUB
INTSUBVARC3
PHA
LDA TMP3_ZP+1
LDX #128		; Do the fast way for everything positive...first var
STX TMP_REG
BIT TMP_REG
BEQ INTINTSUBVAR2
PLA
JMP FLOATINTSUB
INTINTSUBVAR2
TYA
STA TMP_REG
PLA
STA TMP_REG+1
LDA TMP3_ZP
SEC
SBC TMP_REG
TAY
LDA TMP3_ZP+1
SBC TMP_REG+1
JMP INTFAC
;###################################
;###################################
INTADDVAR	LDX #128		; Do the fast way for negative numbers and everything below 16384...first var
STX TMP_REG		; Note to self: What I call first here, is actually the second variable and what I call
BIT TMP_REG		; second is the first. Because this is an addition, it doesn't really matter unless people
BNE INTADDVARC2	; tend to use smaller values more on the right side, which I simply don't know...
LDX #64
STX TMP_REG
BIT TMP_REG
BEQ INTADDVARC2
JMP FLOATINTADD
INTADDVARC2
PHA
LDA TMP3_ZP+1
LDX #128		; Do the fast way for everything below 16384 but positive...second var
STX TMP_REG		; If var is negative, and var2 isn't, this could always be done, but we are ignoring
BIT TMP_REG		; this here for now to simplify the check...
BEQ INTADDVARC3
PLA
JMP FLOATINTADD
INTADDVARC3
LDX #64
STX TMP_REG
BIT TMP_REG
BEQ INTINTADDVAR2
PLA
JMP FLOATINTADD
INTINTADDVAR2
TYA
CLC
ADC TMP3_ZP
TAY
PLA
ADC TMP3_ZP+1
JMP INTFAC
;###################################
;###################################
FLOATINTSUB	JSR INTFAC
JSR FACXREG
LDA #0
STA TMP_FLAG	; flag that the value isn't present in TMP2_ZP
LDY TMP3_ZP
LDA TMP3_ZP+1
JSR INTFAC
JSR FACARG
JSR XREGFAC
JMP FASTFSUBARG
;###################################
;###################################
FLOATINTSUBSW
JSR INTFAC
JSR COMPACT160
JSR XREGARG
JMP FASTFSUBARG
;###################################
;###################################
FLOATINTADD	JSR INTFAC
JSR COMPACT160
JSR XREGARG
JMP FASTFADDARG
;###################################
;###################################
INTADD		LDX #128		; Do the fast way for negative numbers and everything below 16384
STX TMP_REG
BIT TMP_REG
BNE INTINTADD
LDX #64
STX TMP_REG
BIT TMP_REG
BNE FLOATINTADD
INTINTADD	LDX #1			; flag that the value is present in TMP2_ZP
STX TMP_FLAG
PHA
TYA
CLC
ADC TMP3_ZP
TAY
PLA
ADC TMP3_ZP+1
STY TMP2_ZP
STA TMP2_ZP+1
JMP INTFAC
;###################################
;###################################
INTSUB		LDX #128		; Do the fast way for positive numbers
STX TMP_REG
BIT TMP_REG
BNE FLOATINTSUBSW
INTINTSUB	LDX #1			; flag that the value is present in TMP2_ZP
STX TMP_FLAG
PHA
TYA
SEC
SBC TMP3_ZP
TAY
PLA
SBC TMP3_ZP+1
STY TMP2_ZP
STA TMP2_ZP+1
JMP INTFAC
;###################################
;###################################
INTCONV		LDA TMP_FLAG	; The INT value is either already present in TMP2_ZP...or not...
BEQ INTFROMFAC
LDY TMP2_ZP
LDA TMP2_ZP+1
RTS
INTFROMFAC	JMP FACINT
;###################################
;###################################
READINIT	LDA DATASP
STA TMP3_ZP
LDA DATASP+1
STA TMP3_ZP+1
LDY #$0
LDA (TMP3_ZP),Y
INC TMP3_ZP
BNE READNOOV
INC TMP3_ZP+1
READNOOV	CMP #$FF
BNE MOREDATA
JMP OUTOFDATA
MOREDATA	RTS
;###################################
;###################################
READADDPTR	STX TMP_REG+1
LDA TMP3_ZP
CLC
ADC TMP_REG+1
STA TMP3_ZP
BCC READADDPTRX
INC TMP3_ZP+1
READADDPTRX	RTS
;###################################
;###################################
READMAYBEBYTE					; Version of READ for Bytes...maybe. Can switch to the old routine, if needed....
JSR READINIT
CMP #3
BCS RMBISBYTE
JSR MORENUMDATA
JMP FACINT
RMBISBYTE	BNE RMBNOTYPE
LDA (TMP3_ZP),Y
TAY
LDX #1
JSR READADDPTR
JMP RMBNOTYPE2
RMBNOTYPE	TAY
RMBNOTYPE2	JSR NEXTDATA
LDA #0
RTS
;###################################
;###################################
READNUMBER	JSR READINIT
MORENUMDATA CMP #$2				; Strings are not allowed here
BNE NUMNUM
LDA (TMP3_ZP),Y		; ...unless they are empty, which makes them count as 0
BEQ RNESTR
CMP #1				; or a "." or "e", which is 0 as well...so length has to be 1..
BEQ STRGNUMCHK
JMP SYNTAXERROR
STRGNUMCHK 	INY
LDA (TMP3_ZP),Y
CMP #46				; ...and really a "."?
BEQ RNESTR2
CMP #69				; ...or really an "e"?
BEQ RNESTR2
JMP SYNTAXERROR
RNESTR2		LDA #0
LDY #0
JSR INTFAC
LDX #2
JSR READADDPTR
JMP NUMREAD
RNESTR		LDA #0
LDY #0
JSR INTFAC
LDX #1
JSR READADDPTR
JMP NUMREAD
NUMNUM		CMP #$1
BEQ NUMREADREAL
CMP #$0
BEQ NUMREADINT
CMP #$4
BCS READNOTYPE
LDA (TMP3_ZP),Y
TAY
JSR BYTEFAC
LDX #1
JSR READADDPTR
JMP NUMREAD			; It's a byte
READNOTYPE	TAY					; It's a byte >3, which mean it has no typing stored to save memory
JSR BYTEFAC
JMP NUMREAD
NUMREADINT	LDA (TMP3_ZP),Y		; It's an integer
STA TMP_REG
INY
LDA (TMP3_ZP),Y
LDY TMP_REG
JSR INTFAC
LDX #2
JSR READADDPTR
JMP NUMREAD
NUMREADREAL	LDA TMP3_ZP
LDY TMP3_ZP+1
JSR REALFAC
LDX #5
JSR READADDPTR
NUMREAD		JSR NEXTDATA
JMP FACYREG		; ...and return
;###################################
;###################################
READSTR		JSR READINIT
CMP #$2
BNE DATA2STR		; It's a number and has to be converted
LDA TMP3_ZP
STA A_REG
LDA TMP3_ZP+1
STA A_REG+1
LDA (TMP3_ZP),Y
CLC
ADC TMP3_ZP
STA TMP3_ZP
BCC READNOOV2
INC TMP3_ZP+1
READNOOV2	JSR NEXTDATA
INC DATASP
BNE READNOOV3
INC DATASP+1
READNOOV3	RTS
;###################################
;###################################
NEXTDATA	LDA TMP3_ZP			; Adjust pointer to the next element
STA DATASP
LDA TMP3_ZP+1
STA DATASP+1
RTS
;###################################
;###################################
DATA2STR	CMP #$1
BEQ DREAL2STR		; It's a floating point number...
CMP #$0
BEQ DATA2STRINT
CMP #$4
BCS DSHORTBYTE
LDA (TMP3_ZP),Y		; It's a byte
TAY
JSR BYTEFAC
LDX #1
JSR READADDPTR
JMP DFAC2STR
DATA2STRINT	LDA (TMP3_ZP),Y		; It's an integer
STA TMP_REG
INY
LDA (TMP3_ZP),Y
LDY TMP_REG
JSR INTFAC
LDX #2
JSR READADDPTR
JMP DFAC2STR
DSHORTBYTE	TAY
JSR BYTEFAC
JMP DFAC2STR
DREAL2STR	LDA TMP3_ZP
LDY TMP3_ZP+1
JSR REALFAC
LDX #5
JSR READADDPTR
DFAC2STR	JSR NEXTDATA
JMP STRINTREAD
;###################################
;###################################
STRINTREAD	LDY #1			; Special INT to STR routine that handles the fact that in case of conversions from data entries, there's no leading blank for positive numbers
JSR FACSTR
LDY #0
STY TMP_ZP+1
LDA #LOFBUF
STA TMP_ZP
DEY
STRLOOPREAD	INY
LDA LOFBUFH,Y
BNE STRLOOPREAD
STY LOFBUF
TYA
TAX			; Length in X
LDA LOFBUFH
CMP #$20
BNE STRREADNP
INC TMP_ZP	; Starts with blank? Remove it...
INC TMP_ZP+1
DEC LOFBUF
LDA LOFBUF
STA LOFBUFH  ; Copy the new length over
DEX			 ; length -1
STRREADNP	LDA #<A_REG
LDY #>A_REG
STA TMP2_ZP
STY TMP2_ZP+1
JMP COPYONLY
;###################################
;###################################
CLEANINPUT	LDY #0				; Processes an input string similar to BASIC's with the only difference that a " at the "wrong" location will be ignored instead of triggering an error
LDX #0
STY STORE1			; Marks "quote-mode", 0 if off, 1 is on
STY STORE2			; Char found, 0 means none, something else means at least one
DEY
CILOOP		INY
LDA $0200,Y
BNE CINOEND
JMP CIEND			; String terminator found, exit
CINOEND		STA STORE3			; store current char
LDA STORE1
BEQ CINOQUOTE		; Not in quote mode...
LDA STORE3
CMP	#$22			; found a quote (in quote mode)?
BNE	CISTILLQUOTE	; no? Then we are still in quote mode
LDA #0				; yes? quote mode off
STA STORE1
JMP CILOOP
CISTILLQUOTE
STA $0200,X
INX
JMP CILOOP
CINOQUOTE	LDA STORE3
CMP	#$22
BNE	CISOMECHAR		; no quote?
CIFIRSTCHAR	LDA #1				; quote?
STA STORE1			; enable quote mode
STA STORE2			; set char flag
JMP CILOOP
CISOMECHAR 	CMP #$3A			; a : then stop evaluating here
BNE	CINOCOLON
JMP CIEND
CINOCOLON	CMP #$2C			; a ,?
BNE CINOCOMMA
LDA #$22			; replace a comma by a ". This will be handled later in the actual input routine
STA $0200,X
INX
LDA #0
STA STORE2			; Reset char flag to 0
JMP CILOOP
CINOCOMMA	CMP #$20			; a blank? Only add this, if char flag is !=0
BNE	CINOSPACE
LDA STORE2			; check char flag
BEQ CINEXT			; Set? Then continue normally
LDA STORE3
CINOSPACE	STA $0200,X
STA STORE2			; update char flag with some value!=0
INX
CINEXT		JMP CILOOP
CIEND		LDA #0
STA $0200,X			; Write terminator...
RTS					; ...and exit
;###################################
;###################################
INPUTSTR	LDA #$0
INPUTSTR2	STA TMP_REG+1
LDA #$0
STA TMP_REG
STA TMP_FLAG
LDX INPUTQUEUEP
BEQ INPUTNORM
LDA #LOFBUF
LDX #$1
CLC
ADC INPUTQUEUE
STA TMP_ZP
BCC INNONO
LDX #$2
INNONO		STX TMP_ZP+1
DEC	INPUTQUEUEP		; Decrement the queue size
LDY INPUTQUEUE		; Store current offset in Y
STY TMP_REG			; Store the value to subtract it later on
DEY
LDX #$0
SHRINKQ		LDA INPUTQUEUEP
BEQ QUEUEEMPTY
INX
LDA INPUTQUEUE,X	; Copy the queue's content down one entry
DEX
STA INPUTQUEUE,X
INX
CPX INPUTQUEUEP
BNE SHRINKQ
QUEUEEMPTY	JMP ISTRLOOP
INPUTNORM	AND #$FF
JSR INPUT
JSR CLEANINPUT
LDA #LOFBUF
STA TMP_ZP
LDA #$1
STA TMP_ZP+1
LDY #0
DEY
ISTRLOOP	INY
LDA INPUTBUF,Y
TAX
CMP #$22			; found "?  (" is a replacement for , at this stage because " can't occur in an input string while , can)
BNE	ICHECK
STA TMP_FLAG
LDA #$0
STA INPUTBUF,Y			; replace , by the string terminator
LDX INPUTQUEUEP		; load the queue size
BNE	INQUEUENE		; If empty, set at least to one
STA INPUTQUEUE		; ...and set the first index to 0
INX
INQUEUENE	INY
TYA
STA INPUTQUEUE,X	; store the offset in the queue
INX
STX INPUTQUEUEP		; update the queue size
JMP ISTRLOOP		; Back to loop...
ICHECK		TXA					; String terminator?
BNE ISTRLOOP		; No, loop...
LDA TMP_FLAG
BEQ	ISIMPLECOPY
JMP	INPUTSTR
ISIMPLECOPY	TYA
SEC
SBC TMP_REG
LDY #0
STA (TMP_ZP),Y
TAX				; Length in X
LDA TMP_REG+1	; Check for numeric mode
BEQ	INISSTR
RTS
INISSTR		LDA #<A_REG
LDY #>A_REG
STA TMP2_ZP
STY TMP2_ZP+1
JSR COPYONLY
RTS
;###################################
;###################################
GETADOLLAR	JSR GETSTR		; Saves memory in the common GET A$ case...
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_A$
LDY #>VAR_A$
JMP COPYSTRING
;###################################
;###################################
GETSTR		LDA #8
LDY #0
JSR COMPACTF
LDY #0
STY CMD_NUM		; Reset CMD target
JSR GETIN
CMP #0			; Without this compare, it works for disk and keyboard GETs...but not for those from the RS232 port...DOH!
BNE SOMEKEY
NOKEY		LDA #<EMPTYSTR
STA A_REG
LDA #>EMPTYSTR
STA A_REG+1
RTS
SOMEKEY		TAX
LDA STRBUFP
STA TMP_ZP
STA A_REG
LDA STRBUFP+1
STA TMP_ZP+1
STA A_REG+1
LDA #1
LDY #0
STA (TMP_ZP),Y
TXA
LDY #1
STA (TMP_ZP),Y
LDA STRBUFP
CLC
ADC #2
STA STRBUFP
BCC GETSTR1
INC STRBUFP+1
GETSTR1		RTS
;###################################
;###################################
ZEROSET		LDA #0
STA X_REG
STA X_REG+1
STA X_REG+2
STA X_REG+3
STA X_REG+4
RTS
;###################################
;###################################
SLT			LDA A_REG
LDX B_REG
STX A_REG
STA B_REG
LDA A_REG+1
LDX B_REG+1
STX A_REG+1
STA B_REG+1
JMP SGT
;###################################
;###################################
SGT			JSR CMPSTRGT
LDA TMP3_ZP
BNE NOTSGT
LDA #<REAL_CONST_MINUS_ONE
STA TMP3_ZP
LDA #>REAL_CONST_MINUS_ONE
STA TMP3_ZP+1
JMP COPY2_XY_XREG
NOTSGT		JMP ZEROSET
;###################################
;###################################
CMPSTRGT	LDY #0				;Returns 0 if A>B, something else otherwise
LDX #1
LDA A_REG
STA TMP_ZP
LDA A_REG+1
STA TMP_ZP+1
LDA B_REG
STA TMP2_ZP
LDA B_REG+1
STA TMP2_ZP+1
CMP TMP_ZP+1
BNE CMPSTRSK2
LDA TMP2_ZP
CMP TMP_ZP
BNE CMPSTRSK2
JMP STRSGTRES
CMPSTRSK2	LDA (TMP2_ZP),Y
STA TMP3_ZP+1
LDA (TMP_ZP),Y
STA TMP3_ZP
CMP TMP3_ZP+1
BCC DONTSWAP
LDA TMP3_ZP+1
DONTSWAP	TAX
BNE NOTZSTR
LDX #1
LDA TMP3_ZP+1
CMP TMP3_ZP
BCS STRSGTRES
LDX #0
JMP STRSGTRES
NOTZSTR		INC TMP_ZP
BNE SCGTSKP1
INC TMP_ZP+1
SCGTSKP1	INC TMP2_ZP
BNE CMPSGTLOOP
INC TMP2_ZP+1
CMPSGTLOOP	LDA (TMP_ZP),Y
CMP (TMP2_ZP),Y
BCC STRSGTRES
BEQ SGTEQCONT
LDX #0
JMP STRSGTRES
SGTEQCONT	INY
DEX
BNE CMPSGTLOOP
LDA TMP3_ZP+1					; All equal so far...decide based on the length then
CMP TMP3_ZP
BCC STRSGTRES
LDX #1
STRSGTRES	STX TMP3_ZP
RTS
;###################################
;###################################
SEQ			JSR CMPSTR
LDA TMP3_ZP
BNE NOTSEQ
LDA #<REAL_CONST_MINUS_ONE
STA TMP3_ZP
LDA #>REAL_CONST_MINUS_ONE
STA TMP3_ZP+1
JMP COPY2_XY_XREG
NOTSEQ		JMP ZEROSET
;###################################
;###################################
SNEQ		JSR CMPSTR
LDA TMP3_ZP
BEQ NOTSEQ
LDA #<REAL_CONST_MINUS_ONE
STA TMP3_ZP
LDA #>REAL_CONST_MINUS_ONE
STA TMP3_ZP+1
JMP COPY2_XY_XREG
;###################################
;###################################
CMPSTR		LDY #0			;Returns 0 if strings are equal, something else otherwise
LDX #1
LDA A_REG
STA TMP_ZP
LDA A_REG+1
STA TMP_ZP+1
LDA B_REG
STA TMP2_ZP
LDA B_REG+1
STA TMP2_ZP+1
CMP TMP_ZP+1
BNE CMPSTRSK1
LDA TMP2_ZP
CMP TMP_ZP
BNE CMPSTRSK1
LDX #0
JMP STRCMPRES
CMPSTRSK1	LDA (TMP_ZP),Y
CMP (TMP2_ZP),Y
BNE STRCMPRES
TAX
BNE NOTZCTR
LDX #0
JMP STRCMPRES
NOTZCTR		INC TMP_ZP
BNE SCSKP1
INC TMP_ZP+1
SCSKP1		INC TMP2_ZP
BNE CMPSTRLOOP
INC TMP2_ZP+1
CMPSTRLOOP	LDA (TMP_ZP),Y
CMP (TMP2_ZP),Y
BNE STRCMPRES
INY
DEX
BNE CMPSTRLOOP
STRCMPRES	STX TMP3_ZP
RTS
;###################################
;###################################
PUSHINT		LDX FPSTACKP
STX TMP2_ZP
LDX FPSTACKP+1
STX TMP2_ZP+1
LDA TMP_ZP
LDY #0
STA (TMP2_ZP),Y
LDA TMP_ZP+1
INY
STA (TMP2_ZP),Y
LDA TMP2_ZP
CLC
ADC #2
STA FPSTACKP
LDA TMP2_ZP+1
ADC #0
STA FPSTACKP+1
RTS
;###################################
;###################################
POPINT		LDA FPSTACKP
SEC
SBC #2
STA FPSTACKP
LDA FPSTACKP+1
SBC #0
STA FPSTACKP+1
LDX FPSTACKP
STX TMP2_ZP
LDX FPSTACKP+1
STX TMP2_ZP+1
LDY #0
LDA (TMP2_ZP),Y
STA TMP_ZP
INY
LDA (TMP2_ZP),Y
STA TMP_ZP+1
RTS
;###################################
;###################################
POPINT2B	LDA FPSTACKP
SEC
SBC #2
STA FPSTACKP
LDA FPSTACKP+1
SBC #0
STA FPSTACKP+1
LDX FPSTACKP
STX TMP2_ZP
LDX FPSTACKP+1
STX TMP2_ZP+1
LDY #0
LDA (TMP2_ZP),Y
STA B_REG
INY
LDA (TMP2_ZP),Y
STA B_REG+1
RTS
;##################################
;##################################
REALFACPUSH	STA TMP_ZP
STY	TMP_ZP+1
LDX FPSTACKP
LDY FPSTACKP+1
STX TMP2_ZP
STY TMP2_ZP+1
LDY #0
LDA (TMP_ZP),Y
STA (TMP2_ZP),Y
INY
LDA (TMP_ZP),Y
STA (TMP2_ZP),Y
INY
LDA (TMP_ZP),Y
STA (TMP2_ZP),Y
INY
LDA (TMP_ZP),Y
STA (TMP2_ZP),Y
INY
LDA (TMP_ZP),Y
STA (TMP2_ZP),Y
TXA				;LDA FPSTACKP
CLC
ADC #5
STA FPSTACKP
BCC NOPVRFPXX
INC FPSTACKP+1
NOPVRFPXX	RTS
;###################################
;###################################
PUSHREAL	LDX FPSTACKP
LDY FPSTACKP+1
JSR FACMEM
LDA FPSTACKP
CLC
ADC #5
STA FPSTACKP
BCC NOPVPUR
INC FPSTACKP+1
NOPVPUR		RTS
;###################################
;###################################
POPREAL2X	LDA FPSTACKP
SEC
SBC #5
STA FPSTACKP
BCS NOPVPR2X
DEC FPSTACKP+1
NOPVPR2X	LDA FPSTACKP
LDY FPSTACKP+1
JSR REALFAC
JSR XREGARG
RTS
;###################################
;###################################
POPREAL		LDA FPSTACKP
SEC
SBC #5
STA FPSTACKP
BCS NOPVPR
DEC FPSTACKP+1
NOPVPR		LDA FPSTACKP
LDY FPSTACKP+1
JMP REALFAC
;###################################
;###################################
POPREALXREG LDA FPSTACKP
SEC
SBC #5
STA FPSTACKP
BCS NOPVPRXR
DEC FPSTACKP+1
NOPVPRXR	LDA FPSTACKP
LDY FPSTACKP+1
STA TMP_ZP
STY TMP_ZP+1
LDY #$4
LDA (TMP_ZP),Y
STA X_REG+4
STA FACLO
DEY
LDA (TMP_ZP),Y
STA X_REG+3
STA FACMO
DEY
LDA (TMP_ZP),Y
STA X_REG+2
STA FACMOH
DEY
LDA (TMP_ZP),Y
STA X_REG+1
STA FACSGN
ORA #$80
STA FACHO
DEY
LDA (TMP_ZP),Y
STA X_REG
STA FACEXP
STY FACOV
RTS
;###################################
;###################################
SHR			LDA FACEXP
BEQ SHROK
SEC
SBC A_REG
BCS SHROK
LDA #0
STA FACSGN
STA FACLO
STA FACMO
STA FACMOH
STA FACHO
SHROK		STA FACEXP
RTS
;###################################
;###################################
SHL			LDA FACEXP
BEQ SHLOK
CLC
ADC A_REG
BCC SHLOK
LDA #0
STA FACSGN
STA FACLO
STA FACMO
STA FACMOH
STA FACHO
LDA #$FF
SHLOK		STA FACEXP
RTS
;###################################
;###################################
NEG			LDA FACSGN
EOR #$FF
STA FACSGN
RTS
;### HELPER ########################
;###################################
INCTMPZP	LDA TMP_ZP
CLC
ADC TMP3_ZP
STA TMP_ZP
BCC NOPV2
INC TMP_ZP+1
NOPV2		RTS
;###################################
;###################################
ICMP		STY TMP3_ZP
STA TMP3_ZP+1
LDA TMP_ZP+1
CMP TMP3_ZP+1
BNE ICMPNE2
LDA TMP_ZP
CMP TMP3_ZP
ICMPNE		BEQ ICMPEQ
BCS ICMPHIGHER
JMP ICMPLOWER
ICMPNE2		BPL ICMPHIGHER
JMP ICMPLOWER
ICMPEQ		LDA #0
RTS
ICMPLOWER	LDA #$FF
SEC
RTS
ICMPHIGHER	LDA #$01
CLC
RTS
;###################################
;###################################
COPY2_XYA	STA TMP3_ZP
COPY2_XY	STX TMP_ZP
STY TMP_ZP+1
COPY3_XY	LDY #0
LDA (TMP3_ZP),Y
STA (TMP_ZP),Y
INY
LDA (TMP3_ZP),Y
STA (TMP_ZP),Y
INY
LDA (TMP3_ZP),Y
STA (TMP_ZP),Y
INY
LDA (TMP3_ZP),Y
STA (TMP_ZP),Y
INY
LDA (TMP3_ZP),Y
STA (TMP_ZP),Y
RTS
;###################################
;###################################
COPY2_YREG_XYA
LDY #0
LDA Y_REG
STA (TMP_ZP),Y
INY
LDA Y_REG+1
STA (TMP_ZP),Y
INY
LDA Y_REG+2
STA (TMP_ZP),Y
INY
LDA Y_REG+3
STA (TMP_ZP),Y
INY
LDA Y_REG+4
STA (TMP_ZP),Y
RTS
;###################################
;###################################
COPY2_XYA_XREG
STA TMP3_ZP
STY TMP3_ZP+1
COPY2_XY_XREG
LDX #<X_REG		; the pointer to X_REG has to be in X, because the "value already in X"-optimization might expect it to be there! YIKES!
LDY #0
LDA (TMP3_ZP),Y
STA X_REG
INY
LDA (TMP3_ZP),Y
STA X_REG+1
INY
LDA (TMP3_ZP),Y
STA X_REG+2
INY
LDA (TMP3_ZP),Y
STA X_REG+3
INY
LDA (TMP3_ZP),Y
STA X_REG+4
RTS
;###################################
;###################################
COPY2_XYA_CREG
STA TMP3_ZP
STY TMP3_ZP+1
COPY2_XY_CREG
LDX #<C_REG		; the pointer to C_REG has to be in X, because the "value already in X"-optimization might expect it to be there! YIKES!
LDY #0
LDA (TMP3_ZP),Y
STA C_REG
INY
LDA (TMP3_ZP),Y
STA C_REG+1
INY
LDA (TMP3_ZP),Y
STA C_REG+2
INY
LDA (TMP3_ZP),Y
STA C_REG+3
INY
LDA (TMP3_ZP),Y
STA C_REG+4
RTS
;###################################
;###################################
COPY2_XYA_YREG
STA TMP3_ZP
STY TMP3_ZP+1
COPY2_XY_YREG
LDX #<Y_REG		; the pointer to Y_REG has to be in X, because the "value already in X"-optimization might expect it to be there! YIKES!
LDY #0
LDA (TMP3_ZP),Y
STA Y_REG
INY
LDA (TMP3_ZP),Y
STA Y_REG+1
INY
LDA (TMP3_ZP),Y
STA Y_REG+2
INY
LDA (TMP3_ZP),Y
STA Y_REG+3
INY
LDA (TMP3_ZP),Y
STA Y_REG+4
RTS
;###################################
;###################################
COPY_XREG2YREG
LDA X_REG
STA Y_REG
LDA X_REG+1
STA Y_REG+1
LDA X_REG+2
STA Y_REG+2
LDA X_REG+3
STA Y_REG+3
LDA X_REG+4
STA Y_REG+4
RTS
;###################################
;###################################
PEEKBYTESUB
JSR YREGFAC
JSR FACWORD
STY PEEKBYTE+1
STA PEEKBYTE+2
PEEKBYTE
LDY $FFFF
LDX #0
RTS
;###################################
;###################################
PEEKBYTEANDFAST
JSR PEEKBYTESUB
TYA
AND A_REG
TAY
RTS
;###################################
;###################################
<IF !BIGRAM>
FACWORD
LDA FACEXP			; Check if there's a -0 in FAC1
BNE DOFACWORD
STA FACSGN			; make sure that it's not -0
DOFACWORD:
JMP XFACWORD
</IF>
;###################################
;###################################
ONETOFAC    LDX #129
STX FAC
DEX
STX FAC+1
LDX #0
STX FAC+2
STX FAC+3
STX FAC+4
STX FAC+5
STX FAC+6
RTS
;###################################
;###################################
FASTAND		LDA ARGEXP			; Check ARG for 0
BNE CHECKFAC
STA FACSGN			; if so, set FAC to 0 and exit
STA FACLO
STA FACMO
STA FACMOH
STA FACHO
STA FACEXP
RTS
CHECKFAC	LDA FACEXP			; Check if there's a -1 in FAC1
BNE FACNOTNULL
STA FACSGN			; make sure that it's not -0
RTS				; FAC is 0, then exit
FACNOTNULL	CMP #$81
BNE NORMALAND
LDA FACHO
CMP #$80
BNE NORMALAND
LDA FACMOH
BNE NORMALAND
LDA FACMO
BNE NORMALAND
LDA FACLO
BNE NORMALAND
LDA FACSGN
ROL
BCC NORMALAND
LDA ARGEXP			; Check if there's a -1 in ARG
CMP #$81
BNE NORMALAND
LDA ARGHO
CMP #$80
BNE NORMALAND
LDA ARGMOH
BNE NORMALAND
LDA ARGMO
BNE NORMALAND
LDA ARGLO
BNE NORMALAND
LDA ARGSGN
ROL
BCC NORMALAND
RTS				; both, FAC1 and ARG contain -1...then we leave FAC1 untouched and return
NORMALAND	JMP ARGAND
;###################################
;###################################
FASTOR		LDA FACEXP			; Check FAC for 0
BNE CHECKFACOR
LDA ARGEXP			; if so, is ARG = 0 as well?
BNE CHECKARGOR	; no, continue with ARG (FAC is still 0 here)
LDA #0
STA FACSGN			; make sure that the negative flag is deleted in this case...
RTS				; yes? Then we leave FAC untouched
CHECKFACOR	LDA FACEXP			; Check if there's a -1 in FAC1
CMP #$81
BNE NORMALOR
LDA FACHO
CMP #$80
BNE NORMALOR
LDA FACMOH
BNE NORMALOR
LDA FACMO
BNE NORMALOR
LDA FACLO
BNE NORMALOR
LDA FACSGN
ROL
BCC NORMALOR
CHECKARGOR	LDA ARGEXP			; Check if there's a -1 in ARG
BNE CHECKARGOR2
RTS 			; ARG is actually 0? Then the value of FAC doesn't change. We can exit here
CHECKARGOR2	CMP #$81
BNE NORMALOR
LDA ARGHO
CMP #$80
BNE NORMALOR
LDA ARGMOH
BNE NORMALOR
LDA ARGMO
BNE NORMALOR
LDA ARGLO
BNE NORMALOR
LDA ARGSGN
AND #$80
CMP #$80
BNE NORMALOR
JMP ARGFAC		; ARG is 1, so just copy it to FAC and exit (implicit)
NORMALOR	JMP FACOR
;###################################
;###################################
INITINCHANNEL
LDA IOCHANNEL
STA STORE1+1
LDA #1
STA IOCHANNEL		; Something that's not the screen...that's enough for the check the CRSRRIGHT does...
LDA #<C_REG
LDY #>C_REG
JSR REALFAC
JSR FACWORD
TYA
TAX
STA CHANNEL
STA CHLOCKFLAG
JMP CHKIN
RTS
;###################################
;###################################
CLRCHNEW
LDA CHLOCKFLAG
BNE SKIPCLRCH
JMP CLRCH
SKIPCLRCH
RTS
;###################################
;###################################
INPUTSTRCHANNEL
JSR INITINCHANNEL
JSR INPUTSTR
JMP CLRINCH
;###################################
;###################################
CLRINCH		JSR CLRCH
LDA STORE1+1
STA IOCHANNEL
RTS
;###################################
;###################################
LOAD		JSR SETNAMEPRT
LDA #$0
STA VERCHK		; reset Load/Verify-Flag
STA STATUS		; reset status
LOADINT
<IF BOOST>
JSR BOOSTOFF
</IF>
JSR XREGFAC
JSR FACWORD
STY DEVICENUM	; Store device number
JSR YREGFAC		; read secondary address
JSR FACWORD
TYA
BNE LOADBAS
LDA BASICSTART	; secondary address 0, load to basic start
STA LOADEND
LDA BASICSTART+1
STA LOADEND+1
LDA #0
JMP SKPBAS
LOADBAS		LDA #1			; set secondary address to 1, if not 0
SKPBAS		STA SECADDR
LDA VERCHK		; restore these for load call (which sets them again)
LDX LOADEND
LDY LOADEND+1
JSR LOADXX
LDA STATUS
BEQ LOADOK		; Actually, this is for the X16. The C64 ROM doesn't set it to 0, but to 64...shouldn't be an issue though...
CMP #LOADOK_STATUS
BEQ LOADOK
JMP FILENOTFOUND
LOADOK
<IF BOOST>
JSR BOOSTON
</IF>
RTS
;###################################
;###################################
OPEN		JSR SETEMPTYSTR	; Prepare with an empty string
JSR YREGFAC
JSR FACWORD
STY TMP_REG		; store parameter count in TMP_REG
JSR XREGFAC
JSR FACWORD
STY LOGICADDR	; store logical address
DEC TMP_REG
BEQ ALLPARAMS
LDA #<C_REG
LDY #>C_REG
JSR REALFAC
JSR FACWORD
STY DEVICENUM	; store device number
DEC TMP_REG
BEQ ALLPARAMS
LDA #<D_REG
LDY #>D_REG
JSR REALFAC
JSR FACWORD
STY SECADDR		; store secondary address
DEC TMP_REG
BEQ ALLPARAMS
JSR SETNAMEPRT
ALLPARAMS
<IF BOOST>
JSR BOOSTOFF
</IF>
JSR OPENCH
BCS OPENERR
RTS
OPENERR		STA TMP2_ZP
LDA LOGICADDR
JSR CLOSECH
<IF BOOST>
JSR BOOSTON
</IF>
LDX TMP2_ZP
JMP ERRALL
;###################################
;###################################
SETEMPTYSTR
LDA #<EMPTYSTR
STA FILEADDR
LDA #>EMPTYSTR
STA FILEADDR+1
LDA #0
STA FILELEN
STA LOGICADDR
STA DEVICENUM
STA SECADDR
RTS
;###################################
;###################################
SETNAMEPRT	LDA G_REG
LDY G_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDY #0
LDA (TMP_ZP),Y	; get string parameter length
STA FILELEN
INC G_REG
BNE SNPNOOV
INC G_REG+1
SNPNOOV		LDA G_REG
LDY G_REG+1
STA FILEADDR		; low byte of string parameter
STY FILEADDR+1	; high byte of string parameter
RTS
;###################################
;###################################
CLOSE		JSR XREGFAC
JSR FACWORD
TYA				; file number into A
JSR CLOSECH
<IF BOOST>
JSR BOOSTON
</IF>
RTS
;###################################
;###################################
FINX		LDA #<REAL_CONST_ONE
LDY #>REAL_CONST_ONE
JSR REALFAC
JSR XREGARG
JSR FASTFADDARG
JMP FACXREG
;###################################
;###################################
FIDEX		CPY #0
BNE FIDEXNOV
SEC
SBC #$1
FIDEXNOV	DEY
JSR INTFAC
JMP FACXREG
;###################################
;###################################
FIINX		INY
BNE FIINXNOV
CLC
ADC #$1
FIINXNOV	JSR INTFAC
JMP FACXREG
;###################################
;###################################
SUPERFIINX	INY
BNE SFIINXNOV
CLC
ADC #$1
CMP #$80
BNE SFIINXNOV
JMP ILLEGALQUANTITY
SFIINXNOV	RTS
;###################################
;###################################
SUPERFIDEX	CPY #0
BNE SUPERFIDEXNOV
SEC
SBC #$1
CMP #$7F
BNE SUPERFIDEXNOV
JMP ILLEGALQUANTITY
SUPERFIDEXNOV
DEY
RTS
;###################################
;###################################
NEXTWOFOR
<IF BOOST>
JSR BOOSTDIASBLE
</IF>
LDX #$0A
JMP ERRALL
;###################################
;###################################
OUTOFDATA
<IF BOOST>
JSR BOOSTDIASBLE
</IF>
LDX #$0D
JMP ERRALL
;###################################
;###################################
OUTOFMEMORY
<IF BOOST>
JSR BOOSTDIASBLE
</IF>
LDX #$10
JMP ERRALL
;###################################
;###################################
STRINGTOOLONG
<IF BOOST>
JSR BOOSTDIASBLE
</IF>
LDX #$17
JMP ERRALL
;###################################
;###################################
ILLEGALQUANTITY
<IF BOOST>
JSR BOOSTDIASBLE
</IF>
JMP ERRIQ
;###################################
;###################################
SYNTAXERROR
<IF BOOST>
JSR BOOSTDIASBLE
</IF>
JMP ERRSYN
;###################################
;###################################
FILENOTFOUND
JSR CLRCHNEW
JMP FNFOUT
FNFTXT		.TEXT "i/o error"
.BYTE $0
FNFOUT		LDY #0
FNFOUT2		LDA FNFTXT,Y
BEQ FNFST
INY
JSR CHROUT
JMP FNFOUT2
FNFST		LDY STATUS
LDA #0
JSR INTFAC
JMP REALOUTINT
;###################################
;###################################
FACXREG		LDA FACLO
STA X_REG+4
LDA FACMO
STA X_REG+3
LDA FACMOH
STA X_REG+2
LDA FACSGN
ORA #$7F
AND FACHO
STA X_REG+1
LDA FACEXP
STA X_REG
LDA #0			; Why? Don't know...the ROM does this as well...
STA FACOV
RTS
;###################################
;###################################
FACYREG		LDA FACLO
STA Y_REG+4
LDA FACMO
STA Y_REG+3
LDA FACMOH
STA Y_REG+2
LDA FACSGN
ORA #$7F
AND FACHO
STA Y_REG+1
LDA FACEXP
STA Y_REG
LDA #0			; Why? Don't know...the ROM does this as well...
STA FACOV
RTS
;###################################
;###################################
XXBASINT	LDA ARGLO		;BASINT breaks the content of ARG, so we save and restore it in F_REG
STA F_REG+4
LDA ARGMO
STA F_REG+3
LDA ARGMOH
STA F_REG+2
LDA ARGSGN
ORA #$7F
AND ARGHO
STA F_REG+1
LDA ARGEXP
STA F_REG
JSR BASINT
LDA F_REG+4
STA ARGLO
LDA F_REG+3
STA ARGMO
LDA F_REG+2
STA ARGMOH
LDA F_REG+1
STA ARGSGN
EOR FACSGN		; Does this have a point in this context? I'm not sure...
STA ARISGN
LDA ARGSGN
ORA #$80
STA ARGHO
LDA F_REG
STA ARGEXP
LDA FACEXP
RTS
;###################################
;###################################
XREGFAC		LDA X_REG+4
STA FACLO
LDA X_REG+3
STA FACMO
LDA X_REG+2
STA FACMOH
LDA X_REG+1
STA FACSGN
ORA #$80
STA FACHO
LDA X_REG
STA FACEXP
LDA #0
STA FACOV
RTS
;###################################
;###################################
XREGARG		LDA X_REG+4
STA ARGLO
LDA X_REG+3
STA ARGMO
LDA X_REG+2
STA ARGMOH
LDA X_REG+1
STA ARGSGN
EOR FACSGN
STA ARISGN
LDA ARGSGN
ORA #$80
STA ARGHO
LDA X_REG
STA ARGEXP
LDA FACEXP
RTS
;###################################
;###################################
YREGFAC		LDA Y_REG+4
STA FACLO
LDA Y_REG+3
STA FACMO
LDA Y_REG+2
STA FACMOH
LDA Y_REG+1
STA FACSGN
ORA #$80
STA FACHO
LDA Y_REG
STA FACEXP
LDA #0
STA FACOV
RTS
;###################################
;###################################
<IF BOOST>
BOOSTENABLE
LDA $D030
CMP #$FF
BNE C128
RTS
C128
LDA #1
STA BOOSTFLAG
LDA #0
STA BOOSTCNT
LDA $0314
STA IRQROUT
LDA $0315
STA IRQROUT+1
SEI
LDA #<MYRASTER
STA $0314
LDA #>MYRASTER
STA $0315
LDA #46
STA $D012
LDA $D011
AND #127
STA $D011
LDA $D01A
ORA #1
STA $D01A
CLI
RTS
MYRASTER
LDA $D019
BMI RASTER
LDA $DC0D
CLI
JMP $EA31
RASTER
STA $D019
LDA $D012
CMP #254
BCS SETSTART
LDA #0
STA $D030
LDA #254
STA $D012
JMP EXIT
SETSTART
LDA #1
STA $D030
LDA #46
STA $D012
EXIT
PLA
TAY
PLA
TAX
PLA
RTI
BOOSTFLAG
.BYTE 0
BOOSTCNT
.BYTE 0
IRQROUT
.WORD 0
NOBOOST
RTS
BOOSTOFF
LDA BOOSTFLAG
BEQ NOBOOST
SEI
LDA $D01A
AND #14
STA $D01A
LDA #0
STA $D030
INC BOOSTCNT
CLI
RTS
BOOSTON
LDA BOOSTFLAG
BEQ NOBOOST
LDA BOOSTCNT
BEQ BOOSTZERO	; Zero? Then just enable boost
BPL BOOSTNOV
LDA #0			; Counter >128, then reset it anyway (should not occur)
STA BOOSTCNT
JMP BOOSTZERO
BOOSTNOV
DEC BOOSTCNT
BNE NOBOOST
BOOSTZERO
SEI
LDA $D01A
ORA #1
STA $D01A
CLI
RTS
BOOSTDIASBLE
LDA BOOSTFLAG
BEQ NOBOOST
JSR BOOSTOFF
SEI
LDA IRQROUT
STA $0314
LDA IRQROUT+1
STA $0315
CLI
RTS
</IF>
;###################################
;###################################
FASTFSUBMEM
JSR MEMARG
FASTFSUBARG
LDA FACSGN
EOR #$FF
STA FACSGN
EOR ARGSGN
STA ARISGN
LDA FACEXP
JMP FASTFADDARG
;###################################
;###################################
FASTFADDMEM
JSR MEMARG
FASTFADDARG
BNE FADDRET2   		; JUMP IF FAC IS NOT ZERO.
JMP ARGFAC
FADDRET2	LDA ARGEXP
BNE FADDRET1   		; JUMP IF ARG IS NOT ZERO.
RTS
FADDRET1	SEC
SBC FACEXP
BEQ FFADD_EXPEQ     ; JUMP IF NO SHIFTING NEEDED. THE A REGISTER IS ALREADY ZERO.
BCC FFADD_SHFARG1   ; JUMP IF ARG NEEDS SHIFTING (HAS SMALLER EXPONENT).
LDY ARGEXP
STY FACEXP
LDY ARGSGN
STY FACSGN
LDX #0
STX OLDOV      		; ARG HAS NO ROUNDING BITS.
LDX #FAC       		; INDICATE FAC IS THE SMALLEST OPERAND.
SEC
SBC #$08
BMI FFADD_SHFFAC2
FFADD_SHFFAC1
LDY FACLO      		; LO -> OV
STY FACOV
LDY FACMO      		; MO -> LO
STY FACMO+1
LDY FACMOH     		; MOH -> MO
STY FACMOH+1
LDY FACHO      		; HO -> MOH
STY FACHO+1
LDY #0
STY FACHO      		; 0 -> HO
SBC #$08       		; CARRY IS ALWAYS SET HERE.
BPL FFADD_SHFFAC1   ; JUMP IF MORE BYTES TO SHIFT.
FFADD_SHFFAC2
ADC #$08       		; CARRY IS ALWAYS CLEAR HERE.
BEQ FFADD_SHFFAC4   ; JUMP IF NO MORE SHIFTING.
TAY
LDA FACOV
FFADD_SHFFAC3
LSR FACHO      		; HO
ROR FACMOH     		; MOH
ROR FACMO      		; MO
ROR FACLO      		; LO
ROR            		; OV
DEY
BNE FFADD_SHFFAC3
JMP FFADD_MANADD2   ; NO MORE SHIFTING.
FFADD_SHFFAC4
LDA FACOV       	; THE A-REGISTER CONTAINS THE SHIFTED ROUNDING BITS OF FAC.
JMP FFADD_MANADD2
FFADD_EXPEQ
LDX FACOV
STX OLDOV
JMP FFADD_MANADD1
FFADD_SHFARG2
LDA FACOV      		; THE A-REGISTER CONTAINS THE SHIFTED ROUNDING BITS OF ARG.
JMP FFADD_MANADD1
FFADD_SHFARG1
LDX FACOV
STX OLDOV      		; OLDOV NOW CONTAINS ROUNDING BITS OF FAC.
LDX #$00       		; USE X-REGISTER FOR ROUNDING BITS OF ARG.
ADC #$08
BPL FFADD_SHFARG6   ; JUMP IF LESS THAN 8 SHIFTS.
FFADD_SHFARG3
LDX ARGLO      		; SHIFT RIGHT ONE BYTE
LDY ARGMO      		; MO -> LO
STY ARGMO+1
LDY ARGMOH     		; MOH -> MO
STY ARGMOH+1
LDY ARGHO      		; HO -> MOH
STY ARGHO+1
LDY #0
STY ARGHO      		; 0 -> HO
FFADD_SHFARG4
ADC #$08
BMI FFADD_SHFARG3
BEQ FFADD_SHFARG3
FFADD_SHFARG6
SBC #$08
BEQ FFADD_SHFARG2   ; JUMP IF NO MORE SHIFTING.
TAY
TXA            		; ROUNDING BITS.
FFADD_SHFARG5
LSR ARGHO
ROR ARGMOH
ROR ARGMO
ROR ARGLO
ROR         		; OV
INY
BNE FFADD_SHFARG5
FFADD_MANADD1
LDX #ARGEXP    		; INDICATE ARG IS THE SMALLEST OPERAND.
FFADD_MANADD2
BIT ARISGN
BMI FFADD_MANSUB1   ; JUMP IF OPERANDS HAVE DIFFERENT SIGN.
CLC
ADC OLDOV
STA FACOV
LDA FACLO
ADC ARGLO
STA FACLO
LDA FACMO
ADC ARGMO
STA FACMO
LDA FACMOH
ADC ARGMOH
STA FACMOH
LDA FACHO
ADC ARGHO
STA FACHO
BCC FFADD_RNDRTS
INC FACEXP
BEQ FFADD_OVERR
ROR FACHO
ROR FACMOH
ROR FACMO
ROR FACLO
ROR FACOV
FFADD_RNDRTS
RTS
FFADD_OVERR
JMP ILLEGALQUANTITY
FFADD_MANSUB1
LDY #FACEXP
CPX #ARGEXP
BEQ FFADD_MANSUB2
LDY #ARGEXP
FFADD_MANSUB2
SEC            		; NEGATE THE ROUNDING BITS BEFORE ADDING.
EOR #$FF
ADC OLDOV
STA FACOV
LDA 4,Y
SBC 4,X
STA FACLO
LDA 3,Y
SBC 3,X
STA FACMO
LDA 2,Y
SBC 2,X
STA FACMOH
LDA 1,Y
SBC 1,X
STA FACHO
BCS FCNORMAL
LDA FACSGN
EOR #$FF
STA FACSGN
LDA FACHO
EOR #$FF
STA FACHO
LDA FACMOH
EOR #$FF
STA FACMOH
LDA FACMO
EOR #$FF
STA FACMO
LDA FACLO
EOR #$FF
STA FACLO
LDA FACOV
EOR #$FF
CLC
ADC #1
STA FACOV
BNE FCNORMAL
INC FACLO
BNE FCNORMAL
INC FACMO
BNE FCNORMAL
INC FACMOH
BNE FCNORMAL
INC FACHO
FCNORMAL  	BIT FACHO
BMI FFADD_RET       ; JUMP IF NUMBER IS ALREADY NORMALIZED.
LDA #0         		; NUMBER OF BITS ROTATED.
CLC
FFADD_NORM3
LDX FACHO
BNE FFADD_NORM1
LDX FACHO+1
STX FACHO
LDX FACMOH+1
STX FACMOH
LDX FACMO+1
STX FACMO
LDX FACOV
STX FACLO
LDX #0
STX FACOV
ADC #$08
CMP #$20
BNE FFADD_NORM3
JMP FFADD_ZEROFAC
FFADD_NORM2
CLC
ADC #1
ASL FACOV
ROL FACLO
ROL FACMO
ROL FACMOH
ROL FACHO
FFADD_NORM1
BPL FFADD_NORM2     ; WE MUST SHIFT LEFT ONE BIT
SEC
SBC FACEXP
BCS FFADD_ZEROFAC
EOR #$FF
CLC
ADC #1
STA FACEXP
FFADD_RET   RTS
FFADD_ZEROFAC
LDX #0
STX FACEXP
STX FACSGN
RTS
;###################################
;###################################
FASTFMULMEM
JSR MEMARG
FASTFMULARG
BEQ FFMUL_MULTRT    ; JUMP IF FAC IS ZERO.
LDA ARGEXP
BEQ FFMUL_ZEREMV    ; JUMP IF ARG IS ZERO.
CLC
ADC FACEXP
BCC FFMUL_TRYOFF
CLC
BPL FFMUL_ADJUST
JMP ILLEGALQUANTITY
FFMUL_ZEREMV
LDY #0
STY FACEXP     		; RESULT IS ZERO.
STY FACSGN
FFMUL_MULTRT
RTS
FFMUL_TRYOFF
BPL FFMUL_ZEREMV    ; JUMP IF UNDERFLOW.
FFMUL_ADJUST
ADC #$80       		; CARRY IS ALWAYS CLEAR HERE.
BEQ FFMUL_ZEREMV    ; JUMP IF UNDERFLOW.
STA FACEXP
LDA ARISGN
STA FACSGN
LDY #0
STY RESHOP
STY RESHO
STY RESMOH
STY RESMO
STY RESLO
STY RESOV
STY FACHOP
FFMUL_B0
LSR ARGLO      		; B0
BCC FFMUL_B1
LDA RESOV
CLC
ADC FACMOH     		; A2
STA RESOV
LDA RESLO
ADC FACHO      		; A3
STA RESLO
LDA RESMO
ADC FACHOP     		; A4
STA RESMO
BCC FFMUL_B1
INC RESMOH
BNE FFMUL_B1
INC RESHO
BNE FFMUL_B1
INC RESHOP
FFMUL_B1
LSR ARGMO      		; B1
BCC FFMUL_B2
LDA RESOV
CLC
ADC FACMO      		; A1
STA RESOV
LDA RESLO
ADC FACMOH     		; A2
STA RESLO
LDA RESMO
ADC FACHO      		; A3
STA RESMO
LDA RESMOH
ADC FACHOP     		; A4
STA RESMOH
BCC FFMUL_B2
INC RESHO
BNE FFMUL_B2
INC RESHOP
FFMUL_B2
LSR ARGMOH     		; B2
BCC FFMUL_B3
LDA RESOV
CLC
ADC FACLO      		; A0
STA RESOV
LDA RESLO
ADC FACMO      		; A1
STA RESLO
LDA RESMO
ADC FACMOH     		; A2
STA RESMO
LDA RESMOH
ADC FACHO      		; A3
STA RESMOH
LDA RESHO
ADC FACHOP     		; A4
STA RESHO
BCC FFMUL_B3
INC RESHOP
FFMUL_B3
LSR ARGHO      		; B3
BCC FFMUL_ROTA
LDA RESOV
CLC
ADC FACOV      		; AV
STA RESOV
LDA RESLO
ADC FACLO      		; A0
STA RESLO
LDA RESMO
ADC FACMO      		; A1
STA RESMO
LDA RESMOH
ADC FACMOH     		; A2
STA RESMOH
LDA RESHO
ADC FACHO      		; A3
STA RESHO
LDA RESHOP
ADC FACHOP     		; A4
STA RESHOP
FFMUL_ROTA
ASL FACOV
ROL FACLO
ROL FACMO
ROL FACMOH
ROL FACHO
ROL FACHOP
BMI FFMUL_FIN
JMP FFMUL_B0
FFMUL_FIN
LDA RESHOP
STA FACHO
LDA RESHO
STA FACMOH
LDA RESMOH
STA FACMO
LDA RESMO
STA FACLO
LDA RESLO
STA FACOV
JMP FCNORMAL    		; IN BASIC/XADD.S
MUL10
JSR ARGFAC      	; ARG = FAC; LEAVES EXPONENT IN A REGISTER.
TAX            		; EXPONENT
BEQ FFMUL_MUL101    ; RETURN IF ZERO.
CLC
ADC #2
BCS FFMUL_MUL102    ; JUMP IF OVERFLOW
STA FACEXP     		; STORE NEW EXPONENT.
LDY #0
STY ARISGN
JSR FASTFADDARG      ; THE Z FLAG IS CLEAR HERE.
INC FACEXP
BEQ FFMUL_MUL102     ; JUMP IF OVERFLOW
FFMUL_MUL101
RTS
FFMUL_MUL102
JMP ILLEGALQUANTITY
MUL6
JSR ARGFAC      	; ARG = FAC
TAX            		; EXPONENT
BEQ FFMUL_MUL61     ; RETURN IF ZERO.
INC FACEXP
BEQ FFMUL_MUL62     ; JUMP IF OVERFLOW
LDY #0
STY ARISGN
JSR FASTFADDARG      ; THE Z FLAG IS CLEAR HERE.
INC FACEXP
BEQ FFMUL_MUL62     ; OVERFLOW
FFMUL_MUL61
RTS
FFMUL_MUL62
JMP ILLEGALQUANTITY
;###################################
;###############################
INITVARS
JSR INITSTRVARS
LDA #0
LDY #4
REALINITLOOP0:
STA VAR_I,Y
STA VAR_TI,Y
STA VAR_TT,Y
STA VAR_SB,Y
STA VAR_TS,Y
STA VAR_HH,Y
STA VAR_II,Y
STA VAR_SA,Y
STA VAR_PP,Y
STA VAR_PO,Y
STA VAR_CA,Y
STA VAR_LT,Y
STA VAR_DX,Y
STA VAR_DY,Y
STA VAR_I2,Y
STA VAR_I3,Y
STA VAR_P,Y
STA VAR_FQ,Y
STA VAR_P0,Y
STA VAR_P1,Y
STA VAR_IC,Y
STA VAR_XC,Y
STA VAR_Y,Y
STA VAR_I4,Y
STA VAR_F,Y
STA VAR_X,Y
DEY
BMI REALLOOPEXIT0
JMP REALINITLOOP0
REALLOOPEXIT0:
STA VAR_LF%
STA VAR_LF%+1
STA VAR_FI%
STA VAR_FI%+1
LDA #<VAR_PF%[]
LDY #>VAR_PF%[]
JSR INITSPARAMS
JSR INITNARRAY
LDA #0
STA VAR_MD%
STA VAR_MD%+1
STA VAR_AL%
STA VAR_AL%+1
STA VAR_MG%
STA VAR_MG%+1
STA VAR_AF%
STA VAR_AF%+1
STA VAR_RS%
STA VAR_RS%+1
LDA #<VAR_CV%[]
LDY #>VAR_CV%[]
JSR INITSPARAMS
JSR INITNARRAY
LDA #<VAR_HP%[]
LDY #>VAR_HP%[]
JSR INITSPARAMS
JSR INITNARRAY
LDA #0
STA VAR_VC%
STA VAR_VC%+1
STA VAR_AC%
STA VAR_AC%+1
STA VAR_IC%
STA VAR_IC%+1
LDA #<VAR_VW%[]
LDY #>VAR_VW%[]
JSR INITSPARAMS
JSR INITNARRAY
LDA #0
STA VAR_AT%
STA VAR_AT%+1
STA VAR_DD%
STA VAR_DD%+1
STA VAR_EL%
STA VAR_EL%+1
STA VAR_RL%
STA VAR_RL%+1
STA VAR_LQ%
STA VAR_LQ%+1
STA VAR_HQ%
STA VAR_HQ%+1
STA VAR_WF%
STA VAR_WF%+1
LDA #<VAR_VL[]
LDY #>VAR_VL[]
JSR INITSPARAMS
JSR INITNARRAY
LDA #0
STA VAR_PT%
STA VAR_PT%+1
LDA #<VAR_VT%[]
LDY #>VAR_VT%[]
JSR INITSPARAMS
JSR INITNARRAY
LDA #0
STA VAR_IM%
STA VAR_IM%+1
STA VAR_XC%
STA VAR_XC%+1
STA VAR_YC%
STA VAR_YC%+1
STA VAR_CN%
STA VAR_CN%+1
STA VAR_HP%
STA VAR_HP%+1
STA VAR_CX%
STA VAR_CX%+1
STA VAR_CY%
STA VAR_CY%+1
STA VAR_DC%
STA VAR_DC%+1
STA VAR_SS%
STA VAR_SS%+1
STA VAR_PV%
STA VAR_PV%+1
STA VAR_PC%
STA VAR_PC%+1
STA VAR_C%
STA VAR_C%+1
STA VAR_CC%
STA VAR_CC%+1
STA VAR_XD%
STA VAR_XD%+1
STA VAR_YD%
STA VAR_YD%+1
STA VAR_SE%
STA VAR_SE%+1
STA VAR_CM%
STA VAR_CM%+1
STA VAR_S1%
STA VAR_S1%+1
STA VAR_S2%
STA VAR_S2%+1
STA VAR_WN%
STA VAR_WN%+1
STA VAR_WW%
STA VAR_WW%+1
STA VAR_AV%
STA VAR_AV%+1
STA VAR_SG%
STA VAR_SG%+1
STA VAR_CH%
STA VAR_CH%+1
STA VAR_CB%
STA VAR_CB%+1
STA VAR_HC%
STA VAR_HC%+1
STA VAR_BC%
STA VAR_BC%+1
STA VAR_DS%
STA VAR_DS%+1
LDA #<VAR_CP%[]
LDY #>VAR_CP%[]
JSR INITSPARAMS
JSR INITNARRAY
LDA #0
STA VAR_PN%
STA VAR_PN%+1
STA VAR_PI%
STA VAR_PI%+1
STA VAR_I2%
STA VAR_I2%+1
STA VAR_I3%
STA VAR_I3%+1
STA VAR_I4%
STA VAR_I4%+1
STA VAR_II%
STA VAR_II%+1
LDA #<VAR_CD%[]
LDY #>VAR_CD%[]
JSR INITSPARAMS
JSR INITNARRAY
LDA #0
STA VAR_A%
STA VAR_A%+1
LDA #<VAR_FC%[]
LDY #>VAR_FC%[]
JSR INITSPARAMS
JSR INITNARRAY
LDA #<VAR_SB%[]
LDY #>VAR_SB%[]
JSR INITSPARAMS
JSR INITNARRAY
LDA #0
STA VAR_CI%
STA VAR_CI%+1
STA VAR_SF%
STA VAR_SF%+1
STA VAR_CS%
STA VAR_CS%+1
STA VAR_LT%
STA VAR_LT%+1
STA VAR_KY%
STA VAR_KY%+1
STA VAR_SO%
STA VAR_SO%+1
STA VAR_TC%
STA VAR_TC%+1
LDA #<VAR_CT%[]
LDY #>VAR_CT%[]
JSR INITSPARAMS
JSR INITNARRAY
LDA #0
STA VAR_WT%
STA VAR_WT%+1
STA VAR_SL%
STA VAR_SL%+1
STA VAR_FS%
STA VAR_FS%+1
STA VAR_SD%
STA VAR_SD%+1
STA VAR_DR%
STA VAR_DR%+1
STA VAR_TX%
STA VAR_TX%+1
STA VAR_TY%
STA VAR_TY%+1
STA VAR_TN%
STA VAR_TN%+1
STA VAR_IR%
STA VAR_IR%+1
STA VAR_AS%
STA VAR_AS%+1
STA VAR_DA%
STA VAR_DA%+1
STA VAR_VX%
STA VAR_VX%+1
STA VAR_VY%
STA VAR_VY%+1
STA VAR_DZ%
STA VAR_DZ%+1
STA VAR_XS%
STA VAR_XS%+1
STA VAR_YS%
STA VAR_YS%+1
STA VAR_XE%
STA VAR_XE%+1
STA VAR_YE%
STA VAR_YE%+1
LDA #<VAR_CK%[]
LDY #>VAR_CK%[]
JSR INITSPARAMS
JSR INITNARRAY
LDA #0
STA VAR_RW%
STA VAR_RW%+1
STA VAR_OV%
STA VAR_OV%+1
STA VAR_UR%
STA VAR_UR%+1
STA VAR_P2%
STA VAR_P2%+1
STA VAR_TP%
STA VAR_TP%+1
LDA #<VAR_SK%[]
LDY #>VAR_SK%[]
JSR INITSPARAMS
JSR INITNARRAY
LDA #0
STA VAR_HF%
STA VAR_HF%+1
STA VAR_I5%
STA VAR_I5%+1
STA VAR_HH%
STA VAR_HH%+1
STA VAR_IB%
STA VAR_IB%+1
STA VAR_P0%
STA VAR_P0%+1
STA VAR_P1%
STA VAR_P1%+1
STA VAR_IO%
STA VAR_IO%+1
STA VAR_TV%
STA VAR_TV%+1
STA VAR_IT%
STA VAR_IT%+1
STA VAR_X1%
STA VAR_X1%+1
STA VAR_Y1%
STA VAR_Y1%+1
STA VAR_P3%
STA VAR_P3%+1
STA VAR_P4%
STA VAR_P4%+1
STA VAR_PO%
STA VAR_PO%+1
STA VAR_XT%
STA VAR_XT%+1
STA VAR_YT%
STA VAR_YT%+1
STA VAR_7%
STA VAR_7%+1
STA VAR_SC%
STA VAR_SC%+1
STA VAR_PF%
STA VAR_PF%+1
LDA #<VAR_AI%[]
LDY #>VAR_AI%[]
JSR INITSPARAMS
JSR INITNARRAY
LDA #0
STA VAR_EV%
STA VAR_EV%+1
STA VAR_MX%
STA VAR_MX%+1
STA VAR_GZ%
STA VAR_GZ%+1
STA VAR_OX%
STA VAR_OX%+1
STA VAR_OY%
STA VAR_OY%+1
STA VAR_RR%
STA VAR_RR%+1
LDA #<VAR_RP%[]
LDY #>VAR_RP%[]
JSR INITSPARAMS
JSR INITNARRAY
LDA #0
STA VAR_MI%
STA VAR_MI%+1
LDA #<VAR_RO%[]
LDY #>VAR_RO%[]
JSR INITSPARAMS
JSR INITNARRAY
LDA #<VAR_RC%[]
LDY #>VAR_RC%[]
JSR INITSPARAMS
JSR INITNARRAY
LDA #0
STA VAR_B%
STA VAR_B%+1
STA VAR_I%
STA VAR_I%+1
STA VAR_Y%
STA VAR_Y%+1
RTS
;###############################
COMPACT0
JSR ARRAYACCESS_INTEGER_INT
JSR COMPACT162
JMP ICMP
;##################################################
COMPACT1
LDA #$ff
LDY #$ff
STA TMP_ZP
STY TMP_ZP+1
LDY TMP2_ZP
LDA TMP2_ZP+1
JMP ICMP
;##################################################
COMPACT2
JSR STR
LDY A_REG
LDA A_REG+1
STY B_REG
STA B_REG+1
RTS
;##################################################
COMPACT3
LDA #0
STY VAR_MG%
STA VAR_MG%+1
JSR GOSUB
JMP LINE_40000
;##################################################
COMPACT4
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_MD%
LDA VAR_MD%+1
JMP ICMP
;##################################################
COMPACT5
STY AS_TMP
STA AS_TMP+1
LDA #<VAR_PF%[]
LDY #>VAR_PF%[]
STA G_REG
STY G_REG+1
RTS
;##################################################
COMPACT6
JSR INTFAC
JSR PUSHREAL
LDA #<CONST_16R
LDY #>CONST_16R
JMP REALFACPUSH
;##################################################
COMPACT7
JSR INTFAC
JSR FACXREG
JSR POPREAL2X
JSR FASTFADDARG
JMP FACXREG
;##################################################
COMPACT8
JSR INTFAC
JSR COMPACT125
RTS
;##################################################
COMPACT9
JSR INTFAC
JSR COMPACT125
JMP ARRAYACCESS_INTEGER_SNX
;##################################################
COMPACT10
JSR COMPACT125
JMP ARRAYACCESS_INTEGER_SNX
;##################################################
COMPACT11
JSR INTFAC
JSR COMPACT125
JSR ARRAYACCESS_INTEGER_SNX
JMP COPY_XREG2YREG
;##################################################
COMPACT12
JSR INTFAC
JSR COMPACT125
JSR ARRAYACCESS_INTEGER_SNX
JSR COPY_XREG2YREG
JSR POPREALXREG
LDA #<VAR_HP%[]
LDY #>VAR_HP%[]
STA G_REG
STY G_REG+1
JMP ARRAYSTORE_INTEGER_NX
;##################################################
COMPACT13
JSR REALFACPUSH
JSR COMPACT59
RTS
;##################################################
COMPACT14
JSR REALFACPUSH
LDA #<VAR_I
LDY #>VAR_I
STA A_REG
STY A_REG+1
RTS
;##################################################
COMPACT15
LDA #<VAR_VW%[]
LDY #>VAR_VW%[]
STA G_REG
STY G_REG+1
LDY VAR_VC%
LDA VAR_VC%+1
RTS
;##################################################
COMPACT16
<IF !X16>
SEI
LDY TIMEADDR
LDX TIMEADDR+1
LDA TIMEADDR+2
CLI
</IF>
SEC
JSR COPYTIME
JSR GETTIME
LDX #<VAR_TI
LDY #>VAR_TI
JMP FACMEM
;##################################################
COMPACT17
JSR COMPACT166
JSR FACMEM
LDX #4
RTS
;##################################################
COMPACT18
JSR INTFAC
JSR FACXREG
JSR YREGFAC
LDA #<X_REG
LDY #>X_REG
RTS
;##################################################
COMPACT19
JSR COMPACT167
JMP FASTFMULMEM
;##################################################
COMPACT20
JSR REALFAC
LDA #<VAR_SB
LDY #>VAR_SB
JSR FASTFADDMEM
JMP PUSHREAL
;##################################################
COMPACT21
JSR COMPACT23
JMP FACXREG
;##################################################
COMPACT22
LDY #0
TYA
STY AS_TMP
STA AS_TMP+1
LDA #<VAR_VW%[]
LDY #>VAR_VW%[]
STA G_REG
STY G_REG+1
RTS
;##################################################
COMPACT23
JSR COPY2_XYA_XREG
JSR YREGFAC
LDA #<X_REG
LDY #>X_REG
JMP FASTFSUBMEM
;##################################################
COMPACT24
JSR FACXREG
JSR POPREAL
JSR FACYREG
LDA #<X_REG
LDY #>X_REG
JMP CMPFAC
;##################################################
COMPACT25
JSR POPREAL
JSR FACYREG
LDA #<X_REG
LDY #>X_REG
JMP CMPFAC
;##################################################
COMPACT26
JSR REALFAC
JSR COMPACT88
RTS
;##################################################
COMPACT27
LDA #0
STA VAR_II
STA VAR_II+1
STA VAR_II+2
STA VAR_II+3
STA VAR_II+4
RTS
;##################################################
COMPACT28
LDA #0
JSR COMPACT138
RTS
;##################################################
COMPACT29
JSR GOSUB
JSR LINE_34500
JSR COMPACT168
RTS
;##################################################
COMPACT30
LDY VAR_CY%
LDA VAR_CY%+1
JSR SUPERFIINX
STY VAR_CY%
STA VAR_CY%+1
RTS
;##################################################
COMPACT31
LDA #0
STY A_REG
STA A_REG+1
JSR YREGFAC
JMP SHL
;##################################################
COMPACT33
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_SS%
LDA VAR_SS%+1
JMP INTADD
;##################################################
COMPACT34
JSR FACXREG
LDA #<VAR_SA
LDY #>VAR_SA
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
JMP FASTFADDMEM
;##################################################
COMPACT35
JSR INTFAC
JSR FACXREG
LDA #<VAR_CV%[]
LDY #>VAR_CV%[]
JMP ARRAYACCESS_INTEGER_SNX
;##################################################
COMPACT36
LDA #<CONST_27R
LDY #>CONST_27R
JSR REALFACPUSH
LDY VAR_CN%
LDA VAR_CN%+1
RTS
;##################################################
COMPACT37
LDA #<CONST_28R
LDY #>CONST_28R
JSR REALFACPUSH
LDY VAR_CN%
LDA VAR_CN%+1
RTS
;##################################################
COMPACT38
LDA #<CONST_1R
LDY #>CONST_1R
JSR COMPACT79
RTS
;##################################################
COMPACT39
JSR FACXREG
LDA #<CONST_14R
LDY #>CONST_14R
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
RTS
;##################################################
COMPACT40
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFADDMEM
LDX #<VAR_PP
LDY #>VAR_PP
JMP FACMEM
;##################################################
COMPACT41
LDA #<VAR_CA
LDY #>VAR_CA
JSR REALFAC
LDA #<VAR_PP
LDY #>VAR_PP
JSR FASTFADDMEM
JMP FACWORD
;##################################################
COMPACT42
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_PV%
LDA VAR_PV%+1
JMP ICMP
;##################################################
COMPACT43
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_PV%
LDA VAR_PV%+1
JSR INTADD
JMP FACXREG
;##################################################
COMPACT44
JSR FACXREG
JSR COMPACT170
RTS
;##################################################
COMPACT45
JSR COMPACT169
JMP FASTFMULMEM
;##################################################
COMPACT46
LDA #<CONST_20R
LDY #>CONST_20R
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
JMP FASTFMULMEM
;##################################################
COMPACT47
JSR COPY2_XYA_XREG
LDA #<X_REG
LDY #>X_REG
JSR FASTFSUBMEM
JMP FACINT
;##################################################
COMPACT48
JSR FACXREG
LDY #3
JSR COMPACT90
JMP FASTFADDMEM
;##################################################
COMPACT49
JSR INTFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFADDMEM
JMP FACINT
;##################################################
COMPACT50
LDY VAR_XC%
LDA VAR_XC%+1
STY VAR_CX%
STA VAR_CX%+1
LDY VAR_YC%
LDA VAR_YC%+1
STY VAR_CY%
STA VAR_CY%+1
RTS
;##################################################
COMPACT51
JSR GOSUB
JSR LINE_31990
LDA #<CONST_51
LDY #>CONST_51
JMP STROUTWL
;##################################################
COMPACT52
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_AV%
LDA VAR_AV%+1
JMP ICMP
;##################################################
COMPACT53
STY AS_TMP
STA AS_TMP+1
LDA #<VAR_CV%[]
LDY #>VAR_CV%[]
STA G_REG
STY G_REG+1
JMP ARRAYSTORE_INT_INTEGER
;##################################################
COMPACT54
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<CONST_9
LDY #>CONST_9
JMP COPY2_XYA_YREG
;##################################################
COMPACT55
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_INTEGER
LDA #0
STA A_REG
STA A_REG+1
RTS
;##################################################
COMPACT56
LDA #<VAR_PF%[]
LDY #>VAR_PF%[]
STA G_REG
STY G_REG+1
JMP ARRAYSTORE_INTEGER
;##################################################
COMPACT57
STY AS_TMP
STA AS_TMP+1
LDA #<VAR_HP%[]
LDY #>VAR_HP%[]
STA G_REG
STY G_REG+1
RTS
;##################################################
COMPACT58
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_INT_INTEGER
LDA #0
STA A_REG
STA A_REG+1
RTS
;##################################################
COMPACT59
LDA #<CONST_2R
LDY #>CONST_2R
JSR COMPACT165
RTS
;##################################################
COMPACT60
STA G_REG
STY G_REG+1
LDY VAR_I2%
LDA VAR_I2%+1
JMP ARRAYACCESS_INTEGER_INT_SI
;##################################################
COMPACT61
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_A$
LDY #>VAR_A$
JMP COPYSTRING
;##################################################
COMPACT62
STA B_REG
STY B_REG+1
LDA VAR_A$
LDY VAR_A$+1
STA A_REG
STY A_REG+1
RTS
;##################################################
COMPACT63
JSR COMPACT172
JMP SEQ
;##################################################
COMPACT64
JSR COMPACT172
JSR SEQ
LDA X_REG
RTS
;##################################################
COMPACT65
LDY VAR_II%
LDA VAR_II%+1
JSR SUPERFIINX
STY VAR_II%
STA VAR_II%+1
RTS
;##################################################
COMPACT66
STY AS_TMP
STA AS_TMP+1
LDA #<VAR_CD%[]
LDY #>VAR_CD%[]
STA G_REG
STY G_REG+1
RTS
;##################################################
COMPACT67
LDA #<VAR_CD%[]
LDY #>VAR_CD%[]
STA G_REG
STY G_REG+1
LDY #0
RTS
;##################################################
COMPACT68
LDA #<CONST_15R
LDY #>CONST_15R
JSR REALFACPUSH
JSR ONETOFAC
JSR FACYREG
LDA #<Y_REG
LDY #>Y_REG
RTS
;##################################################
COMPACT69
LDA #0
STY VAR_CX%
STA VAR_CX%+1
LDY #24
LDA #0
STY VAR_CY%
STA VAR_CY%+1
JSR GOSUB
JMP LINE_34500
;##################################################
COMPACT70
LDA #0
STY VAR_CY%
STA VAR_CY%+1
JSR GOSUB
JMP LINE_34500
;##################################################
COMPACT71
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_II%
LDA VAR_II%+1
JMP ICMP
;##################################################
COMPACT72
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_II%
LDA VAR_II%+1
JMP ICMP
;##################################################
COMPACT73
LDY VAR_DS%
LDA VAR_DS%+1
STY TMP3_ZP
STA TMP3_ZP+1
LDY VAR_CS%
LDA VAR_CS%+1
JMP INTADDVAR
;##################################################
COMPACT74
JSR FACINT
STY VAR_CY%
STA VAR_CY%+1
JSR GOSUB
JMP LINE_34500
;##################################################
COMPACT75
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_CI%
LDA VAR_CI%+1
JMP ICMP
;##################################################
COMPACT76
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_I2%
LDA VAR_I2%+1
JMP ICMP
;##################################################
COMPACT77
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_PI%
LDA VAR_PI%+1
JMP ICMP
;##################################################
COMPACT78
LDA #<CONST_83R
LDY #>CONST_83R
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
RTS
;##################################################
COMPACT79
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
JSR CMPFAC
ROL
RTS
;##################################################
COMPACT80
LDA #<CONST_8R
LDY #>CONST_8R
JSR REALFACPUSH
LDA #<CONST_89
LDY #>CONST_89
JSR COPY2_XYA_CREG
TXA
LDY #>C_REG
JMP REALFACPUSH
;##################################################
COMPACT81
JSR COMPACT143
JMP STROUT
;##################################################
COMPACT82
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_KY%
LDA VAR_KY%+1
JMP ICMP
;##################################################
COMPACT83
JSR ARRAYACCESS_INTEGER_INT_SI
STY VAR_CN%
STA VAR_CN%+1
JSR GOSUB
JMP LINE_30000
;##################################################
COMPACT84
LDA #<VAR_I
LDY #>VAR_I
JSR REALFAC
JSR FACINT
STY VAR_II%
STA VAR_II%+1
RTS
;##################################################
COMPACT85
STA G_REG
STY G_REG+1
LDY VAR_II%
LDA VAR_II%+1
JSR ARRAYACCESS_INTEGER_INT
JSR COPY_XREG2YREG
JMP POPREALXREG
;##################################################
COMPACT86
JSR INTFAC
JSR FACXREG
LDA #<CONST_9
LDY #>CONST_9
JMP COPY2_XYA_YREG
;##################################################
COMPACT87
LDY #>X_REG
LDA #<X_REG
JSR REALFACPUSH
LDA #<CONST_103
LDY #>CONST_103
RTS
;##################################################
COMPACT88
JSR FACXREG
JSR POPREAL2X
JSR FASTOR
JSR FACXREG
LDA X_REG
RTS
;##################################################
COMPACT89
LDY #>X_REG
LDA #<X_REG
JSR REALFACPUSH
LDA #<CONST_92
LDY #>CONST_92
RTS
;##################################################
COMPACT90
JSR COMPACT98
LDA #<X_REG
LDY #>X_REG
RTS
;##################################################
COMPACT91
JSR INTFAC
JSR FACXREG
LDA #<CONST_9
LDY #>CONST_9
JSR COPY2_XYA_YREG
LDA #<VAR_CD%[]
LDY #>VAR_CD%[]
STA G_REG
STY G_REG+1
JMP ARRAYSTORE_INTEGER
;##################################################
COMPACT92
LDY #1
LDA #0
STY VAR_DC%
STA VAR_DC%+1
JMP GOSUB
;##################################################
COMPACT93
LDY #$00
LDA #$07
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_FS%
LDA VAR_FS%+1
JSR INTADD
JMP FACXREG
;##################################################
COMPACT94
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_II%
LDA VAR_II%+1
JSR INTADD
JSR INTCONV
STY VAR_II%
STA VAR_II%+1
RTS
;##################################################
COMPACT95
LDA #<VAR_HP%[]
LDY #>VAR_HP%[]
JSR ARRAYACCESS_INTEGER_SI
STY VAR_HP%
STA VAR_HP%+1
JSR GOSUB
JMP LINE_30000
;##################################################
COMPACT96
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFADDMEM
JMP FACINT
;##################################################
COMPACT97
LDA #<X_REG
LDY #>X_REG
JSR FASTFADDMEM
JSR FACINT
STY VAR_CX%
STA VAR_CX%+1
JMP GOSUB
;##################################################
COMPACT98
LDA #0
STY A_REG
STA A_REG+1
JSR YREGFAC
JMP SHL
;##################################################
COMPACT99
JSR COMPACT112
JMP FACXREG
;##################################################
COMPACT100
LDA #$ff
LDY #$ff
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_DR%
LDA VAR_DR%+1
JMP ICMP
;##################################################
COMPACT101
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_DR%
LDA VAR_DR%+1
JMP ICMP
;##################################################
COMPACT102
LDA #<VAR_II
LDY #>VAR_II
JSR COPY2_XYA_XREG
LDA #<VAR_PF%[]
LDY #>VAR_PF%[]
RTS
;##################################################
COMPACT103
LDA #<CONST_2R
LDY #>CONST_2R
JSR COMPACT152
RTS
;##################################################
COMPACT104
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_WN%
LDA VAR_WN%+1
JMP ICMP
;##################################################
COMPACT105
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<VAR_PF%[]
LDY #>VAR_PF%[]
RTS
;##################################################
COMPACT106
LDA #0
STA VAR_P
STA VAR_P+1
STA VAR_P+2
STA VAR_P+3
STA VAR_P+4
RTS
;##################################################
COMPACT107
JSR REALFACPUSH
LDA #<CONST_2R
LDY #>CONST_2R
JSR COMPACT152
RTS
;##################################################
COMPACT108
JSR ARRAYACCESS_INTEGER_S
JSR XREGFAC
JSR BASINT
JSR FACXREG
LDA #<VAR_CV%[]
LDY #>VAR_CV%[]
JMP ARRAYACCESS_INTEGER_SNX
;##################################################
COMPACT109
LDY #255
LDA #255
STY VAR_DR%
STA VAR_DR%+1
JMP GOSUB
;##################################################
COMPACT110
LDY #1
LDA #0
STY VAR_DR%
STA VAR_DR%+1
JMP GOSUB
;##################################################
COMPACT111
LDA #<Y_REG
LDY #>Y_REG
JSR REALFACPUSH
LDA #<VAR_PF%[]
LDY #>VAR_PF%[]
RTS
;##################################################
COMPACT112
JSR FACXREG
JSR YREGFAC
LDA #<X_REG
LDY #>X_REG
JMP FASTFADDMEM
;##################################################
COMPACT113
STY A_REG
STA A_REG+1
LDY #2
JSR INTSHL
JMP INTFAC
;##################################################
COMPACT114
LDY VAR_DR%
LDA VAR_DR%+1
STY A_REG
STA A_REG+1
LDY #2
JMP INTSHL
;##################################################
COMPACT115
LDA #$ff
LDY #$ff
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_CN%
LDA VAR_CN%+1
JMP ICMP
;##################################################
COMPACT116
LDY VAR_CN%
LDA VAR_CN%+1
JSR INTFAC
JSR FACXREG
LDA #<VAR_CV%[]
LDY #>VAR_CV%[]
RTS
;##################################################
COMPACT117
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_SG%
LDA VAR_SG%+1
JMP ICMP
;##################################################
COMPACT118
LDA #<VAR_PF%[]
LDY #>VAR_PF%[]
STA G_REG
STY G_REG+1
LDY VAR_IB%
LDA VAR_IB%+1
RTS
;##################################################
COMPACT119
STA G_REG
STY G_REG+1
LDY VAR_IB%
LDA VAR_IB%+1
JMP ARRAYACCESS_INTEGER_INT_SI
;##################################################
COMPACT120
LDA #$ff
LDY #$ff
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_CB%
LDA VAR_CB%+1
JMP ICMP
;##################################################
COMPACT121
LDY VAR_OV%
LDA VAR_OV%+1
STY TMP3_ZP
STA TMP3_ZP+1
LDY VAR_AV%
LDA VAR_AV%+1
JSR INTADDVAR
JSR FACINT
STY VAR_OV%
STA VAR_OV%+1
RTS
;##################################################
COMPACT122
LDY VAR_HP%
LDA VAR_HP%+1
STY TMP3_ZP
STA TMP3_ZP+1
LDY VAR_AV%
LDA VAR_AV%+1
JMP INTSUBVAR
;##################################################
COMPACT123
JSR REALFACPUSH
LDA #<CONST_2R
LDY #>CONST_2R
JSR REALFACPUSH
LDA #<VAR_II
LDY #>VAR_II
STA A_REG
STY A_REG+1
RTS
;##################################################
COMPACT124
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_AS%
LDA VAR_AS%+1
JMP ICMP
;##################################################
COMPACT125
JSR FACXREG
JSR POPREAL2X
JSR FASTFADDARG
JSR FACXREG
LDA #<VAR_CV%[]
LDY #>VAR_CV%[]
RTS
;##################################################
COMPACT126
JSR INTFAC
JSR PUSHREAL
JSR ONETOFAC
JSR FACRND
JSR COMPACT141
JMP FACINT
;##################################################
COMPACT127
STY AS_TMP
STA AS_TMP+1
LDA #<VAR_CP%[]
LDY #>VAR_CP%[]
STA G_REG
STY G_REG+1
RTS
;##################################################
COMPACT128
LDA #0
STY VAR_AT%
STA VAR_AT%+1
STY VAR_DD%
STA VAR_DD%+1
RTS
;##################################################
COMPACT129
STY VAR_RL%
STA VAR_RL%+1
LDY #180
LDA #0
STY VAR_LQ%
STA VAR_LQ%+1
RTS
;##################################################
COMPACT130
LDA #0
STY VAR_PT%
STA VAR_PT%+1
LDY #0
TYA
STY VAR_IM%
STA VAR_IM%+1
JSR GOSUB
JMP LINE_20000
;##################################################
COMPACT131
JSR INTADD
JSR FACXREG
LDY #3
STY A_REG
JSR SHL
JMP FACXREG
;##################################################
COMPACT132
JSR COMPACT134
RTS
;##################################################
COMPACT133
STY VAR_RL%
STA VAR_RL%+1
LDY #100
LDA #0
STY VAR_LQ%
STA VAR_LQ%+1
RTS
;##################################################
COMPACT134
STY VAR_EL%
STA VAR_EL%+1
JSR COMPACT181
RTS
;##################################################
COMPACT135
LDA #0
STY VAR_WF%
STA VAR_WF%+1
LDY #2
LDA #0
STY VAR_PT%
STA VAR_PT%+1
LDY #1
LDA #0
STY VAR_IM%
STA VAR_IM%+1
JSR GOSUB
JMP LINE_20000
;##################################################
COMPACT136
LDA #0
STY VAR_DC%
STA VAR_DC%+1
LDY #0
TYA
STY VAR_EL%
STA VAR_EL%+1
RTS
;##################################################
COMPACT137
LDY VAR_IB%
LDA VAR_IB%+1
STY TMP3_ZP
STA TMP3_ZP+1
LDY VAR_DR%
LDA VAR_DR%+1
JMP INTSUBVAR
;##################################################
COMPACT138
STA VAR_I
STA VAR_I+1
STA VAR_I+2
STA VAR_I+3
STA VAR_I+4
RTS
;##################################################
COMPACT139
LDA #<VAR_PF%[]
LDY #>VAR_PF%[]
STA G_REG
STY G_REG+1
LDY VAR_II%
LDA VAR_II%+1
RTS
;##################################################
COMPACT140
LDA #<X_REG
LDY #>X_REG
JSR REALFACPUSH
LDA #<CONST_8R
LDY #>CONST_8R
JMP REALFACPUSH
;##################################################
COMPACT141
JSR FACXREG
JSR POPREAL
LDA #<X_REG
LDY #>X_REG
JMP FASTFMULMEM
;##################################################
COMPACT142
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<VAR_AI%[]
LDY #>VAR_AI%[]
RTS
;##################################################
COMPACT143
JSR COMPACT144
JMP MID
;##################################################
COMPACT144
JSR POPREAL
LDX #<D_REG
LDY #>D_REG
JSR FACMEM
JSR POPREAL
LDX #<C_REG
LDY #>C_REG
JMP FACMEM
;##################################################
COMPACT145
LDA #<CONST_13R
LDY #>CONST_13R
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
RTS
;##################################################
COMPACT146
JSR POPREAL
LDA #<X_REG
LDY #>X_REG
JSR FASTFMULMEM
JMP FACXREG
;##################################################
COMPACT147
JSR ONETOFAC
LDA #<VAR_P
LDY #>VAR_P
JSR FASTFADDMEM
LDX #<VAR_P
LDY #>VAR_P
JMP FACMEM
;##################################################
COMPACT148
LDA #<VAR_P
LDY #>VAR_P
JSR COPY2_XYA_YREG
JSR YREGFAC
JMP FACWORD
;##################################################
COMPACT149
LDA #<VAR_CA
LDY #>VAR_CA
JSR COPY2_XYA_YREG
LDA #<VAR_P
LDY #>VAR_P
JSR COPY2_XYA_XREG
JSR YREGFAC
LDA #<X_REG
LDY #>X_REG
JSR FASTFADDMEM
JMP FACWORD
;##################################################
COMPACT150
LDY VAR_P3%
LDA VAR_P3%+1
JSR SUPERFIINX
STY VAR_P3%
STA VAR_P3%+1
RTS
;##################################################
COMPACT151
JSR ONETOFAC
LDA #<VAR_P
LDY #>VAR_P
JSR FASTFSUBMEM
LDX #<VAR_P
LDY #>VAR_P
JMP FACMEM
;##################################################
COMPACT152
JSR REALFACPUSH
LDA #<VAR_P
LDY #>VAR_P
STA A_REG
STY A_REG+1
RTS
;##################################################
COMPACT153
JSR COMPACT164
JMP ARRAYSTORE_INTEGER_NX
;##################################################
COMPACT154
STY AS_TMP
STA AS_TMP+1
LDA #<VAR_SK%[]
LDY #>VAR_SK%[]
STA G_REG
STY G_REG+1
RTS
;##################################################
COMPACT155
LDA TMP_ZP
CLC
ADC TMP2_ZP
STA TMP_ZP
LDA TMP_ZP+1
RTS
;##################################################
COMPACT156
ASL TMP_ZP
ROL TMP_ZP+1
LDA BCD
ADC BCD
STA BCD
RTS
;##################################################
COMPACT157
LDX G_REG
STX TMP_ZP
LDX G_REG+1
STX TMP_ZP+1
JSR COMPACT182
RTS
;##################################################
COMPACT158
TAX
TYA
ASL
STA TMP2_ZP
TXA
ROL
STA TMP2_ZP+1
RTS
;##################################################
COMPACT159
LDA TMP_ZP
CLC
ADC TMP3_ZP
STA TMP_ZP
LDA TMP_ZP+1
ADC TMP3_ZP+1
STA TMP_ZP+1
RTS
;##################################################
COMPACT160
JSR FACXREG
LDA #0
STA TMP_FLAG	; flag that the value isn't present in TMP2_ZP
LDY TMP3_ZP
LDA TMP3_ZP+1
JMP INTFAC
;##################################################
COMPACT161
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_A$
LDY #>VAR_A$
RTS
;##################################################
COMPACT162
LDA #$ff
LDY #$ff
STA TMP_ZP
STY TMP_ZP+1
LDY TMP2_ZP
LDA TMP2_ZP+1
RTS
;##################################################
COMPACT163
JSR STR
LDY A_REG
LDA A_REG+1
STY B_REG
STA B_REG+1
RTS
;##################################################
COMPACT164
JSR COPY_XREG2YREG
JSR POPREALXREG
LDA #<VAR_HP%[]
LDY #>VAR_HP%[]
STA G_REG
STY G_REG+1
RTS
;##################################################
COMPACT165
JSR REALFACPUSH
LDA #<VAR_I
LDY #>VAR_I
STA A_REG
STY A_REG+1
RTS
;##################################################
COMPACT166
<IF !X16>
SEI
LDY TIMEADDR
LDX TIMEADDR+1
LDA TIMEADDR+2
CLI
</IF>
SEC
JSR COPYTIME
JSR GETTIME
LDX #<VAR_TI
LDY #>VAR_TI
RTS
;##################################################
COMPACT167
JSR INTFAC
JSR FACXREG
JSR YREGFAC
LDA #<X_REG
LDY #>X_REG
RTS
;##################################################
COMPACT168
LDY VAR_CY%
LDA VAR_CY%+1
JSR SUPERFIINX
STY VAR_CY%
STA VAR_CY%+1
RTS
;##################################################
COMPACT169
JSR FACXREG
JSR COMPACT170
RTS
;##################################################
COMPACT170
LDA #<CONST_20R
LDY #>CONST_20R
JSR REALFAC
LDA #<X_REG
LDY #>X_REG
RTS
;##################################################
COMPACT171
LDY VAR_XC%
LDA VAR_XC%+1
STY VAR_CX%
STA VAR_CX%+1
LDY VAR_YC%
LDA VAR_YC%+1
STY VAR_CY%
STA VAR_CY%+1
RTS
;##################################################
COMPACT172
STA B_REG
STY B_REG+1
LDA VAR_A$
LDY VAR_A$+1
STA A_REG
STY A_REG+1
RTS
;##################################################
COMPACT173
STY AS_TMP
STA AS_TMP+1
LDA #<VAR_CD%[]
LDY #>VAR_CD%[]
STA G_REG
STY G_REG+1
RTS
;##################################################
COMPACT174
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_II%
LDA VAR_II%+1
RTS
;##################################################
COMPACT175
LDY VAR_DS%
LDA VAR_DS%+1
STY TMP3_ZP
STA TMP3_ZP+1
LDY VAR_CS%
LDA VAR_CS%+1
RTS
;##################################################
COMPACT176
LDY #$00
LDA #$07
STA TMP3_ZP
STY TMP3_ZP+1
LDY VAR_FS%
LDA VAR_FS%+1
JMP INTADD
;##################################################
COMPACT177
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_WN%
LDA VAR_WN%+1
RTS
;##################################################
COMPACT178
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
LDA #<VAR_PF%[]
LDY #>VAR_PF%[]
RTS
;##################################################
COMPACT179
LDA #<Y_REG
LDY #>Y_REG
JSR REALFACPUSH
LDA #<VAR_PF%[]
LDY #>VAR_PF%[]
RTS
;##################################################
COMPACT180
JSR INTADD
JSR FACXREG
LDY #3
STY A_REG
JMP SHL
;##################################################
COMPACT181
STY VAR_RL%
STA VAR_RL%+1
LDY #100
LDA #0
STY VAR_LQ%
STA VAR_LQ%+1
RTS
;##################################################
COMPACT182
TAX
TYA
ASL
STA TMP2_ZP
TXA
ROL
STA TMP2_ZP+1
RTS
;##################################################
; *** SUBROUTINES END ***
;##END_COMPACT
; *** CONSTANTS ***
CONSTANTS
; CONST: #11

CONST_0R	.REAL 11.0
; CONST: #0

CONST_1R	.REAL 0.0
; CONST: #1

CONST_2R	.REAL 1.0
; CONST: #128


; CONST: $chars
CONST_4	.BYTE 5
.STRG "chars"
; CONST: #8

CONST_5R	.REAL 8.0
; CONST: #21


; CONST: $copy
CONST_7	.BYTE 4
.STRG "copy"
; CONST: #2

CONST_8R	.REAL 2.0
; CONST: #-1.0

CONST_9	.REAL -1.0
; CONST: #9

CONST_10R	.REAL 9.0
; CONST: $ai level:
CONST_11	.BYTE 9
.STRG "ai level:"
; CONST: #6

CONST_12R	.REAL 6.0
; CONST: #3

CONST_13R	.REAL 3.0
; CONST: #4

CONST_14R	.REAL 4.0
; CONST: #5

CONST_15R	.REAL 5.0
; CONST: #44

CONST_16R	.REAL 44.0
; CONST: #54272.0

CONST_17	.REAL 54272.0
; CONST: #54296.0

CONST_18	.REAL 54296.0
; CONST: #15


; CONST: #7

CONST_20R	.REAL 7.0
; CONST: #19

CONST_21R	.REAL 19.0
; CONST: ${28*space}
CONST_22	.BYTE 10
.STRG "{28*space}"
; CONST: #100

CONST_23R	.REAL 100.0
; CONST: #40

CONST_24R	.REAL 40.0
; CONST: #48

CONST_25R	.REAL 48.0
; CONST: #28


; CONST: #66

CONST_27R	.REAL 66.0
; CONST: #88

CONST_28R	.REAL 88.0
; CONST: #37

CONST_29R	.REAL 37.0
; CONST: #32


; CONST: #200.0

CONST_31	.REAL 200.0
; CONST: #80

CONST_32R	.REAL 80.0
; CONST: #110

CONST_33R	.REAL 110.0
; CONST: #41

CONST_34R	.REAL 41.0
; CONST: #120

CONST_35R	.REAL 120.0
; CONST: #22

CONST_36R	.REAL 22.0
; CONST: #13


; CONST: #93


; CONST: ${117}{99}{99}{99}{99}{99}{105}
CONST_39	.BYTE 30
.STRG "{117}{99}{99}{99}{99}{99}{105}"
; CONST: ${98}     {98}
CONST_40	.BYTE 13
.STRG "{98}     {98}"
; CONST: #25


; CONST: ${106}{99}{99}{99}{99}{99}{107}
CONST_42	.BYTE 30
.STRG "{106}{99}{99}{99}{99}{99}{107}"
; CONST: ${235}{99}{99}{99}{99}{99}{179}
CONST_43	.BYTE 30
.STRG "{235}{99}{99}{99}{99}{99}{179}"
; CONST: #56576

CONST_44	.REAL 56576
; CONST: #252


; CONST: #56


; CONST: #204


; CONST: #52224

CONST_48	.REAL 52224
; CONST: #3072

CONST_49R	.REAL 3072.0
; CONST: #147


; CONST: $
CONST_51	.BYTE 7
.STRG "       "
; CONST: $shuffling...
CONST_52	.BYTE 12
.STRG "shuffling..."
; CONST: $/
CONST_53	.BYTE 1
.STRG "/"
; CONST: #800.0


; CONST: #67


; CONST: #75


; CONST: #-40.0


; CONST: #-12.0


; CONST: #867


; CONST: #160.0


; CONST: #827.0

CONST_61	.REAL 827.0
; CONST: #114


; CONST: #709


; CONST: #708.0

CONST_64	.REAL 708.0
; CONST: #107


; CONST: #29


; CONST: $
CONST_67	.BYTE 11
.STRG "           "
; CONST: #16


; CONST: #18

CONST_69R	.REAL 18.0
; CONST: #23

CONST_70R	.REAL 23.0
; CONST: #999

CONST_71R	.REAL 999.0
; CONST: #24


; CONST: $
CONST_73	.BYTE 10
.STRG "          "
; CONST: #33


; CONST: #36


; CONST: $
CONST_76	.BYTE 4
.STRG "    "
; CONST: #10

CONST_77R	.REAL 10.0
; CONST: #12


; CONST: ${99}
CONST_79	.BYTE 4
.STRG "{99}"
; CONST: #30

CONST_80R	.REAL 30.0
; CONST: #49


; CONST: #50


; CONST: #20

CONST_83R	.REAL 20.0
; CONST: ${117}{99}{99}{99}
CONST_84	.BYTE 17
.STRG "{117}{99}{99}{99}"
; CONST: ${98}{rvson}{230}{230}{230}{rvsoff}
CONST_85	.BYTE 34
.STRG "{98}{rvson}{230}{230}{230}{rvsoff}"
; CONST: ${98}{rvson}{230}{230}{rvsoff}
CONST_86	.BYTE 29
.STRG "{98}{rvson}{230}{230}{rvsoff}"
; CONST: #998

CONST_87R	.REAL 998.0
; CONST: #99


; CONST: #-1

CONST_89	.REAL -1
; CONST: $
CONST_90	.BYTE 0
.STRG ""
; CONST: $h
CONST_91	.BYTE 1
.STRG "h"
; CONST: $
CONST_92	.BYTE 1
.STRG " "
; CONST: #157


; CONST: $a
CONST_94	.BYTE 1
.STRG "a"
; CONST: $d
CONST_95	.BYTE 1
.STRG "d"
; CONST: #145


; CONST: $w
CONST_97	.BYTE 1
.STRG "w"
; CONST: #17


; CONST: $s
CONST_99	.BYTE 1
.STRG "s"
; CONST: $
CONST_100	.BYTE 3
.STRG "   "
; CONST: #39

CONST_101R	.REAL 39.0
; CONST: $q
CONST_102	.BYTE 1
.STRG "q"
; CONST: $x
CONST_103	.BYTE 1
.STRG "x"
; CONST: $2
CONST_104	.BYTE 1
.STRG "2"
; CONST: $1
CONST_105	.BYTE 1
.STRG "1"
; CONST: ${80*space}
CONST_106	.BYTE 10
.STRG "{80*space}"
; CONST: #203


; CONST: $0
CONST_108	.BYTE 1
.STRG "0"
; CONST: $5
CONST_109	.BYTE 1
.STRG "5"
; CONST: #1000


; CONST: ${98}{rvson}{230}{230}{230}{230}{230}{rvsoff}{98}
CONST_111	.BYTE 48
.STRG "{98}{rvson}{230}{230}{230}{230}{230}{rvsoff}{98}"
; CONST: ${37}:
CONST_112	.BYTE 5
.STRG "{37}:"
; CONST: ${92}
CONST_113	.BYTE 4
.STRG "{92}"
; CONST: #58


; CONST: #0.5

CONST_115	.REAL 0.5
; CONST: ${7*space}
CONST_116	.BYTE 9
.STRG "{7*space}"
; CONST: #-8.0


; CONST: #14


; CONST: #180


; CONST: #34


; CONST: #-32000.0


; CONST: $help
CONST_122	.BYTE 4
.STRG "help"
; CONST: $.hlp,s,r
CONST_123	.BYTE 8
.STRG ".hlp,s,r"
; CONST: $***
CONST_124	.BYTE 3
.STRG "***"
; CONST: $%
CONST_125	.BYTE 1
.STRG "%"
; CONST: $c to continue, x to exit
CONST_126	.BYTE 24
.STRG "c to continue, x to exit"
; CONST: $c
CONST_127	.BYTE 1
.STRG "c"
; CONST: #32000


; CONST: #200


; CONST: ${11*space}
CONST_130	.BYTE 10
.STRG "{11*space}"
; CONST: ${white}x:{light gray}end turn
CONST_131	.BYTE 29
.STRG "{white}x:{light gray}end turn"
; CONST: ${white}s/w:{light gray}select
CONST_132	.BYTE 29
.STRG "{white}s/w:{light gray}select"
; CONST: ${white}a/spc:{light gray}place
CONST_133	.BYTE 30
.STRG "{white}a/spc:{light gray}place"
; CONST: ${white}h:{light gray}help
CONST_134	.BYTE 25
.STRG "{white}h:{light gray}help"
; CONST: $!!!
CONST_135	.BYTE 3
.STRG "!!!"
; CONST: ${white}a/d:{light gray}select
CONST_136	.BYTE 29
.STRG "{white}a/d:{light gray}select"
; CONST: ${white}w/spc:{light gray}place
CONST_137	.BYTE 30
.STRG "{white}w/spc:{light gray}place"
; CONST: ${white}s:{light gray}cancel
CONST_138	.BYTE 27
.STRG "{white}s:{light gray}cancel"
; CONST: #224


; CONST: #49152

CONST_140	.REAL 49152
; CONST: #49279.0

CONST_141	.REAL 49279.0
; CONST: #97


; CONST: #124


;###############################
; ******** DATA ********
DATAS
.BYTE 3
.BYTE 0
.BYTE 32
.BYTE 3
.BYTE 0
.BYTE 3
.BYTE 0
.BYTE 168
.BYTE 3
.BYTE 0
.BYTE 3
.BYTE 1
.BYTE 169
.BYTE 3
.BYTE 0
.BYTE 6
.BYTE 170
.BYTE 64
.BYTE 10
.BYTE 170
.BYTE 128
.BYTE 42
.BYTE 170
.BYTE 160
.BYTE 42
.BYTE 170
.BYTE 160
.BYTE 7
.BYTE 171
.BYTE 64
.BYTE 7
.BYTE 171
.BYTE 64
.BYTE 7
.BYTE 171
.BYTE 64
.BYTE 7
.BYTE 171
.BYTE 64
.BYTE 7
.BYTE 171
.BYTE 64
.BYTE 7
.BYTE 171
.BYTE 64
.BYTE 7
.BYTE 171
.BYTE 64
.BYTE 7
.BYTE 171
.BYTE 64
.BYTE 7
.BYTE 3
.BYTE 255
.BYTE 64
.BYTE 5
.BYTE 85
.BYTE 64
.BYTE 7
.BYTE 3
.BYTE 255
.BYTE 64
.BYTE 5
.BYTE 221
.BYTE 64
.BYTE 7
.BYTE 3
.BYTE 255
.BYTE 64
.BYTE 3
.BYTE 1
.BYTE 85
.BYTE 3
.BYTE 0
.BYTE 133
.BYTE 3
.BYTE 0
.BYTE 3
.BYTE 0
.BYTE 3
.BYTE 0
.BYTE 32
.BYTE 3
.BYTE 0
.BYTE 80
.BYTE 120
.BYTE 3
.BYTE 0
.BYTE 112
.BYTE 28
.BYTE 3
.BYTE 1
.BYTE 224
.BYTE 30
.BYTE 3
.BYTE 1
.BYTE 192
.BYTE 7
.BYTE 7
.BYTE 128
.BYTE 7
.BYTE 135
.BYTE 3
.BYTE 0
.BYTE 3
.BYTE 1
.BYTE 222
.BYTE 3
.BYTE 0
.BYTE 3
.BYTE 1
.BYTE 220
.BYTE 3
.BYTE 0
.BYTE 3
.BYTE 0
.BYTE 120
.BYTE 3
.BYTE 0
.BYTE 3
.BYTE 0
.BYTE 112
.BYTE 3
.BYTE 0
.BYTE 3
.BYTE 1
.BYTE 220
.BYTE 32
.BYTE 113
.BYTE 222
.BYTE 176
.BYTE 127
.BYTE 135
.BYTE 240
.BYTE 31
.BYTE 7
.BYTE 192
.BYTE 31
.BYTE 135
.BYTE 192
.BYTE 31
.BYTE 222
.BYTE 224
.BYTE 56
.BYTE 220
.BYTE 112
.BYTE 48
.BYTE 3
.BYTE 0
.BYTE 112
.BYTE 3
.BYTE 0
.BYTE 3
.BYTE 0
.BYTE 3
.BYTE 0
.BYTE 3
.BYTE 0
.BYTE 3
.BYTE 0
.BYTE 3
.BYTE 0
.BYTE 143
.BYTE 3
.BYTE 0
.BYTE 3
.BYTE 0
.BYTE 3
.BYTE 1
.BYTE 3
.BYTE 0
.BYTE 3
.BYTE 0
.BYTE 124
.BYTE 3
.BYTE 1
.BYTE 5
.BYTE 3
.BYTE 2
.BYTE 3
.BYTE 2
.BYTE 3
.BYTE 0
.BYTE 132
.BYTE 3
.BYTE 0
.BYTE 3
.BYTE 3
.BYTE 3
.BYTE 1
.BYTE 4
.BYTE 3
.BYTE 0
.BYTE 136
.BYTE 4
.BYTE 12
.BYTE 3
.BYTE 1
.BYTE 3
.BYTE 0
.BYTE 5
.BYTE 140
.BYTE 3
.BYTE 2
.BYTE 3
.BYTE 1
.BYTE 3
.BYTE 2
.BYTE 3
.BYTE 0
.BYTE 3
.BYTE 3
.BYTE 128
.BYTE 3
.BYTE 1
.BYTE 6
.BYTE 3
.BYTE 2
.BYTE 3
.BYTE 2
.BYTE 3
.BYTE 0
.BYTE 144
.BYTE 3
.BYTE 3
.BYTE 6
.BYTE 3
.BYTE 3
.BYTE 3
.BYTE 0
.BYTE 4
.BYTE 148
.BYTE 3
.BYTE 2
.BYTE 5
.BYTE 3
.BYTE 3
.BYTE 3
.BYTE 3
.BYTE 3
.BYTE 0
.BYTE 152
.BYTE 3
.BYTE 3
.BYTE 7
.BYTE 3
.BYTE 3
.BYTE 4
.BYTE 3
.BYTE 0
.BYTE 156
.BYTE 3
.BYTE 1
.BYTE 4
.BYTE 3
.BYTE 2
.BYTE 3
.BYTE 0
.BYTE 3
.BYTE 3
.BYTE 160
.BYTE 3
.BYTE 2
.BYTE 8
.BYTE 3
.BYTE 3
.BYTE 4
.BYTE 3
.BYTE 0
.BYTE 164
.BYTE 3
.BYTE 2
.BYTE 14
.BYTE 3
.BYTE 1
.BYTE 3
.BYTE 0
.BYTE 3
.BYTE 2
.BYTE 168
.BYTE 3
.BYTE 1
.BYTE 6
.BYTE 4
.BYTE 3
.BYTE 3
.BYTE 3
.BYTE 0
.BYTE 172
.BYTE 3
.BYTE 2
.BYTE 10
.BYTE 3
.BYTE 3
.BYTE 4
.BYTE 3
.BYTE 0
.BYTE 176
.BYTE 3
.BYTE 1
.BYTE 9
.BYTE 3
.BYTE 1
.BYTE 3
.BYTE 0
.BYTE 3
.BYTE 2
.BYTE 180
.BYTE 3
.BYTE 1
.BYTE 7
.BYTE 3
.BYTE 3
.BYTE 3
.BYTE 3
.BYTE 3
.BYTE 0
.BYTE 184
.BYTE 3
.BYTE 1
.BYTE 12
.BYTE 3
.BYTE 2
.BYTE 3
.BYTE 0
.BYTE 3
.BYTE 3
.BYTE 188
.BYTE 3
.BYTE 2
.BYTE 3
.BYTE 1
.BYTE 3
.BYTE 2
.BYTE 3
.BYTE 3
.BYTE 3
.BYTE 0
.BYTE 192
.BYTE 3
.BYTE 0
.BYTE 13
.BYTE 5
.BYTE 3
.BYTE 0
.BYTE 4
.BYTE 196
.BYTE 3
.BYTE 1
.BYTE 4
.BYTE 3
.BYTE 2
.BYTE 3
.BYTE 2
.BYTE 3
.BYTE 0
.BYTE 200
.BYTE 3
.BYTE 3
.BYTE 11
.BYTE 3
.BYTE 2
.BYTE 4
.BYTE 3
.BYTE 0
.BYTE 204
.BYTE 3
.BYTE 1
.BYTE 9
.BYTE 3
.BYTE 2
.BYTE 3
.BYTE 0
.BYTE 3
.BYTE 3
.BYTE 208
.BYTE 0
.WORD -1
.BYTE 3
.BYTE 0
.BYTE 3
.BYTE 0
.BYTE 3
.BYTE 0
.BYTE 3
.BYTE 0
.BYTE 3
.BYTE 0
.BYTE 2
.BYTE 22
.STRG "draw a new card first!"
.BYTE 2
.BYTE 17
.STRG "not enough blood!"
.BYTE 2
.BYTE 17
.STRG "not enough bones!"
.BYTE 2
.BYTE 6
.STRG "fight!"
.BYTE 2
.BYTE 12
.STRG "player wins!"
.BYTE 2
.BYTE 14
.STRG "computer wins!"
.BYTE 2
.BYTE 10
.STRG "get ready!"
.BYTE 2
.BYTE 18
.STRG "choose bonus card!"
.BYTE 2
.BYTE 17
.STRG "computer resigns!"
.BYTE 2
.BYTE 1
.STRG "/"
.BYTE 3
.BYTE 2
.BYTE 10
.BYTE 7
.BYTE 3
.BYTE 1
.BYTE 7
.BYTE 10
.BYTE 59
.BYTE 39
.BYTE 38
.BYTE 34
.BYTE 35
.BYTE 36
.BYTE 6
.BYTE 3
.BYTE 2
.BYTE 3
.BYTE 1
.BYTE 6
.BYTE 3
.BYTE 3
.BYTE 3
.BYTE 1
.BYTE 6
.BYTE 4
.BYTE 3
.BYTE 1
.BYTE 8
.BYTE 4
.BYTE 3
.BYTE 1
.BYTE 8
.BYTE 5
.BYTE 3
.BYTE 0
.BYTE 10
.BYTE 6
.BYTE 3
.BYTE 0
.BYTE 12
.BYTE 7
.BYTE 3
.BYTE 0
.BYTE 14
.BYTE 7
.BYTE 3
.BYTE 0
.BYTE 16
.BYTE 8
.BYTE 3
.BYTE 0
.BYTE 20
.BYTE 9
.BYTE 3
.BYTE 0
.BYTE 30
.BYTE 9
.BYTE 3
.BYTE 0
.BYTE $FF
; ******** DATA END ********
CONSTANTS_END
;###################################
; *** VARIABLES ***
VARIABLES
; VAR: LF%
VAR_LF%	.WORD 0
; VAR: FI%
VAR_FI%	.WORD 0
; VAR: PF%[]
.BYTE 0
.WORD 24
VAR_PF%[]	.ARRAY 24
; VAR: MD%
VAR_MD%	.WORD 0
; VAR: AL%
VAR_AL%	.WORD 0
; VAR: MG%
VAR_MG%	.WORD 0
; VAR: AF%
VAR_AF%	.WORD 0
; VAR: RS%
VAR_RS%	.WORD 0
; VAR: CV%[]
.BYTE 0
.WORD 264
VAR_CV%[]	.ARRAY 264
; VAR: HP%[]
.BYTE 0
.WORD 24
VAR_HP%[]	.ARRAY 24
; VAR: VC%
VAR_VC%	.WORD 0
; VAR: AC%
VAR_AC%	.WORD 0
; VAR: I
VAR_I	.REAL 0.0
; VAR: IC%
VAR_IC%	.WORD 0
; VAR: VW%[]
.BYTE 0
.WORD 6
VAR_VW%[]	.ARRAY 6
; VAR: TI
VAR_TI	.REAL 0.0
; VAR: TT
VAR_TT	.REAL 0.0
; VAR: SB
VAR_SB	.REAL 0.0
; VAR: AT%
VAR_AT%	.WORD 0
; VAR: DD%
VAR_DD%	.WORD 0
; VAR: EL%
VAR_EL%	.WORD 0
; VAR: RL%
VAR_RL%	.WORD 0
; VAR: LQ%
VAR_LQ%	.WORD 0
; VAR: HQ%
VAR_HQ%	.WORD 0
; VAR: WF%
VAR_WF%	.WORD 0
; VAR: VL[]
.BYTE 1
.WORD 15
VAR_VL[]	.ARRAY 15
; VAR: PT%
VAR_PT%	.WORD 0
; VAR: VT%[]
.BYTE 0
.WORD 6
VAR_VT%[]	.ARRAY 6
; VAR: IM%
VAR_IM%	.WORD 0
; VAR: TS
VAR_TS	.REAL 0.0
; VAR: HH
VAR_HH	.REAL 0.0
; VAR: XC%
VAR_XC%	.WORD 0
; VAR: YC%
VAR_YC%	.WORD 0
; VAR: II
VAR_II	.REAL 0.0
; VAR: CN%
VAR_CN%	.WORD 0
; VAR: HP%
VAR_HP%	.WORD 0
; VAR: CX%
VAR_CX%	.WORD 0
; VAR: CY%
VAR_CY%	.WORD 0
; VAR: DC%
VAR_DC%	.WORD 0
; VAR: SS%
VAR_SS%	.WORD 0
; VAR: SA
VAR_SA	.REAL 0.0
; VAR: PP
VAR_PP	.REAL 0.0
; VAR: PV%
VAR_PV%	.WORD 0
; VAR: PC%
VAR_PC%	.WORD 0
; VAR: C%
VAR_C%	.WORD 0
; VAR: PO
VAR_PO	.REAL 0.0
; VAR: CA
VAR_CA	.REAL 0.0
; VAR: CC%
VAR_CC%	.WORD 0
; VAR: XD%
VAR_XD%	.WORD 0
; VAR: YD%
VAR_YD%	.WORD 0
; VAR: SE%
VAR_SE%	.WORD 0
; VAR: CM%
VAR_CM%	.WORD 0
; VAR: S1%
VAR_S1%	.WORD 0
; VAR: S2%
VAR_S2%	.WORD 0
; VAR: WN%
VAR_WN%	.WORD 0
; VAR: WW%
VAR_WW%	.WORD 0
; VAR: AV%
VAR_AV%	.WORD 0
; VAR: SG%
VAR_SG%	.WORD 0
; VAR: CH%
VAR_CH%	.WORD 0
; VAR: CB%
VAR_CB%	.WORD 0
; VAR: HC%
VAR_HC%	.WORD 0
; VAR: BC%
VAR_BC%	.WORD 0
; VAR: DS%
VAR_DS%	.WORD 0
; VAR: CP%[]
.BYTE 0
.WORD 202
VAR_CP%[]	.ARRAY 202
; VAR: PN%
VAR_PN%	.WORD 0
; VAR: PI%
VAR_PI%	.WORD 0
; VAR: I2%
VAR_I2%	.WORD 0
; VAR: I3%
VAR_I3%	.WORD 0
; VAR: I4%
VAR_I4%	.WORD 0
; VAR: II%
VAR_II%	.WORD 0
; VAR: CD%[]
.BYTE 0
.WORD 20
VAR_CD%[]	.ARRAY 20
; VAR: A%
VAR_A%	.WORD 0
; VAR: FC%[]
.BYTE 0
.WORD 12
VAR_FC%[]	.ARRAY 12
; VAR: SB%[]
.BYTE 0
.WORD 12
VAR_SB%[]	.ARRAY 12
; VAR: CI%
VAR_CI%	.WORD 0
; VAR: SF%
VAR_SF%	.WORD 0
; VAR: CS%
VAR_CS%	.WORD 0
; VAR: LT%
VAR_LT%	.WORD 0
; VAR: LT
VAR_LT	.REAL 0.0
; VAR: KY%
VAR_KY%	.WORD 0
; VAR: SO%
VAR_SO%	.WORD 0
; VAR: TC%
VAR_TC%	.WORD 0
; VAR: CT%[]
.BYTE 0
.WORD 20
VAR_CT%[]	.ARRAY 20
; VAR: WT%
VAR_WT%	.WORD 0
; VAR: SL%
VAR_SL%	.WORD 0
; VAR: FS%
VAR_FS%	.WORD 0
; VAR: SD%
VAR_SD%	.WORD 0
; VAR: DR%
VAR_DR%	.WORD 0
; VAR: TX%
VAR_TX%	.WORD 0
; VAR: TY%
VAR_TY%	.WORD 0
; VAR: TN%
VAR_TN%	.WORD 0
; VAR: IR%
VAR_IR%	.WORD 0
; VAR: AS%
VAR_AS%	.WORD 0
; VAR: DA%
VAR_DA%	.WORD 0
; VAR: VX%
VAR_VX%	.WORD 0
; VAR: VY%
VAR_VY%	.WORD 0
; VAR: DZ%
VAR_DZ%	.WORD 0
; VAR: XS%
VAR_XS%	.WORD 0
; VAR: YS%
VAR_YS%	.WORD 0
; VAR: XE%
VAR_XE%	.WORD 0
; VAR: YE%
VAR_YE%	.WORD 0
; VAR: DX
VAR_DX	.REAL 0.0
; VAR: DY
VAR_DY	.REAL 0.0
; VAR: I2
VAR_I2	.REAL 0.0
; VAR: I3
VAR_I3	.REAL 0.0
; VAR: P
VAR_P	.REAL 0.0
; VAR: CK%[]
.BYTE 0
.WORD 22
VAR_CK%[]	.ARRAY 22
; VAR: RW%
VAR_RW%	.WORD 0
; VAR: OV%
VAR_OV%	.WORD 0
; VAR: UR%
VAR_UR%	.WORD 0
; VAR: P2%
VAR_P2%	.WORD 0
; VAR: TP%
VAR_TP%	.WORD 0
; VAR: SK%[]
.BYTE 0
.WORD 66
VAR_SK%[]	.ARRAY 66
; VAR: FQ
VAR_FQ	.REAL 0.0
; VAR: HF%
VAR_HF%	.WORD 0
; VAR: I5%
VAR_I5%	.WORD 0
; VAR: HH%
VAR_HH%	.WORD 0
; VAR: IB%
VAR_IB%	.WORD 0
; VAR: P0%
VAR_P0%	.WORD 0
; VAR: P1%
VAR_P1%	.WORD 0
; VAR: IO%
VAR_IO%	.WORD 0
; VAR: TV%
VAR_TV%	.WORD 0
; VAR: IT%
VAR_IT%	.WORD 0
; VAR: X1%
VAR_X1%	.WORD 0
; VAR: Y1%
VAR_Y1%	.WORD 0
; VAR: P0
VAR_P0	.REAL 0.0
; VAR: P1
VAR_P1	.REAL 0.0
; VAR: IC
VAR_IC	.REAL 0.0
; VAR: P3%
VAR_P3%	.WORD 0
; VAR: P4%
VAR_P4%	.WORD 0
; VAR: PO%
VAR_PO%	.WORD 0
; VAR: XT%
VAR_XT%	.WORD 0
; VAR: YT%
VAR_YT%	.WORD 0
; VAR: XC
VAR_XC	.REAL 0.0
; VAR: Y
VAR_Y	.REAL 0.0
; VAR: 7%
VAR_7%	.WORD 0
; VAR: I4
VAR_I4	.REAL 0.0
; VAR: SC%
VAR_SC%	.WORD 0
; VAR: PF%
VAR_PF%	.WORD 0
; VAR: AI%[]
.BYTE 0
.WORD 8
VAR_AI%[]	.ARRAY 8
; VAR: EV%
VAR_EV%	.WORD 0
; VAR: MX%
VAR_MX%	.WORD 0
; VAR: GZ%
VAR_GZ%	.WORD 0
; VAR: OX%
VAR_OX%	.WORD 0
; VAR: OY%
VAR_OY%	.WORD 0
; VAR: F
VAR_F	.REAL 0.0
; VAR: RR%
VAR_RR%	.WORD 0
; VAR: RP%[]
.BYTE 0
.WORD 44
VAR_RP%[]	.ARRAY 44
; VAR: MI%
VAR_MI%	.WORD 0
; VAR: RO%[]
.BYTE 0
.WORD 44
VAR_RO%[]	.ARRAY 44
; VAR: RC%[]
.BYTE 0
.WORD 402
VAR_RC%[]	.ARRAY 402
; VAR: B%
VAR_B%	.WORD 0
; VAR: I%
VAR_I%	.WORD 0
; VAR: X
VAR_X	.REAL 0.0
; VAR: Y%
VAR_Y%	.WORD 0
STRINGVARS_START
; VAR: A$
VAR_A$	.WORD EMPTYSTR
; VAR: LI$
VAR_LI$	.WORD EMPTYSTR
; VAR: TI$
VAR_TI$ .WORD EMPTYSTR
STRINGVARS_END
STRINGARRAYS_START
; VAR: MG$[]
.BYTE 2
.WORD 22
VAR_MG$[]
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR
STRINGARRAYS_END
VARIABLES_END
; *** INTERNAL ***
Y_REG	.REAL 0.0
C_REG	.REAL 0.0
D_REG	.REAL 0.0
E_REG	.REAL 0.0
F_REG	.REAL 0.0
A_REG	.WORD 0
B_REG	.WORD 0
CMD_NUM	.BYTE 0
CHANNEL	.BYTE 0
SP_SAVE	.BYTE 0
TMP2_REG	.WORD 0
TMP3_REG	.WORD 0
TMP4_REG	.WORD 0
AS_TMP	.WORD 0
BPOINTER_TMP	.WORD 0
BASICTEXTP	.BYTE 0
STORE1	.WORD 0
STORE2	.WORD 0
STORE3	.WORD 0
STORE4	.WORD 0
GCSTART	.WORD 0
GCLEN	.WORD 0
GCWORK	.WORD 0
TMP_FREG	.REAL 0
TMP2_FREG	.REAL 0
TMP_FLAG	.BYTE 0
REAL_CONST_ONE	.REAL 1.0
REAL_CONST_ZERO	.REAL 0.0
REAL_CONST_MINUS_ONE	.REAL -1.0
CHLOCKFLAG	.BYTE 0
EMPTYSTR	.BYTE 0
FPSTACKP	.WORD FPSTACK
FORSTACKP	.WORD FORSTACK
DATASP	.WORD DATAS
LASTVAR	.WORD 0
LASTVARP	.WORD 0
HIGHP	.WORD STRBUF
STRBUFP	.WORD STRBUF
ENDSTRBUF	.WORD 0
INPUTQUEUEP	.BYTE 0
PROGRAMEND
INPUTQUEUE	.ARRAY $0F
FPSTACK .ARRAY 100
FORSTACK .ARRAY 340
STRBUF	.BYTE 0
